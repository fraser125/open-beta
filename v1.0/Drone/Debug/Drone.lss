
Drone.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004a84  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000a36  00802000  00004a84  00004b18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000382  00802a36  00802a36  0000554e  2**0
                  ALLOC
  3 .stab         000010c8  00000000  00000000  00005550  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000389  00000000  00000000  00006618  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000069a1  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000cc0  00000000  00000000  000069d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0001e5dd  00000000  00000000  00007690  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000657d  00000000  00000000  00025c6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0001e1df  00000000  00000000  0002c1ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000024b4  00000000  00000000  0004a3cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000207c2  00000000  00000000  0004c880  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00009ccb  00000000  00000000  0006d042  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000a58  00000000  00000000  00076d10  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0000f98d  00000000  00000000  00077768  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fa c0       	rjmp	.+500    	; 0x1f6 <__ctors_end>
       2:	00 00       	nop
       4:	17 c1       	rjmp	.+558    	; 0x234 <__bad_interrupt>
       6:	00 00       	nop
       8:	15 c1       	rjmp	.+554    	; 0x234 <__bad_interrupt>
       a:	00 00       	nop
       c:	13 c1       	rjmp	.+550    	; 0x234 <__bad_interrupt>
       e:	00 00       	nop
      10:	11 c1       	rjmp	.+546    	; 0x234 <__bad_interrupt>
      12:	00 00       	nop
      14:	0f c1       	rjmp	.+542    	; 0x234 <__bad_interrupt>
      16:	00 00       	nop
      18:	0d c1       	rjmp	.+538    	; 0x234 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	0b c1       	rjmp	.+534    	; 0x234 <__bad_interrupt>
      1e:	00 00       	nop
      20:	09 c1       	rjmp	.+530    	; 0x234 <__bad_interrupt>
      22:	00 00       	nop
      24:	07 c1       	rjmp	.+526    	; 0x234 <__bad_interrupt>
      26:	00 00       	nop
      28:	05 c1       	rjmp	.+522    	; 0x234 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	03 c1       	rjmp	.+518    	; 0x234 <__bad_interrupt>
      2e:	00 00       	nop
      30:	01 c1       	rjmp	.+514    	; 0x234 <__bad_interrupt>
      32:	00 00       	nop
      34:	ff c0       	rjmp	.+510    	; 0x234 <__bad_interrupt>
      36:	00 00       	nop
      38:	0c 94 d1 16 	jmp	0x2da2	; 0x2da2 <__vector_14>
      3c:	0c 94 fe 16 	jmp	0x2dfc	; 0x2dfc <__vector_15>
      40:	0c 94 2b 17 	jmp	0x2e56	; 0x2e56 <__vector_16>
      44:	0c 94 58 17 	jmp	0x2eb0	; 0x2eb0 <__vector_17>
      48:	0c 94 85 17 	jmp	0x2f0a	; 0x2f0a <__vector_18>
      4c:	0c 94 b2 17 	jmp	0x2f64	; 0x2f64 <__vector_19>
      50:	0c 94 df 17 	jmp	0x2fbe	; 0x2fbe <__vector_20>
      54:	0c 94 0c 18 	jmp	0x3018	; 0x3018 <__vector_21>
      58:	0c 94 39 18 	jmp	0x3072	; 0x3072 <__vector_22>
      5c:	0c 94 66 18 	jmp	0x30cc	; 0x30cc <__vector_23>
      60:	e9 c0       	rjmp	.+466    	; 0x234 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 4a 14 	jmp	0x2894	; 0x2894 <__vector_25>
      68:	0c 94 81 14 	jmp	0x2902	; 0x2902 <__vector_26>
      6c:	e3 c0       	rjmp	.+454    	; 0x234 <__bad_interrupt>
      6e:	00 00       	nop
      70:	e1 c0       	rjmp	.+450    	; 0x234 <__bad_interrupt>
      72:	00 00       	nop
      74:	df c0       	rjmp	.+446    	; 0x234 <__bad_interrupt>
      76:	00 00       	nop
      78:	dd c0       	rjmp	.+442    	; 0x234 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	db c0       	rjmp	.+438    	; 0x234 <__bad_interrupt>
      7e:	00 00       	nop
      80:	d9 c0       	rjmp	.+434    	; 0x234 <__bad_interrupt>
      82:	00 00       	nop
      84:	d7 c0       	rjmp	.+430    	; 0x234 <__bad_interrupt>
      86:	00 00       	nop
      88:	d5 c0       	rjmp	.+426    	; 0x234 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	d3 c0       	rjmp	.+422    	; 0x234 <__bad_interrupt>
      8e:	00 00       	nop
      90:	d1 c0       	rjmp	.+418    	; 0x234 <__bad_interrupt>
      92:	00 00       	nop
      94:	cf c0       	rjmp	.+414    	; 0x234 <__bad_interrupt>
      96:	00 00       	nop
      98:	cd c0       	rjmp	.+410    	; 0x234 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	cb c0       	rjmp	.+406    	; 0x234 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	c9 c0       	rjmp	.+402    	; 0x234 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	c7 c0       	rjmp	.+398    	; 0x234 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	c5 c0       	rjmp	.+394    	; 0x234 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	c3 c0       	rjmp	.+390    	; 0x234 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	c1 c0       	rjmp	.+386    	; 0x234 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	bf c0       	rjmp	.+382    	; 0x234 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	bd c0       	rjmp	.+378    	; 0x234 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 a1 19 	jmp	0x3342	; 0x3342 <__vector_47>
      c0:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__vector_48>
      c4:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__vector_49>
      c8:	0c 94 28 1a 	jmp	0x3450	; 0x3450 <__vector_50>
      cc:	0c 94 55 1a 	jmp	0x34aa	; 0x34aa <__vector_51>
      d0:	0c 94 82 1a 	jmp	0x3504	; 0x3504 <__vector_52>
      d4:	af c0       	rjmp	.+350    	; 0x234 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	ad c0       	rjmp	.+346    	; 0x234 <__bad_interrupt>
      da:	00 00       	nop
      dc:	ab c0       	rjmp	.+342    	; 0x234 <__bad_interrupt>
      de:	00 00       	nop
      e0:	a9 c0       	rjmp	.+338    	; 0x234 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	a7 c0       	rjmp	.+334    	; 0x234 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	a5 c0       	rjmp	.+330    	; 0x234 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	a3 c0       	rjmp	.+326    	; 0x234 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	a1 c0       	rjmp	.+322    	; 0x234 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	9f c0       	rjmp	.+318    	; 0x234 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	9d c0       	rjmp	.+314    	; 0x234 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	9b c0       	rjmp	.+310    	; 0x234 <__bad_interrupt>
      fe:	00 00       	nop
     100:	99 c0       	rjmp	.+306    	; 0x234 <__bad_interrupt>
     102:	00 00       	nop
     104:	97 c0       	rjmp	.+302    	; 0x234 <__bad_interrupt>
     106:	00 00       	nop
     108:	95 c0       	rjmp	.+298    	; 0x234 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	93 c0       	rjmp	.+294    	; 0x234 <__bad_interrupt>
     10e:	00 00       	nop
     110:	91 c0       	rjmp	.+290    	; 0x234 <__bad_interrupt>
     112:	00 00       	nop
     114:	8f c0       	rjmp	.+286    	; 0x234 <__bad_interrupt>
     116:	00 00       	nop
     118:	8d c0       	rjmp	.+282    	; 0x234 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	8b c0       	rjmp	.+278    	; 0x234 <__bad_interrupt>
     11e:	00 00       	nop
     120:	89 c0       	rjmp	.+274    	; 0x234 <__bad_interrupt>
     122:	00 00       	nop
     124:	87 c0       	rjmp	.+270    	; 0x234 <__bad_interrupt>
     126:	00 00       	nop
     128:	85 c0       	rjmp	.+266    	; 0x234 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	83 c0       	rjmp	.+262    	; 0x234 <__bad_interrupt>
     12e:	00 00       	nop
     130:	81 c0       	rjmp	.+258    	; 0x234 <__bad_interrupt>
     132:	00 00       	nop
     134:	0c 94 93 18 	jmp	0x3126	; 0x3126 <__vector_77>
     138:	0c 94 c0 18 	jmp	0x3180	; 0x3180 <__vector_78>
     13c:	0c 94 ed 18 	jmp	0x31da	; 0x31da <__vector_79>
     140:	0c 94 1a 19 	jmp	0x3234	; 0x3234 <__vector_80>
     144:	0c 94 47 19 	jmp	0x328e	; 0x328e <__vector_81>
     148:	0c 94 74 19 	jmp	0x32e8	; 0x32e8 <__vector_82>
     14c:	73 c0       	rjmp	.+230    	; 0x234 <__bad_interrupt>
     14e:	00 00       	nop
     150:	71 c0       	rjmp	.+226    	; 0x234 <__bad_interrupt>
     152:	00 00       	nop
     154:	6f c0       	rjmp	.+222    	; 0x234 <__bad_interrupt>
     156:	00 00       	nop
     158:	6d c0       	rjmp	.+218    	; 0x234 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	6b c0       	rjmp	.+214    	; 0x234 <__bad_interrupt>
     15e:	00 00       	nop
     160:	69 c0       	rjmp	.+210    	; 0x234 <__bad_interrupt>
     162:	00 00       	nop
     164:	67 c0       	rjmp	.+206    	; 0x234 <__bad_interrupt>
     166:	00 00       	nop
     168:	65 c0       	rjmp	.+202    	; 0x234 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	63 c0       	rjmp	.+198    	; 0x234 <__bad_interrupt>
     16e:	00 00       	nop
     170:	61 c0       	rjmp	.+194    	; 0x234 <__bad_interrupt>
     172:	00 00       	nop
     174:	5f c0       	rjmp	.+190    	; 0x234 <__bad_interrupt>
     176:	00 00       	nop
     178:	5d c0       	rjmp	.+186    	; 0x234 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	5b c0       	rjmp	.+182    	; 0x234 <__bad_interrupt>
     17e:	00 00       	nop
     180:	59 c0       	rjmp	.+178    	; 0x234 <__bad_interrupt>
     182:	00 00       	nop
     184:	57 c0       	rjmp	.+174    	; 0x234 <__bad_interrupt>
     186:	00 00       	nop
     188:	55 c0       	rjmp	.+170    	; 0x234 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	53 c0       	rjmp	.+166    	; 0x234 <__bad_interrupt>
     18e:	00 00       	nop
     190:	51 c0       	rjmp	.+162    	; 0x234 <__bad_interrupt>
     192:	00 00       	nop
     194:	4f c0       	rjmp	.+158    	; 0x234 <__bad_interrupt>
     196:	00 00       	nop
     198:	4d c0       	rjmp	.+154    	; 0x234 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	4b c0       	rjmp	.+150    	; 0x234 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	0c 94 63 24 	jmp	0x48c6	; 0x48c6 <__vector_104>
     1a4:	47 c0       	rjmp	.+142    	; 0x234 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	45 c0       	rjmp	.+138    	; 0x234 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	43 c0       	rjmp	.+134    	; 0x234 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	0c 94 af 1a 	jmp	0x355e	; 0x355e <__vector_108>
     1b4:	0c 94 dc 1a 	jmp	0x35b8	; 0x35b8 <__vector_109>
     1b8:	0c 94 09 1b 	jmp	0x3612	; 0x3612 <__vector_110>
     1bc:	0c 94 36 1b 	jmp	0x366c	; 0x366c <__vector_111>
     1c0:	0c 94 63 1b 	jmp	0x36c6	; 0x36c6 <__vector_112>
     1c4:	0c 94 90 1b 	jmp	0x3720	; 0x3720 <__vector_113>

000001c8 <btProxyMode>:
     1c8:	42 43 3a 44 42 3d 30 30 2c 30 30 00                 BC:DB=00,00.

000001d4 <debuguartinit>:
     1d4:	44 45 42 55 47 20 55 41 52 54 20 49 4e 49 54 3a     DEBUG UART INIT:
     1e4:	20 00                                                .

000001e6 <bad>:
     1e6:	42 41 44 00                                         BAD.

000001ea <good>:
     1ea:	47 4f 4f 44 00                                      GOOD.

000001ef <sleepmgr_configs>:
     1ef:	00 0e 06 0c 04 00 00                                .......

000001f6 <__ctors_end>:
     1f6:	11 24       	eor	r1, r1
     1f8:	1f be       	out	0x3f, r1	; 63
     1fa:	cf ef       	ldi	r28, 0xFF	; 255
     1fc:	df e2       	ldi	r29, 0x2F	; 47
     1fe:	de bf       	out	0x3e, r29	; 62
     200:	cd bf       	out	0x3d, r28	; 61

00000202 <__do_copy_data>:
     202:	1a e2       	ldi	r17, 0x2A	; 42
     204:	a0 e0       	ldi	r26, 0x00	; 0
     206:	b0 e2       	ldi	r27, 0x20	; 32
     208:	e4 e8       	ldi	r30, 0x84	; 132
     20a:	fa e4       	ldi	r31, 0x4A	; 74
     20c:	00 e0       	ldi	r16, 0x00	; 0
     20e:	0b bf       	out	0x3b, r16	; 59
     210:	02 c0       	rjmp	.+4      	; 0x216 <__do_copy_data+0x14>
     212:	07 90       	elpm	r0, Z+
     214:	0d 92       	st	X+, r0
     216:	a6 33       	cpi	r26, 0x36	; 54
     218:	b1 07       	cpc	r27, r17
     21a:	d9 f7       	brne	.-10     	; 0x212 <__do_copy_data+0x10>

0000021c <__do_clear_bss>:
     21c:	2d e2       	ldi	r18, 0x2D	; 45
     21e:	a6 e3       	ldi	r26, 0x36	; 54
     220:	ba e2       	ldi	r27, 0x2A	; 42
     222:	01 c0       	rjmp	.+2      	; 0x226 <.do_clear_bss_start>

00000224 <.do_clear_bss_loop>:
     224:	1d 92       	st	X+, r1

00000226 <.do_clear_bss_start>:
     226:	a8 3b       	cpi	r26, 0xB8	; 184
     228:	b2 07       	cpc	r27, r18
     22a:	e1 f7       	brne	.-8      	; 0x224 <.do_clear_bss_loop>
     22c:	0e 94 67 21 	call	0x42ce	; 0x42ce <main>
     230:	0c 94 40 25 	jmp	0x4a80	; 0x4a80 <_exit>

00000234 <__bad_interrupt>:
     234:	e5 ce       	rjmp	.-566    	; 0x0 <__vectors>

00000236 <setupAnalog>:
     236:	66 e3       	ldi	r22, 0x36	; 54
     238:	7a e2       	ldi	r23, 0x2A	; 42
     23a:	80 e0       	ldi	r24, 0x00	; 0
     23c:	92 e0       	ldi	r25, 0x02	; 2
     23e:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <adc_read_configuration>
     242:	4c e3       	ldi	r20, 0x3C	; 60
     244:	5a e2       	ldi	r21, 0x2A	; 42
     246:	61 e0       	ldi	r22, 0x01	; 1
     248:	80 e0       	ldi	r24, 0x00	; 0
     24a:	92 e0       	ldi	r25, 0x02	; 2
     24c:	0e 94 d6 15 	call	0x2bac	; 0x2bac <adcch_read_configuration>
     250:	e6 e3       	ldi	r30, 0x36	; 54
     252:	fa e2       	ldi	r31, 0x2A	; 42
     254:	80 81       	ld	r24, Z
     256:	a7 e3       	ldi	r26, 0x37	; 55
     258:	ba e2       	ldi	r27, 0x2A	; 42
     25a:	9c 91       	ld	r25, X
     25c:	9f 7c       	andi	r25, 0xCF	; 207
     25e:	90 62       	ori	r25, 0x20	; 32
     260:	9c 93       	st	X, r25
     262:	81 7e       	andi	r24, 0xE1	; 225
     264:	80 83       	st	Z, r24
     266:	10 92 38 2a 	sts	0x2A38, r1
     26a:	86 e0       	ldi	r24, 0x06	; 6
     26c:	80 93 39 2a 	sts	0x2A39, r24
     270:	bf 01       	movw	r22, r30
     272:	80 e0       	ldi	r24, 0x00	; 0
     274:	92 e0       	ldi	r25, 0x02	; 2
     276:	0c 94 62 15 	jmp	0x2ac4	; 0x2ac4 <adc_write_configuration>

0000027a <sampleAnalogChannel>:
     27a:	80 31       	cpi	r24, 0x10	; 16
     27c:	48 f0       	brcs	.+18     	; 0x290 <sampleAnalogChannel+0x16>
     27e:	10 92 3c 2a 	sts	0x2A3C, r1
     282:	80 51       	subi	r24, 0x10	; 16
     284:	88 0f       	add	r24, r24
     286:	88 0f       	add	r24, r24
     288:	88 0f       	add	r24, r24
     28a:	80 93 3d 2a 	sts	0x2A3D, r24
     28e:	08 c0       	rjmp	.+16     	; 0x2a0 <sampleAnalogChannel+0x26>
     290:	91 e0       	ldi	r25, 0x01	; 1
     292:	90 93 3c 2a 	sts	0x2A3C, r25
     296:	88 0f       	add	r24, r24
     298:	88 0f       	add	r24, r24
     29a:	88 0f       	add	r24, r24
     29c:	80 93 3d 2a 	sts	0x2A3D, r24
     2a0:	4c e3       	ldi	r20, 0x3C	; 60
     2a2:	5a e2       	ldi	r21, 0x2A	; 42
     2a4:	61 e0       	ldi	r22, 0x01	; 1
     2a6:	80 e0       	ldi	r24, 0x00	; 0
     2a8:	92 e0       	ldi	r25, 0x02	; 2
     2aa:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <adcch_write_configuration>
     2ae:	8f b7       	in	r24, 0x3f	; 63
     2b0:	f8 94       	cli
     2b2:	e0 e0       	ldi	r30, 0x00	; 0
     2b4:	f2 e0       	ldi	r31, 0x02	; 2
     2b6:	90 81       	ld	r25, Z
     2b8:	94 60       	ori	r25, 0x04	; 4
     2ba:	90 83       	st	Z, r25
     2bc:	8f bf       	out	0x3f, r24	; 63
     2be:	86 81       	ldd	r24, Z+6	; 0x06
     2c0:	80 ff       	sbrs	r24, 0
     2c2:	fd cf       	rjmp	.-6      	; 0x2be <sampleAnalogChannel+0x44>
     2c4:	e0 e0       	ldi	r30, 0x00	; 0
     2c6:	f2 e0       	ldi	r31, 0x02	; 2
     2c8:	81 e0       	ldi	r24, 0x01	; 1
     2ca:	86 83       	std	Z+6, r24	; 0x06
     2cc:	24 a1       	ldd	r18, Z+36	; 0x24
     2ce:	35 a1       	ldd	r19, Z+37	; 0x25
     2d0:	82 2f       	mov	r24, r18
     2d2:	93 2f       	mov	r25, r19
     2d4:	08 95       	ret

000002d6 <enableAnalog>:
     2d6:	80 e0       	ldi	r24, 0x00	; 0
     2d8:	92 e0       	ldi	r25, 0x02	; 2
     2da:	0c 94 4b 15 	jmp	0x2a96	; 0x2a96 <adc_enable>

000002de <board_init>:
     2de:	af 92       	push	r10
     2e0:	bf 92       	push	r11
     2e2:	df 92       	push	r13
     2e4:	ef 92       	push	r14
     2e6:	ff 92       	push	r15
     2e8:	0f 93       	push	r16
     2ea:	1f 93       	push	r17
     2ec:	cf 93       	push	r28
     2ee:	df 93       	push	r29
     2f0:	80 e4       	ldi	r24, 0x40	; 64
     2f2:	96 e0       	ldi	r25, 0x06	; 6
     2f4:	52 e0       	ldi	r21, 0x02	; 2
     2f6:	dc 01       	movw	r26, r24
     2f8:	15 96       	adiw	r26, 0x05	; 5
     2fa:	5c 93       	st	X, r21
     2fc:	15 97       	sbiw	r26, 0x05	; 5
     2fe:	11 96       	adiw	r26, 0x01	; 1
     300:	5c 93       	st	X, r21
     302:	11 97       	sbiw	r26, 0x01	; 1
     304:	e0 eb       	ldi	r30, 0xB0	; 176
     306:	f0 e0       	ldi	r31, 0x00	; 0
     308:	50 83       	st	Z, r21
     30a:	60 e2       	ldi	r22, 0x20	; 32
     30c:	50 96       	adiw	r26, 0x10	; 16
     30e:	6c 93       	st	X, r22
     310:	50 97       	sbiw	r26, 0x10	; 16
     312:	ff 24       	eor	r15, r15
     314:	f3 94       	inc	r15
     316:	12 96       	adiw	r26, 0x02	; 2
     318:	fc 92       	st	X, r15
     31a:	12 97       	sbiw	r26, 0x02	; 2
     31c:	f0 82       	st	Z, r15
     31e:	18 e0       	ldi	r17, 0x08	; 8
     320:	50 96       	adiw	r26, 0x10	; 16
     322:	1c 93       	st	X, r17
     324:	0f 2e       	mov	r0, r31
     326:	a1 2c       	mov	r10, r1
     328:	f6 e0       	ldi	r31, 0x06	; 6
     32a:	bf 2e       	mov	r11, r31
     32c:	f0 2d       	mov	r31, r0
     32e:	e5 01       	movw	r28, r10
     330:	1a 83       	std	Y+2, r17	; 0x02
     332:	10 83       	st	Z, r17
     334:	18 8a       	std	Y+16, r1	; 0x10
     336:	a0 e2       	ldi	r26, 0x20	; 32
     338:	b6 e0       	ldi	r27, 0x06	; 6
     33a:	12 96       	adiw	r26, 0x02	; 2
     33c:	5c 93       	st	X, r21
     33e:	12 97       	sbiw	r26, 0x02	; 2
     340:	50 83       	st	Z, r21
     342:	0f 2e       	mov	r0, r31
     344:	f8 e1       	ldi	r31, 0x18	; 24
     346:	ef 2e       	mov	r14, r31
     348:	f0 2d       	mov	r31, r0
     34a:	50 96       	adiw	r26, 0x10	; 16
     34c:	ec 92       	st	X, r14
     34e:	50 97       	sbiw	r26, 0x10	; 16
     350:	12 96       	adiw	r26, 0x02	; 2
     352:	6c 93       	st	X, r22
     354:	12 97       	sbiw	r26, 0x02	; 2
     356:	60 83       	st	Z, r22
     358:	50 96       	adiw	r26, 0x10	; 16
     35a:	ec 92       	st	X, r14
     35c:	50 97       	sbiw	r26, 0x10	; 16
     35e:	12 96       	adiw	r26, 0x02	; 2
     360:	1c 93       	st	X, r17
     362:	12 97       	sbiw	r26, 0x02	; 2
     364:	10 83       	st	Z, r17
     366:	50 96       	adiw	r26, 0x10	; 16
     368:	ec 92       	st	X, r14
     36a:	50 97       	sbiw	r26, 0x10	; 16
     36c:	5a 83       	std	Y+2, r21	; 0x02
     36e:	50 83       	st	Z, r21
     370:	e8 8a       	std	Y+16, r14	; 0x10
     372:	6a 83       	std	Y+2, r22	; 0x02
     374:	60 83       	st	Z, r22
     376:	e8 8a       	std	Y+16, r14	; 0x10
     378:	74 e0       	ldi	r23, 0x04	; 4
     37a:	12 96       	adiw	r26, 0x02	; 2
     37c:	7c 93       	st	X, r23
     37e:	12 97       	sbiw	r26, 0x02	; 2
     380:	70 83       	st	Z, r23
     382:	50 96       	adiw	r26, 0x10	; 16
     384:	ec 92       	st	X, r14
     386:	50 97       	sbiw	r26, 0x10	; 16
     388:	40 e1       	ldi	r20, 0x10	; 16
     38a:	4a 83       	std	Y+2, r20	; 0x02
     38c:	40 83       	st	Z, r20
     38e:	e8 8a       	std	Y+16, r14	; 0x10
     390:	00 e8       	ldi	r16, 0x80	; 128
     392:	0a 83       	std	Y+2, r16	; 0x02
     394:	00 83       	st	Z, r16
     396:	e8 8a       	std	Y+16, r14	; 0x10
     398:	20 ea       	ldi	r18, 0xA0	; 160
     39a:	36 e0       	ldi	r19, 0x06	; 6
     39c:	e9 01       	movw	r28, r18
     39e:	7a 83       	std	Y+2, r23	; 0x02
     3a0:	70 83       	st	Z, r23
     3a2:	48 8b       	std	Y+16, r20	; 0x10
     3a4:	6a 83       	std	Y+2, r22	; 0x02
     3a6:	60 83       	st	Z, r22
     3a8:	e8 8a       	std	Y+16, r14	; 0x10
     3aa:	0a 83       	std	Y+2, r16	; 0x02
     3ac:	00 83       	st	Z, r16
     3ae:	e8 8a       	std	Y+16, r14	; 0x10
     3b0:	68 94       	set
     3b2:	dd 24       	eor	r13, r13
     3b4:	d6 f8       	bld	r13, 6
     3b6:	da 82       	std	Y+2, r13	; 0x02
     3b8:	d0 82       	st	Z, r13
     3ba:	e8 8a       	std	Y+16, r14	; 0x10
     3bc:	12 96       	adiw	r26, 0x02	; 2
     3be:	4c 93       	st	X, r20
     3c0:	12 97       	sbiw	r26, 0x02	; 2
     3c2:	40 83       	st	Z, r20
     3c4:	50 96       	adiw	r26, 0x10	; 16
     3c6:	4c 93       	st	X, r20
     3c8:	50 97       	sbiw	r26, 0x10	; 16
     3ca:	e5 01       	movw	r28, r10
     3cc:	7a 83       	std	Y+2, r23	; 0x02
     3ce:	70 83       	st	Z, r23
     3d0:	48 8b       	std	Y+16, r20	; 0x10
     3d2:	12 96       	adiw	r26, 0x02	; 2
     3d4:	fc 92       	st	X, r15
     3d6:	12 97       	sbiw	r26, 0x02	; 2
     3d8:	f0 82       	st	Z, r15
     3da:	50 96       	adiw	r26, 0x10	; 16
     3dc:	1c 92       	st	X, r1
     3de:	50 97       	sbiw	r26, 0x10	; 16
     3e0:	da 82       	std	Y+2, r13	; 0x02
     3e2:	d0 82       	st	Z, r13
     3e4:	18 8a       	std	Y+16, r1	; 0x10
     3e6:	12 96       	adiw	r26, 0x02	; 2
     3e8:	0c 93       	st	X, r16
     3ea:	12 97       	sbiw	r26, 0x02	; 2
     3ec:	00 83       	st	Z, r16
     3ee:	50 96       	adiw	r26, 0x10	; 16
     3f0:	1c 92       	st	X, r1
     3f2:	50 97       	sbiw	r26, 0x10	; 16
     3f4:	12 96       	adiw	r26, 0x02	; 2
     3f6:	dc 92       	st	X, r13
     3f8:	12 97       	sbiw	r26, 0x02	; 2
     3fa:	d0 82       	st	Z, r13
     3fc:	50 96       	adiw	r26, 0x10	; 16
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	PORTCFG.MPCMASK = arch_ioport_pin_to_mask(pin);
	base->PIN0CTRL = mode;
     3fe:	1c 92       	st	X, r1
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     400:	c0 e8       	ldi	r28, 0x80	; 128
     402:	d6 e0       	ldi	r29, 0x06	; 6
     404:	5d 83       	std	Y+5, r21	; 0x05
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
     406:	59 83       	std	Y+1, r21	; 0x01
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	PORTCFG.MPCMASK = arch_ioport_pin_to_mask(pin);
     408:	50 83       	st	Z, r21
	base->PIN0CTRL = mode;
     40a:	18 8a       	std	Y+16, r1	; 0x10
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     40c:	fd 82       	std	Y+5, r15	; 0x05
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
     40e:	f9 82       	std	Y+1, r15	; 0x01
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	PORTCFG.MPCMASK = arch_ioport_pin_to_mask(pin);
     410:	f0 82       	st	Z, r15
	base->PIN0CTRL = mode;
     412:	18 8a       	std	Y+16, r1	; 0x10
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     414:	d9 01       	movw	r26, r18
     416:	16 96       	adiw	r26, 0x06	; 6
     418:	fc 92       	st	X, r15
     41a:	16 97       	sbiw	r26, 0x06	; 6
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
     41c:	11 96       	adiw	r26, 0x01	; 1
     41e:	fc 92       	st	X, r15
     420:	11 97       	sbiw	r26, 0x01	; 1
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	PORTCFG.MPCMASK = arch_ioport_pin_to_mask(pin);
     422:	f0 82       	st	Z, r15
	base->PIN0CTRL = mode;
     424:	50 96       	adiw	r26, 0x10	; 16
     426:	1c 92       	st	X, r1
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     428:	0f 2e       	mov	r0, r31
     42a:	f0 e6       	ldi	r31, 0x60	; 96
     42c:	af 2e       	mov	r10, r31
     42e:	f6 e0       	ldi	r31, 0x06	; 6
     430:	bf 2e       	mov	r11, r31
     432:	f0 2d       	mov	r31, r0
     434:	d5 01       	movw	r26, r10
     436:	15 96       	adiw	r26, 0x05	; 5
     438:	4c 93       	st	X, r20
     43a:	15 97       	sbiw	r26, 0x05	; 5
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
     43c:	11 96       	adiw	r26, 0x01	; 1
     43e:	4c 93       	st	X, r20
     440:	11 97       	sbiw	r26, 0x01	; 1
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	PORTCFG.MPCMASK = arch_ioport_pin_to_mask(pin);
     442:	40 83       	st	Z, r20
	base->PIN0CTRL = mode;
     444:	50 96       	adiw	r26, 0x10	; 16
     446:	1c 92       	st	X, r1
     448:	50 97       	sbiw	r26, 0x10	; 16
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     44a:	4e 83       	std	Y+6, r20	; 0x06
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
     44c:	4a 83       	std	Y+2, r20	; 0x02
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	PORTCFG.MPCMASK = arch_ioport_pin_to_mask(pin);
     44e:	40 83       	st	Z, r20
	base->PIN0CTRL = mode;
     450:	18 8a       	std	Y+16, r1	; 0x10
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
     452:	11 96       	adiw	r26, 0x01	; 1
     454:	dc 92       	st	X, r13
     456:	11 97       	sbiw	r26, 0x01	; 1
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	PORTCFG.MPCMASK = arch_ioport_pin_to_mask(pin);
     458:	d0 82       	st	Z, r13
	base->PIN0CTRL = mode;
     45a:	50 96       	adiw	r26, 0x10	; 16
     45c:	1c 92       	st	X, r1
     45e:	50 97       	sbiw	r26, 0x10	; 16
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     460:	1d 83       	std	Y+5, r17	; 0x05
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
     462:	19 83       	std	Y+1, r17	; 0x01
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	PORTCFG.MPCMASK = arch_ioport_pin_to_mask(pin);
     464:	10 83       	st	Z, r17
	base->PIN0CTRL = mode;
     466:	18 8a       	std	Y+16, r1	; 0x10
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     468:	7d 83       	std	Y+5, r23	; 0x05
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
     46a:	7a 83       	std	Y+2, r23	; 0x02
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	PORTCFG.MPCMASK = arch_ioport_pin_to_mask(pin);
     46c:	70 83       	st	Z, r23
	base->PIN0CTRL = mode;
     46e:	18 8a       	std	Y+16, r1	; 0x10
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     470:	16 96       	adiw	r26, 0x06	; 6
     472:	6c 93       	st	X, r22
     474:	16 97       	sbiw	r26, 0x06	; 6
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
     476:	12 96       	adiw	r26, 0x02	; 2
     478:	6c 93       	st	X, r22
     47a:	12 97       	sbiw	r26, 0x02	; 2
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	PORTCFG.MPCMASK = arch_ioport_pin_to_mask(pin);
     47c:	60 83       	st	Z, r22
	base->PIN0CTRL = mode;
     47e:	50 96       	adiw	r26, 0x10	; 16
     480:	1c 92       	st	X, r1
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     482:	6e 83       	std	Y+6, r22	; 0x06
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
     484:	69 83       	std	Y+1, r22	; 0x01
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	PORTCFG.MPCMASK = arch_ioport_pin_to_mask(pin);
     486:	60 83       	st	Z, r22
	base->PIN0CTRL = mode;
     488:	18 8a       	std	Y+16, r1	; 0x10
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     48a:	d9 01       	movw	r26, r18
     48c:	15 96       	adiw	r26, 0x05	; 5
     48e:	5c 93       	st	X, r21
     490:	15 97       	sbiw	r26, 0x05	; 5
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
     492:	11 96       	adiw	r26, 0x01	; 1
     494:	5c 93       	st	X, r21
     496:	11 97       	sbiw	r26, 0x01	; 1
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	PORTCFG.MPCMASK = arch_ioport_pin_to_mask(pin);
     498:	50 83       	st	Z, r21
	base->PIN0CTRL = mode;
     49a:	50 96       	adiw	r26, 0x10	; 16
     49c:	1c 92       	st	X, r1
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     49e:	d5 01       	movw	r26, r10
     4a0:	15 96       	adiw	r26, 0x05	; 5
     4a2:	fc 92       	st	X, r15
     4a4:	15 97       	sbiw	r26, 0x05	; 5
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
     4a6:	11 96       	adiw	r26, 0x01	; 1
     4a8:	fc 92       	st	X, r15
     4aa:	11 97       	sbiw	r26, 0x01	; 1
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	PORTCFG.MPCMASK = arch_ioport_pin_to_mask(pin);
     4ac:	f0 82       	st	Z, r15
	base->PIN0CTRL = mode;
     4ae:	50 96       	adiw	r26, 0x10	; 16
     4b0:	1c 92       	st	X, r1
     4b2:	50 97       	sbiw	r26, 0x10	; 16
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     4b4:	15 96       	adiw	r26, 0x05	; 5
     4b6:	5c 93       	st	X, r21
     4b8:	15 97       	sbiw	r26, 0x05	; 5
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
     4ba:	11 96       	adiw	r26, 0x01	; 1
     4bc:	5c 93       	st	X, r21
     4be:	11 97       	sbiw	r26, 0x01	; 1
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	PORTCFG.MPCMASK = arch_ioport_pin_to_mask(pin);
     4c0:	50 83       	st	Z, r21
	base->PIN0CTRL = mode;
     4c2:	50 96       	adiw	r26, 0x10	; 16
     4c4:	1c 92       	st	X, r1
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     4c6:	dc 01       	movw	r26, r24
     4c8:	15 96       	adiw	r26, 0x05	; 5
     4ca:	1c 93       	st	X, r17
     4cc:	15 97       	sbiw	r26, 0x05	; 5
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
     4ce:	11 96       	adiw	r26, 0x01	; 1
     4d0:	1c 93       	st	X, r17
     4d2:	11 97       	sbiw	r26, 0x01	; 1
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	PORTCFG.MPCMASK = arch_ioport_pin_to_mask(pin);
     4d4:	10 83       	st	Z, r17
	base->PIN0CTRL = mode;
     4d6:	50 96       	adiw	r26, 0x10	; 16
     4d8:	1c 92       	st	X, r1
     4da:	50 97       	sbiw	r26, 0x10	; 16
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     4dc:	15 96       	adiw	r26, 0x05	; 5
     4de:	7c 93       	st	X, r23
     4e0:	15 97       	sbiw	r26, 0x05	; 5
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
     4e2:	12 96       	adiw	r26, 0x02	; 2
     4e4:	7c 93       	st	X, r23
     4e6:	12 97       	sbiw	r26, 0x02	; 2
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	PORTCFG.MPCMASK = arch_ioport_pin_to_mask(pin);
     4e8:	70 83       	st	Z, r23
	base->PIN0CTRL = mode;
     4ea:	50 96       	adiw	r26, 0x10	; 16
     4ec:	1c 92       	st	X, r1
     4ee:	50 97       	sbiw	r26, 0x10	; 16
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     4f0:	0d 83       	std	Y+5, r16	; 0x05
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
     4f2:	09 83       	std	Y+1, r16	; 0x01
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	PORTCFG.MPCMASK = arch_ioport_pin_to_mask(pin);
     4f4:	00 83       	st	Z, r16
	base->PIN0CTRL = mode;
     4f6:	18 8a       	std	Y+16, r1	; 0x10
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     4f8:	e5 01       	movw	r28, r10
     4fa:	1d 83       	std	Y+5, r17	; 0x05
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
     4fc:	19 83       	std	Y+1, r17	; 0x01
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	PORTCFG.MPCMASK = arch_ioport_pin_to_mask(pin);
     4fe:	10 83       	st	Z, r17
	base->PIN0CTRL = mode;
     500:	18 8a       	std	Y+16, r1	; 0x10
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
     502:	7a 83       	std	Y+2, r23	; 0x02
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	PORTCFG.MPCMASK = arch_ioport_pin_to_mask(pin);
     504:	70 83       	st	Z, r23
	base->PIN0CTRL = mode;
     506:	18 8a       	std	Y+16, r1	; 0x10
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
     508:	0a 83       	std	Y+2, r16	; 0x02
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	PORTCFG.MPCMASK = arch_ioport_pin_to_mask(pin);
     50a:	00 83       	st	Z, r16
	base->PIN0CTRL = mode;
     50c:	48 8b       	std	Y+16, r20	; 0x10
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
     50e:	12 96       	adiw	r26, 0x02	; 2
     510:	4c 93       	st	X, r20
     512:	12 97       	sbiw	r26, 0x02	; 2
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	PORTCFG.MPCMASK = arch_ioport_pin_to_mask(pin);
     514:	40 83       	st	Z, r20
	base->PIN0CTRL = mode;
     516:	50 96       	adiw	r26, 0x10	; 16
     518:	4c 93       	st	X, r20
     51a:	50 97       	sbiw	r26, 0x10	; 16
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
     51c:	12 96       	adiw	r26, 0x02	; 2
     51e:	6c 93       	st	X, r22
     520:	12 97       	sbiw	r26, 0x02	; 2
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	PORTCFG.MPCMASK = arch_ioport_pin_to_mask(pin);
     522:	60 83       	st	Z, r22
	base->PIN0CTRL = mode;
     524:	50 96       	adiw	r26, 0x10	; 16
     526:	4c 93       	st	X, r20
     528:	50 97       	sbiw	r26, 0x10	; 16
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
     52a:	12 96       	adiw	r26, 0x02	; 2
     52c:	dc 92       	st	X, r13
     52e:	12 97       	sbiw	r26, 0x02	; 2
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	PORTCFG.MPCMASK = arch_ioport_pin_to_mask(pin);
     530:	d0 82       	st	Z, r13
	base->PIN0CTRL = mode;
     532:	50 96       	adiw	r26, 0x10	; 16
     534:	4c 93       	st	X, r20
     536:	50 97       	sbiw	r26, 0x10	; 16
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
     538:	12 96       	adiw	r26, 0x02	; 2
     53a:	0c 93       	st	X, r16
     53c:	12 97       	sbiw	r26, 0x02	; 2
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	PORTCFG.MPCMASK = arch_ioport_pin_to_mask(pin);
     53e:	00 83       	st	Z, r16
	base->PIN0CTRL = mode;
     540:	50 96       	adiw	r26, 0x10	; 16
     542:	4c 93       	st	X, r20
	
	ioport_set_pin_dir(DRONE_GPIO_3, IOPORT_DIR_INPUT);
	ioport_set_pin_mode(DRONE_GPIO_3, IOPORT_MODE_PULLDOWN);
	
	//TODO: USB_5V_PIN
}
     544:	df 91       	pop	r29
     546:	cf 91       	pop	r28
     548:	1f 91       	pop	r17
     54a:	0f 91       	pop	r16
     54c:	ff 90       	pop	r15
     54e:	ef 90       	pop	r14
     550:	df 90       	pop	r13
     552:	bf 90       	pop	r11
     554:	af 90       	pop	r10
     556:	08 95       	ret

00000558 <getChargeState>:
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	PORTCFG.MPCMASK = arch_ioport_pin_to_mask(pin);
     558:	81 e0       	ldi	r24, 0x01	; 1
     55a:	80 93 b0 00 	sts	0x00B0, r24
	base->PIN0CTRL = mode;
     55e:	80 e1       	ldi	r24, 0x10	; 16
     560:	e0 e4       	ldi	r30, 0x40	; 64
     562:	f6 e0       	ldi	r31, 0x06	; 6
     564:	80 8b       	std	Z+16, r24	; 0x10
     566:	80 e0       	ldi	r24, 0x00	; 0
     568:	90 e0       	ldi	r25, 0x00	; 0
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
     56a:	01 96       	adiw	r24, 0x01	; 1
     56c:	8a 36       	cpi	r24, 0x6A	; 106
     56e:	91 05       	cpc	r25, r1
     570:	e1 f7       	brne	.-8      	; 0x56a <getChargeState+0x12>

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
     572:	e0 e4       	ldi	r30, 0x40	; 64
     574:	f6 e0       	ldi	r31, 0x06	; 6
     576:	80 85       	ldd	r24, Z+8	; 0x08
	// Enable the pull-down and look for a high state:
	ioport_set_pin_mode(CHRG_STAT_PIN, IOPORT_MODE_PULLDOWN);
	delay_us(PIN_CHECK_DELAY_US);
	
	// Is the pin still high?
	if (ioport_get_pin_level(CHRG_STAT_PIN) == 1) {
     578:	80 fd       	sbrc	r24, 0
     57a:	10 c0       	rjmp	.+32     	; 0x59c <getChargeState+0x44>
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	PORTCFG.MPCMASK = arch_ioport_pin_to_mask(pin);
     57c:	81 e0       	ldi	r24, 0x01	; 1
     57e:	80 93 b0 00 	sts	0x00B0, r24
	base->PIN0CTRL = mode;
     582:	88 e1       	ldi	r24, 0x18	; 24
     584:	80 8b       	std	Z+16, r24	; 0x10
     586:	80 e0       	ldi	r24, 0x00	; 0
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	01 96       	adiw	r24, 0x01	; 1
     58c:	8a 36       	cpi	r24, 0x6A	; 106
     58e:	91 05       	cpc	r25, r1
     590:	e1 f7       	brne	.-8      	; 0x58a <getChargeState+0x32>

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
     592:	e0 e4       	ldi	r30, 0x40	; 64
     594:	f6 e0       	ldi	r31, 0x06	; 6
     596:	80 85       	ldd	r24, Z+8	; 0x08
		// Enable the pull-up and look for a low state:
		ioport_set_pin_mode(CHRG_STAT_PIN, IOPORT_MODE_PULLUP);
		delay_us(PIN_CHECK_DELAY_US);
		
		// Is the pin still low?
		if (ioport_get_pin_level(CHRG_STAT_PIN) == 0) {
     598:	81 70       	andi	r24, 0x01	; 1
     59a:	01 c0       	rjmp	.+2      	; 0x59e <getChargeState+0x46>
	ioport_set_pin_mode(CHRG_STAT_PIN, IOPORT_MODE_PULLDOWN);
	delay_us(PIN_CHECK_DELAY_US);
	
	// Is the pin still high?
	if (ioport_get_pin_level(CHRG_STAT_PIN) == 1) {
		toRet = FullyCharged;
     59c:	83 e0       	ldi	r24, 0x03	; 3
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	PORTCFG.MPCMASK = arch_ioport_pin_to_mask(pin);
     59e:	91 e0       	ldi	r25, 0x01	; 1
     5a0:	90 93 b0 00 	sts	0x00B0, r25
	base->PIN0CTRL = mode;
     5a4:	e0 e4       	ldi	r30, 0x40	; 64
     5a6:	f6 e0       	ldi	r31, 0x06	; 6
     5a8:	10 8a       	std	Z+16, r1	; 0x10
	// Return the pin to it's normal setup:
	ioport_set_pin_mode(CHRG_STAT_PIN, IOPORT_MODE_TOTEM);

	// If it wasn't high or low, then it must be hi-z:
	return toRet;
}
     5aa:	08 95       	ret

000005ac <showChargingIndicators>:

void showChargingIndicators()
{
	switch(getChargeState()) {
     5ac:	d5 df       	rcall	.-86     	; 0x558 <getChargeState>
     5ae:	81 30       	cpi	r24, 0x01	; 1
     5b0:	71 f0       	breq	.+28     	; 0x5ce <showChargingIndicators+0x22>
     5b2:	18 f0       	brcs	.+6      	; 0x5ba <showChargingIndicators+0xe>
     5b4:	83 30       	cpi	r24, 0x03	; 3
     5b6:	81 f4       	brne	.+32     	; 0x5d8 <showChargingIndicators+0x2c>
     5b8:	05 c0       	rjmp	.+10     	; 0x5c4 <showChargingIndicators+0x18>
		case Charging:
		setLEDValue(0, 1, 0);
     5ba:	40 e0       	ldi	r20, 0x00	; 0
     5bc:	61 e0       	ldi	r22, 0x01	; 1
     5be:	80 e0       	ldi	r24, 0x00	; 0
     5c0:	0c 94 28 13 	jmp	0x2650	; 0x2650 <setLEDValue>
		break;
		case FullyCharged:
		setLEDValue(0, 0, 1);
     5c4:	41 e0       	ldi	r20, 0x01	; 1
     5c6:	60 e0       	ldi	r22, 0x00	; 0
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     5ca:	0c 94 28 13 	jmp	0x2650	; 0x2650 <setLEDValue>
		break;
		case Error:
		setLEDValue(1, 0, 0);
     5ce:	40 e0       	ldi	r20, 0x00	; 0
     5d0:	60 e0       	ldi	r22, 0x00	; 0
     5d2:	81 e0       	ldi	r24, 0x01	; 1
     5d4:	0c 94 28 13 	jmp	0x2650	; 0x2650 <setLEDValue>
     5d8:	08 95       	ret

000005da <ManufactureTestButtonPress>:
	ManufactureTestButtonPress();

}

void ManufactureTestButtonPress(void)
{
     5da:	0f 2e       	mov	r0, r31
     5dc:	f9 e3       	ldi	r31, 0x39	; 57
     5de:	af 2e       	mov	r10, r31
     5e0:	f0 e2       	ldi	r31, 0x20	; 32
     5e2:	bf 2e       	mov	r11, r31
     5e4:	f0 2d       	mov	r31, r0
	
	ManufactureTestButtonPress();

}

void ManufactureTestButtonPress(void)
     5e6:	0f 2e       	mov	r0, r31
     5e8:	f5 e5       	ldi	r31, 0x55	; 85
     5ea:	cf 2e       	mov	r12, r31
     5ec:	f0 e2       	ldi	r31, 0x20	; 32
     5ee:	df 2e       	mov	r13, r31
     5f0:	f0 2d       	mov	r31, r0
{
	while(1)
	{
		setLEDValue(LED_OFF, LED_OFF, LED_OFF);
     5f2:	40 e0       	ldi	r20, 0x00	; 0
     5f4:	60 e0       	ldi	r22, 0x00	; 0
     5f6:	80 e0       	ldi	r24, 0x00	; 0
     5f8:	0e 94 28 13 	call	0x2650	; 0x2650 <setLEDValue>
		WatchdogPet();
     5fc:	0e 94 c6 14 	call	0x298c	; 0x298c <WatchdogPet>
		if (buttonActivated(B_START) & buttonActivated(B_SELECT))
     600:	88 e0       	ldi	r24, 0x08	; 8
     602:	ec d0       	rcall	.+472    	; 0x7dc <buttonActivated>
     604:	c8 2f       	mov	r28, r24
     606:	89 e0       	ldi	r24, 0x09	; 9
     608:	e9 d0       	rcall	.+466    	; 0x7dc <buttonActivated>
     60a:	88 23       	and	r24, r24
     60c:	81 f0       	breq	.+32     	; 0x62e <ManufactureTestButtonPress+0x54>
     60e:	cc 23       	and	r28, r28
     610:	71 f0       	breq	.+28     	; 0x62e <ManufactureTestButtonPress+0x54>
     612:	8a ea       	ldi	r24, 0xAA	; 170
     614:	90 eb       	ldi	r25, 0xB0	; 176
     616:	a8 e2       	ldi	r26, 0x28	; 40
     618:	b0 e0       	ldi	r27, 0x00	; 0
     61a:	01 97       	sbiw	r24, 0x01	; 1
     61c:	a1 09       	sbc	r26, r1
     61e:	b1 09       	sbc	r27, r1
     620:	e1 f7       	brne	.-8      	; 0x61a <ManufactureTestButtonPress+0x40>
	RST.STATUS = causes;
}

static inline void reset_do_soft_reset(void)
{
	ccp_write_io((void *)&RST.CTRL, RST_SWRST_bm);
     622:	61 e0       	ldi	r22, 0x01	; 1
     624:	89 e7       	ldi	r24, 0x79	; 121
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <ccp_write_io>
     62c:	ff cf       	rjmp	.-2      	; 0x62c <ManufactureTestButtonPress+0x52>
		{
			delay_ms(500);	
			reset_do_soft_reset();
		}
		
		if (buttonActivated(B_UP))
     62e:	80 e0       	ldi	r24, 0x00	; 0
     630:	d5 d0       	rcall	.+426    	; 0x7dc <buttonActivated>
     632:	88 23       	and	r24, r24
     634:	21 f0       	breq	.+8      	; 0x63e <ManufactureTestButtonPress+0x64>
		{
			setGreenLEDValue(LED_ON);
     636:	82 e3       	ldi	r24, 0x32	; 50
     638:	0e 94 30 12 	call	0x2460	; 0x2460 <setGreenLEDValue>
     63c:	83 c0       	rjmp	.+262    	; 0x744 <ManufactureTestButtonPress+0x16a>
		}
		else if (buttonActivated(B_DOWN))
     63e:	81 e0       	ldi	r24, 0x01	; 1
     640:	cd d0       	rcall	.+410    	; 0x7dc <buttonActivated>
     642:	88 23       	and	r24, r24
     644:	21 f0       	breq	.+8      	; 0x64e <ManufactureTestButtonPress+0x74>
		{
			setGreenLEDValue(LED_ON);
     646:	82 e3       	ldi	r24, 0x32	; 50
     648:	0e 94 30 12 	call	0x2460	; 0x2460 <setGreenLEDValue>
     64c:	7b c0       	rjmp	.+246    	; 0x744 <ManufactureTestButtonPress+0x16a>
		}
		else if (buttonActivated(B_LEFT))
     64e:	82 e0       	ldi	r24, 0x02	; 2
     650:	c5 d0       	rcall	.+394    	; 0x7dc <buttonActivated>
     652:	88 23       	and	r24, r24
     654:	21 f0       	breq	.+8      	; 0x65e <ManufactureTestButtonPress+0x84>
		{
			setGreenLEDValue(LED_ON);
     656:	82 e3       	ldi	r24, 0x32	; 50
     658:	0e 94 30 12 	call	0x2460	; 0x2460 <setGreenLEDValue>
     65c:	73 c0       	rjmp	.+230    	; 0x744 <ManufactureTestButtonPress+0x16a>
		}
		else if (buttonActivated(B_RIGHT))
     65e:	83 e0       	ldi	r24, 0x03	; 3
     660:	bd d0       	rcall	.+378    	; 0x7dc <buttonActivated>
     662:	88 23       	and	r24, r24
     664:	21 f0       	breq	.+8      	; 0x66e <ManufactureTestButtonPress+0x94>
		{
			setGreenLEDValue(LED_ON);
     666:	82 e3       	ldi	r24, 0x32	; 50
     668:	0e 94 30 12 	call	0x2460	; 0x2460 <setGreenLEDValue>
     66c:	6b c0       	rjmp	.+214    	; 0x744 <ManufactureTestButtonPress+0x16a>
		}
		else if (buttonActivated(B_A))
     66e:	84 e0       	ldi	r24, 0x04	; 4
     670:	b5 d0       	rcall	.+362    	; 0x7dc <buttonActivated>
     672:	88 23       	and	r24, r24
     674:	21 f0       	breq	.+8      	; 0x67e <ManufactureTestButtonPress+0xa4>
		{
			setGreenLEDValue(LED_ON);
     676:	82 e3       	ldi	r24, 0x32	; 50
     678:	0e 94 30 12 	call	0x2460	; 0x2460 <setGreenLEDValue>
     67c:	63 c0       	rjmp	.+198    	; 0x744 <ManufactureTestButtonPress+0x16a>
		}
		else if (buttonActivated(B_B))
     67e:	85 e0       	ldi	r24, 0x05	; 5
     680:	ad d0       	rcall	.+346    	; 0x7dc <buttonActivated>
     682:	88 23       	and	r24, r24
     684:	21 f0       	breq	.+8      	; 0x68e <ManufactureTestButtonPress+0xb4>
		{
			setGreenLEDValue(LED_ON);
     686:	82 e3       	ldi	r24, 0x32	; 50
     688:	0e 94 30 12 	call	0x2460	; 0x2460 <setGreenLEDValue>
     68c:	5b c0       	rjmp	.+182    	; 0x744 <ManufactureTestButtonPress+0x16a>
		}
		else if (buttonActivated(B_X))
     68e:	86 e0       	ldi	r24, 0x06	; 6
     690:	a5 d0       	rcall	.+330    	; 0x7dc <buttonActivated>
     692:	88 23       	and	r24, r24
     694:	21 f0       	breq	.+8      	; 0x69e <ManufactureTestButtonPress+0xc4>
		{
			setGreenLEDValue(LED_ON);
     696:	82 e3       	ldi	r24, 0x32	; 50
     698:	0e 94 30 12 	call	0x2460	; 0x2460 <setGreenLEDValue>
     69c:	53 c0       	rjmp	.+166    	; 0x744 <ManufactureTestButtonPress+0x16a>
		}
		else if (buttonActivated(B_Y))
     69e:	87 e0       	ldi	r24, 0x07	; 7
     6a0:	9d d0       	rcall	.+314    	; 0x7dc <buttonActivated>
     6a2:	88 23       	and	r24, r24
     6a4:	21 f0       	breq	.+8      	; 0x6ae <ManufactureTestButtonPress+0xd4>
		{
			setGreenLEDValue(LED_ON);
     6a6:	82 e3       	ldi	r24, 0x32	; 50
     6a8:	0e 94 30 12 	call	0x2460	; 0x2460 <setGreenLEDValue>
     6ac:	4b c0       	rjmp	.+150    	; 0x744 <ManufactureTestButtonPress+0x16a>
		}
		else if (buttonActivated(B_START))
     6ae:	88 e0       	ldi	r24, 0x08	; 8
     6b0:	95 d0       	rcall	.+298    	; 0x7dc <buttonActivated>
     6b2:	88 23       	and	r24, r24
     6b4:	21 f0       	breq	.+8      	; 0x6be <ManufactureTestButtonPress+0xe4>
		{
			setGreenLEDValue(LED_ON);
     6b6:	82 e3       	ldi	r24, 0x32	; 50
     6b8:	0e 94 30 12 	call	0x2460	; 0x2460 <setGreenLEDValue>
     6bc:	43 c0       	rjmp	.+134    	; 0x744 <ManufactureTestButtonPress+0x16a>
		}
		else if (buttonActivated(B_SELECT))
     6be:	89 e0       	ldi	r24, 0x09	; 9
     6c0:	8d d0       	rcall	.+282    	; 0x7dc <buttonActivated>
     6c2:	88 23       	and	r24, r24
     6c4:	21 f0       	breq	.+8      	; 0x6ce <ManufactureTestButtonPress+0xf4>
		{
			setGreenLEDValue(LED_ON);
     6c6:	82 e3       	ldi	r24, 0x32	; 50
     6c8:	0e 94 30 12 	call	0x2460	; 0x2460 <setGreenLEDValue>
     6cc:	3b c0       	rjmp	.+118    	; 0x744 <ManufactureTestButtonPress+0x16a>
		}
		else if (buttonActivated(B_LB))
     6ce:	8b e0       	ldi	r24, 0x0B	; 11
     6d0:	85 d0       	rcall	.+266    	; 0x7dc <buttonActivated>
     6d2:	88 23       	and	r24, r24
     6d4:	21 f0       	breq	.+8      	; 0x6de <ManufactureTestButtonPress+0x104>
		{
			setGreenLEDValue(LED_ON);
     6d6:	82 e3       	ldi	r24, 0x32	; 50
     6d8:	0e 94 30 12 	call	0x2460	; 0x2460 <setGreenLEDValue>
     6dc:	33 c0       	rjmp	.+102    	; 0x744 <ManufactureTestButtonPress+0x16a>
		}
		else if (buttonActivated(B_RB))
     6de:	8a e0       	ldi	r24, 0x0A	; 10
     6e0:	7d d0       	rcall	.+250    	; 0x7dc <buttonActivated>
     6e2:	88 23       	and	r24, r24
     6e4:	21 f0       	breq	.+8      	; 0x6ee <ManufactureTestButtonPress+0x114>
		{
			setGreenLEDValue(LED_ON);
     6e6:	82 e3       	ldi	r24, 0x32	; 50
     6e8:	0e 94 30 12 	call	0x2460	; 0x2460 <setGreenLEDValue>
     6ec:	2b c0       	rjmp	.+86     	; 0x744 <ManufactureTestButtonPress+0x16a>
		}
		else if (buttonActivated(B_LT))
     6ee:	8d e0       	ldi	r24, 0x0D	; 13
     6f0:	75 d0       	rcall	.+234    	; 0x7dc <buttonActivated>
     6f2:	88 23       	and	r24, r24
     6f4:	21 f0       	breq	.+8      	; 0x6fe <ManufactureTestButtonPress+0x124>
		{
			setGreenLEDValue(LED_ON);
     6f6:	82 e3       	ldi	r24, 0x32	; 50
     6f8:	0e 94 30 12 	call	0x2460	; 0x2460 <setGreenLEDValue>
     6fc:	23 c0       	rjmp	.+70     	; 0x744 <ManufactureTestButtonPress+0x16a>
		}
		else if (buttonActivated(B_RT))
     6fe:	8c e0       	ldi	r24, 0x0C	; 12
     700:	6d d0       	rcall	.+218    	; 0x7dc <buttonActivated>
     702:	88 23       	and	r24, r24
     704:	f9 f0       	breq	.+62     	; 0x744 <ManufactureTestButtonPress+0x16a>
		{
			setGreenLEDValue(LED_ON);
     706:	82 e3       	ldi	r24, 0x32	; 50
     708:	0e 94 30 12 	call	0x2460	; 0x2460 <setGreenLEDValue>
     70c:	1b c0       	rjmp	.+54     	; 0x744 <ManufactureTestButtonPress+0x16a>
	
	ManufactureTestButtonPress();

}

void ManufactureTestButtonPress(void)
     70e:	fe 01       	movw	r30, r28
     710:	31 97       	sbiw	r30, 0x01	; 1
		}
		
		uint16_t idx; // temporary variable.
		for (idx = 0 ; idx < NUM_JOYSTICKS; idx++) {
			uint16_t x_result, y_result;
			x_result = sampleAnalogChannel(joysticks[idx].adc_channel_x);
     712:	80 81       	ld	r24, Z
     714:	b2 dd       	rcall	.-1180   	; 0x27a <sampleAnalogChannel>
     716:	8c 01       	movw	r16, r24
			y_result = sampleAnalogChannel(joysticks[idx].adc_channel_y);
     718:	88 81       	ld	r24, Y
     71a:	af dd       	rcall	.-1186   	; 0x27a <sampleAnalogChannel>
     71c:	7c 01       	movw	r14, r24
			// Hard Coded Dead Zone so all LED's can be used for other buttons
			if (x_result > 3500)
     71e:	0d 3a       	cpi	r16, 0xAD	; 173
     720:	1d 40       	sbci	r17, 0x0D	; 13
     722:	18 f0       	brcs	.+6      	; 0x72a <ManufactureTestButtonPress+0x150>
			{			
				//X = Green
				setGreenLEDValue(LED_ON);
     724:	82 e3       	ldi	r24, 0x32	; 50
     726:	0e 94 30 12 	call	0x2460	; 0x2460 <setGreenLEDValue>
			}
			if (y_result > 3500)
     72a:	8d ea       	ldi	r24, 0xAD	; 173
     72c:	e8 16       	cp	r14, r24
     72e:	8d e0       	ldi	r24, 0x0D	; 13
     730:	f8 06       	cpc	r15, r24
     732:	18 f0       	brcs	.+6      	; 0x73a <ManufactureTestButtonPress+0x160>
			{
				// Y = Green
				setGreenLEDValue(LED_ON);			
     734:	82 e3       	ldi	r24, 0x32	; 50
     736:	0e 94 30 12 	call	0x2460	; 0x2460 <setGreenLEDValue>
     73a:	2e 96       	adiw	r28, 0x0e	; 14
		{
			setGreenLEDValue(LED_ON);
		}
		
		uint16_t idx; // temporary variable.
		for (idx = 0 ; idx < NUM_JOYSTICKS; idx++) {
     73c:	cc 15       	cp	r28, r12
     73e:	dd 05       	cpc	r29, r13
     740:	31 f7       	brne	.-52     	; 0x70e <ManufactureTestButtonPress+0x134>
     742:	57 cf       	rjmp	.-338    	; 0x5f2 <ManufactureTestButtonPress+0x18>
     744:	e5 01       	movw	r28, r10
     746:	e3 cf       	rjmp	.-58     	; 0x70e <ManufactureTestButtonPress+0x134>

00000748 <biosMain>:
void biosMain(void);
void ManufactureTestButtonPress(void);

void biosMain(void)
{
	setupLEDs(false);
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	0e 94 cb 11 	call	0x2396	; 0x2396 <setupLEDs>
	setLEDValue(LED_OFF, LED_OFF, LED_OFF);
     74e:	40 e0       	ldi	r20, 0x00	; 0
     750:	60 e0       	ldi	r22, 0x00	; 0
     752:	80 e0       	ldi	r24, 0x00	; 0
     754:	0e 94 28 13 	call	0x2650	; 0x2650 <setLEDValue>
		
	setLEDValue(LED_ON, LED_OFF, LED_OFF);
     758:	40 e0       	ldi	r20, 0x00	; 0
     75a:	60 e0       	ldi	r22, 0x00	; 0
     75c:	82 e3       	ldi	r24, 0x32	; 50
     75e:	0e 94 28 13 	call	0x2650	; 0x2650 <setLEDValue>
     762:	8a ea       	ldi	r24, 0xAA	; 170
     764:	96 e4       	ldi	r25, 0x46	; 70
     766:	a0 e1       	ldi	r26, 0x10	; 16
     768:	b0 e0       	ldi	r27, 0x00	; 0
     76a:	01 97       	sbiw	r24, 0x01	; 1
     76c:	a1 09       	sbc	r26, r1
     76e:	b1 09       	sbc	r27, r1
     770:	e1 f7       	brne	.-8      	; 0x76a <biosMain+0x22>
	delay_ms(200);
	setLEDValue(LED_OFF, LED_OFF, LED_OFF);
     772:	40 e0       	ldi	r20, 0x00	; 0
     774:	60 e0       	ldi	r22, 0x00	; 0
     776:	80 e0       	ldi	r24, 0x00	; 0
     778:	0e 94 28 13 	call	0x2650	; 0x2650 <setLEDValue>
     77c:	8a ea       	ldi	r24, 0xAA	; 170
     77e:	96 e4       	ldi	r25, 0x46	; 70
     780:	a0 e1       	ldi	r26, 0x10	; 16
     782:	b0 e0       	ldi	r27, 0x00	; 0
     784:	01 97       	sbiw	r24, 0x01	; 1
     786:	a1 09       	sbc	r26, r1
     788:	b1 09       	sbc	r27, r1
     78a:	e1 f7       	brne	.-8      	; 0x784 <biosMain+0x3c>
	delay_ms(200);
	setLEDValue(LED_ON, LED_OFF, LED_OFF);
     78c:	40 e0       	ldi	r20, 0x00	; 0
     78e:	60 e0       	ldi	r22, 0x00	; 0
     790:	82 e3       	ldi	r24, 0x32	; 50
     792:	0e 94 28 13 	call	0x2650	; 0x2650 <setLEDValue>
     796:	8a ea       	ldi	r24, 0xAA	; 170
     798:	96 e4       	ldi	r25, 0x46	; 70
     79a:	a0 e1       	ldi	r26, 0x10	; 16
     79c:	b0 e0       	ldi	r27, 0x00	; 0
     79e:	01 97       	sbiw	r24, 0x01	; 1
     7a0:	a1 09       	sbc	r26, r1
     7a2:	b1 09       	sbc	r27, r1
     7a4:	e1 f7       	brne	.-8      	; 0x79e <biosMain+0x56>
	delay_ms(200);
	setLEDValue(LED_OFF, LED_OFF, LED_OFF);
     7a6:	40 e0       	ldi	r20, 0x00	; 0
     7a8:	60 e0       	ldi	r22, 0x00	; 0
     7aa:	80 e0       	ldi	r24, 0x00	; 0
     7ac:	0e 94 28 13 	call	0x2650	; 0x2650 <setLEDValue>
     7b0:	8a ea       	ldi	r24, 0xAA	; 170
     7b2:	96 e4       	ldi	r25, 0x46	; 70
     7b4:	a0 e1       	ldi	r26, 0x10	; 16
     7b6:	b0 e0       	ldi	r27, 0x00	; 0
     7b8:	01 97       	sbiw	r24, 0x01	; 1
     7ba:	a1 09       	sbc	r26, r1
     7bc:	b1 09       	sbc	r27, r1
     7be:	e1 f7       	brne	.-8      	; 0x7b8 <biosMain+0x70>
	delay_ms(200);
	setLEDValue(LED_ON, LED_OFF, LED_OFF);
     7c0:	40 e0       	ldi	r20, 0x00	; 0
     7c2:	60 e0       	ldi	r22, 0x00	; 0
     7c4:	82 e3       	ldi	r24, 0x32	; 50
     7c6:	0e 94 28 13 	call	0x2650	; 0x2650 <setLEDValue>
     7ca:	8a ea       	ldi	r24, 0xAA	; 170
     7cc:	96 e4       	ldi	r25, 0x46	; 70
     7ce:	a0 e1       	ldi	r26, 0x10	; 16
     7d0:	b0 e0       	ldi	r27, 0x00	; 0
     7d2:	01 97       	sbiw	r24, 0x01	; 1
     7d4:	a1 09       	sbc	r26, r1
     7d6:	b1 09       	sbc	r27, r1
     7d8:	e1 f7       	brne	.-8      	; 0x7d2 <biosMain+0x8a>
	delay_ms(200);
	
	ManufactureTestButtonPress();
     7da:	ff de       	rcall	.-514    	; 0x5da <ManufactureTestButtonPress>

000007dc <buttonActivated>:
{ RT_PIN,     0, BUTTON_RELEASED, ACTIVE_LOW},
{ LT_PIN,     0, BUTTON_RELEASED, ACTIVE_LOW}
};

bool buttonActivated(enum ButtonName bn) {
	if(ioport_get_pin_level(buttons[bn].pin)) {
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	fc 01       	movw	r30, r24
     7e0:	ee 0f       	add	r30, r30
     7e2:	ff 1f       	adc	r31, r31
     7e4:	ee 0f       	add	r30, r30
     7e6:	ff 1f       	adc	r31, r31
     7e8:	e0 50       	subi	r30, 0x00	; 0
     7ea:	f0 4e       	sbci	r31, 0xE0	; 224
     7ec:	30 81       	ld	r19, Z
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static inline ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
     7ee:	e3 2f       	mov	r30, r19
     7f0:	e6 95       	lsr	r30
     7f2:	e6 95       	lsr	r30
     7f4:	e6 95       	lsr	r30
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
     7f6:	20 e2       	ldi	r18, 0x20	; 32
     7f8:	e2 9f       	mul	r30, r18
     7fa:	f0 01       	movw	r30, r0
     7fc:	11 24       	eor	r1, r1
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
     7fe:	fa 5f       	subi	r31, 0xFA	; 250

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
     800:	60 85       	ldd	r22, Z+8	; 0x08
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     802:	37 70       	andi	r19, 0x07	; 7
     804:	41 e0       	ldi	r20, 0x01	; 1
     806:	50 e0       	ldi	r21, 0x00	; 0
     808:	fa 01       	movw	r30, r20
     80a:	02 c0       	rjmp	.+4      	; 0x810 <buttonActivated+0x34>
     80c:	ee 0f       	add	r30, r30
     80e:	ff 1f       	adc	r31, r31
     810:	3a 95       	dec	r19
     812:	e2 f7       	brpl	.-8      	; 0x80c <buttonActivated+0x30>
     814:	9f 01       	movw	r18, r30

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
     816:	26 23       	and	r18, r22
     818:	69 f0       	breq	.+26     	; 0x834 <buttonActivated+0x58>
		return buttons[bn].polarity;
     81a:	fc 01       	movw	r30, r24
     81c:	ee 0f       	add	r30, r30
     81e:	ff 1f       	adc	r31, r31
     820:	ee 0f       	add	r30, r30
     822:	ff 1f       	adc	r31, r31
     824:	e0 50       	subi	r30, 0x00	; 0
     826:	f0 4e       	sbci	r31, 0xE0	; 224
     828:	81 e0       	ldi	r24, 0x01	; 1
     82a:	93 81       	ldd	r25, Z+3	; 0x03
     82c:	91 11       	cpse	r25, r1
     82e:	0d c0       	rjmp	.+26     	; 0x84a <buttonActivated+0x6e>
     830:	80 e0       	ldi	r24, 0x00	; 0
     832:	08 95       	ret
	}
	else {
		return !buttons[bn].polarity;
     834:	fc 01       	movw	r30, r24
     836:	ee 0f       	add	r30, r30
     838:	ff 1f       	adc	r31, r31
     83a:	ee 0f       	add	r30, r30
     83c:	ff 1f       	adc	r31, r31
     83e:	e0 50       	subi	r30, 0x00	; 0
     840:	f0 4e       	sbci	r31, 0xE0	; 224
     842:	81 e0       	ldi	r24, 0x01	; 1
     844:	93 81       	ldd	r25, Z+3	; 0x03
     846:	91 11       	cpse	r25, r1
     848:	80 e0       	ldi	r24, 0x00	; 0
	}	
     84a:	08 95       	ret

0000084c <keyboardiOSInit>:

// Local pointer to the current controller configuration.
static struct ControllerConfiguration *my_cc;

void keyboardiOSInit(struct ControllerConfiguration *cc) {
	my_cc = cc;
     84c:	80 93 3f 2a 	sts	0x2A3F, r24
     850:	90 93 40 2a 	sts	0x2A40, r25
    BluetoothKeyboardMode();
     854:	0c 94 b2 20 	jmp	0x4164	; 0x4164 <BluetoothKeyboardMode>

00000858 <keyboardiOSButtonHandler>:
}

void keyboardiOSButtonHandler(enum ButtonName name, enum ButtonState state) {
     858:	cf 93       	push	r28
	char key;
	unsigned char i;
	
	// Get the ASCII character to press:
	if (state == BUTTON_PRESSED) {
     85a:	61 30       	cpi	r22, 0x01	; 1
     85c:	91 f4       	brne	.+36     	; 0x882 <keyboardiOSButtonHandler+0x2a>
		key = my_cc->button_configs[name].button_down.scan_code;
     85e:	e0 91 3f 2a 	lds	r30, 0x2A3F
     862:	f0 91 40 2a 	lds	r31, 0x2A40
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	9c 01       	movw	r18, r24
     86a:	22 0f       	add	r18, r18
     86c:	33 1f       	adc	r19, r19
     86e:	22 0f       	add	r18, r18
     870:	33 1f       	adc	r19, r19
     872:	22 0f       	add	r18, r18
     874:	33 1f       	adc	r19, r19
     876:	82 0f       	add	r24, r18
     878:	93 1f       	adc	r25, r19
     87a:	e8 0f       	add	r30, r24
     87c:	f9 1f       	adc	r31, r25
     87e:	c6 81       	ldd	r28, Z+6	; 0x06
     880:	11 c0       	rjmp	.+34     	; 0x8a4 <keyboardiOSButtonHandler+0x4c>
	}
	else {
		key = my_cc->button_configs[name].button_up.scan_code;
     882:	e0 91 3f 2a 	lds	r30, 0x2A3F
     886:	f0 91 40 2a 	lds	r31, 0x2A40
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	9c 01       	movw	r18, r24
     88e:	22 0f       	add	r18, r18
     890:	33 1f       	adc	r19, r19
     892:	22 0f       	add	r18, r18
     894:	33 1f       	adc	r19, r19
     896:	22 0f       	add	r18, r18
     898:	33 1f       	adc	r19, r19
     89a:	82 0f       	add	r24, r18
     89c:	93 1f       	adc	r25, r19
     89e:	e8 0f       	add	r30, r24
     8a0:	f9 1f       	adc	r31, r25
     8a2:	c4 81       	ldd	r28, Z+4	; 0x04
	}
	
	if (key != 0) {
     8a4:	cc 23       	and	r28, r28
     8a6:	a9 f1       	breq	.+106    	; 0x912 <keyboardiOSButtonHandler+0xba>
		sendDBGChar(key);
     8a8:	8c 2f       	mov	r24, r28
     8aa:	0e 94 92 10 	call	0x2124	; 0x2124 <sendDBGChar>
			sendBTChar(0);
		}
		
		#else
		// Send the identifier:
		sendBTString("BC:KR=A1,01,00,");
     8ae:	8d e6       	ldi	r24, 0x6D	; 109
     8b0:	90 e2       	ldi	r25, 0x20	; 32
     8b2:	0e 94 0f 20 	call	0x401e	; 0x401e <sendBTString>
		
		// Send the modifiers:
		sendBTHexPair(0);
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <sendBTHexPair>
		
		// send the scan code as the first code
		sendBTChar(',');
     8bc:	8c e2       	ldi	r24, 0x2C	; 44
     8be:	0e 94 02 20 	call	0x4004	; 0x4004 <sendBTChar>
		sendBTHexPair(key);
     8c2:	8c 2f       	mov	r24, r28
     8c4:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <sendBTHexPair>
     8c8:	c5 e0       	ldi	r28, 0x05	; 5
		
		// Pad the other scan codes with 0
		for (i=0;i < 5; i++) {
			sendBTChar(',');
     8ca:	8c e2       	ldi	r24, 0x2C	; 44
     8cc:	0e 94 02 20 	call	0x4004	; 0x4004 <sendBTChar>
			sendBTHexPair(0);
     8d0:	80 e0       	ldi	r24, 0x00	; 0
     8d2:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <sendBTHexPair>
     8d6:	c1 50       	subi	r28, 0x01	; 1
		// send the scan code as the first code
		sendBTChar(',');
		sendBTHexPair(key);
		
		// Pad the other scan codes with 0
		for (i=0;i < 5; i++) {
     8d8:	c1 f7       	brne	.-16     	; 0x8ca <keyboardiOSButtonHandler+0x72>
			sendBTChar(',');
			sendBTHexPair(0);
		}
		sendBTChar('\r'); 
     8da:	8d e0       	ldi	r24, 0x0D	; 13
     8dc:	0e 94 02 20 	call	0x4004	; 0x4004 <sendBTChar>
		sendBTChar('\n');
     8e0:	8a e0       	ldi	r24, 0x0A	; 10
     8e2:	0e 94 02 20 	call	0x4004	; 0x4004 <sendBTChar>
		
		// Now send the no-scan-code so the button released is recognized
		// Send the identifier:
		sendBTString("BC:KR=A1,01,00,");
     8e6:	8d e6       	ldi	r24, 0x6D	; 109
     8e8:	90 e2       	ldi	r25, 0x20	; 32
     8ea:	0e 94 0f 20 	call	0x401e	; 0x401e <sendBTString>
		
		// Send the modifiers:
		sendBTHexPair(0);
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <sendBTHexPair>
     8f4:	c6 e0       	ldi	r28, 0x06	; 6
		
		// Pad the scan codes with 0s
		for (i=0;i < 6; i++) {
			sendBTChar(',');
     8f6:	8c e2       	ldi	r24, 0x2C	; 44
     8f8:	0e 94 02 20 	call	0x4004	; 0x4004 <sendBTChar>
			sendBTHexPair(0);
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <sendBTHexPair>
     902:	c1 50       	subi	r28, 0x01	; 1
		
		// Send the modifiers:
		sendBTHexPair(0);
		
		// Pad the scan codes with 0s
		for (i=0;i < 6; i++) {
     904:	c1 f7       	brne	.-16     	; 0x8f6 <keyboardiOSButtonHandler+0x9e>
			sendBTChar(',');
			sendBTHexPair(0);
		}
		sendBTChar('\r'); 
     906:	8d e0       	ldi	r24, 0x0D	; 13
     908:	0e 94 02 20 	call	0x4004	; 0x4004 <sendBTChar>
		sendBTChar('\n');
     90c:	8a e0       	ldi	r24, 0x0A	; 10
     90e:	0e 94 02 20 	call	0x4004	; 0x4004 <sendBTChar>
		#endif
	}
};
     912:	cf 91       	pop	r28
     914:	08 95       	ret

00000916 <initCB>:
	while (temp < count && addByteToCB(cb, src[temp])) {
		temp++;
	}
	
	return temp;
}
     916:	fc 01       	movw	r30, r24
     918:	60 83       	st	Z, r22
     91a:	71 83       	std	Z+1, r23	; 0x01
     91c:	45 83       	std	Z+5, r20	; 0x05
     91e:	12 82       	std	Z+2, r1	; 0x02
     920:	14 82       	std	Z+4, r1	; 0x04
     922:	82 81       	ldd	r24, Z+2	; 0x02
     924:	83 83       	std	Z+3, r24	; 0x03
     926:	08 95       	ret

00000928 <addByteToCB>:
     928:	fc 01       	movw	r30, r24
     92a:	9f b7       	in	r25, 0x3f	; 63
     92c:	f8 94       	cli
     92e:	24 81       	ldd	r18, Z+4	; 0x04
     930:	85 81       	ldd	r24, Z+5	; 0x05
     932:	28 17       	cp	r18, r24
     934:	90 f4       	brcc	.+36     	; 0x95a <addByteToCB+0x32>
     936:	82 81       	ldd	r24, Z+2	; 0x02
     938:	a0 81       	ld	r26, Z
     93a:	b1 81       	ldd	r27, Z+1	; 0x01
     93c:	a8 0f       	add	r26, r24
     93e:	b1 1d       	adc	r27, r1
     940:	6c 93       	st	X, r22
     942:	8f 5f       	subi	r24, 0xFF	; 255
     944:	82 83       	std	Z+2, r24	; 0x02
     946:	84 81       	ldd	r24, Z+4	; 0x04
     948:	8f 5f       	subi	r24, 0xFF	; 255
     94a:	84 83       	std	Z+4, r24	; 0x04
     94c:	22 81       	ldd	r18, Z+2	; 0x02
     94e:	85 81       	ldd	r24, Z+5	; 0x05
     950:	28 17       	cp	r18, r24
     952:	28 f0       	brcs	.+10     	; 0x95e <addByteToCB+0x36>
     954:	12 82       	std	Z+2, r1	; 0x02
     956:	81 e0       	ldi	r24, 0x01	; 1
     958:	03 c0       	rjmp	.+6      	; 0x960 <addByteToCB+0x38>
     95a:	80 e0       	ldi	r24, 0x00	; 0
     95c:	01 c0       	rjmp	.+2      	; 0x960 <addByteToCB+0x38>
     95e:	81 e0       	ldi	r24, 0x01	; 1
     960:	9f bf       	out	0x3f, r25	; 63
     962:	08 95       	ret

00000964 <readByteFromCB>:

bool readByteFromCB(struct CircularBuffer* cb, uint8_t *dst) {
     964:	fc 01       	movw	r30, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     966:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
     968:	f8 94       	cli
	bool success = false;
	// Save the interrupt state and disable interrupts:
	irqflags_t flags = cpu_irq_save();

	// Is there available data?
	if (cb->count > 0) {
     96a:	84 81       	ldd	r24, Z+4	; 0x04
     96c:	88 23       	and	r24, r24
     96e:	a1 f0       	breq	.+40     	; 0x998 <readByteFromCB+0x34>
		// Remove the data from the back and update counters:
		*dst = cb->buffer[cb->back++];
     970:	83 81       	ldd	r24, Z+3	; 0x03
     972:	a0 81       	ld	r26, Z
     974:	b1 81       	ldd	r27, Z+1	; 0x01
     976:	a8 0f       	add	r26, r24
     978:	b1 1d       	adc	r27, r1
     97a:	2c 91       	ld	r18, X
     97c:	db 01       	movw	r26, r22
     97e:	2c 93       	st	X, r18
     980:	8f 5f       	subi	r24, 0xFF	; 255
     982:	83 83       	std	Z+3, r24	; 0x03
		cb->count--;
     984:	84 81       	ldd	r24, Z+4	; 0x04
     986:	81 50       	subi	r24, 0x01	; 1
     988:	84 83       	std	Z+4, r24	; 0x04
		
		// Has the back value overflown?
		if (cb->back >= cb->size) {
     98a:	23 81       	ldd	r18, Z+3	; 0x03
     98c:	85 81       	ldd	r24, Z+5	; 0x05
     98e:	28 17       	cp	r18, r24
     990:	28 f0       	brcs	.+10     	; 0x99c <readByteFromCB+0x38>
			cb->back = 0;
     992:	13 82       	std	Z+3, r1	; 0x03
		}
		
		// Hooray!
		success = true;
     994:	81 e0       	ldi	r24, 0x01	; 1
     996:	03 c0       	rjmp	.+6      	; 0x99e <readByteFromCB+0x3a>
	
	return temp;
}

bool readByteFromCB(struct CircularBuffer* cb, uint8_t *dst) {
	bool success = false;
     998:	80 e0       	ldi	r24, 0x00	; 0
     99a:	01 c0       	rjmp	.+2      	; 0x99e <readByteFromCB+0x3a>
		if (cb->back >= cb->size) {
			cb->back = 0;
		}
		
		// Hooray!
		success = true;
     99c:	81 e0       	ldi	r24, 0x01	; 1
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     99e:	9f bf       	out	0x3f, r25	; 63

	// Restore the interrupt state:
	cpu_irq_restore(flags);
	
	return success;
}
     9a0:	08 95       	ret

000009a2 <readFromCB>:

uint8_t readFromCB(struct CircularBuffer* cb, uint8_t* dst, uint8_t max_count) {
     9a2:	ef 92       	push	r14
     9a4:	ff 92       	push	r15
     9a6:	0f 93       	push	r16
     9a8:	1f 93       	push	r17
     9aa:	cf 93       	push	r28
     9ac:	df 93       	push	r29
     9ae:	8c 01       	movw	r16, r24
     9b0:	e4 2e       	mov	r14, r20
	uint8_t temp = 0;
		
	while (temp < max_count && readByteFromCB(cb, dst + temp)) {
     9b2:	44 23       	and	r20, r20
     9b4:	71 f0       	breq	.+28     	; 0x9d2 <readFromCB+0x30>
     9b6:	c6 2f       	mov	r28, r22
     9b8:	d7 2f       	mov	r29, r23
	
	return success;
}

uint8_t readFromCB(struct CircularBuffer* cb, uint8_t* dst, uint8_t max_count) {
	uint8_t temp = 0;
     9ba:	f1 2c       	mov	r15, r1
     9bc:	04 c0       	rjmp	.+8      	; 0x9c6 <readFromCB+0x24>
		
	while (temp < max_count && readByteFromCB(cb, dst + temp)) {
		temp++;
     9be:	f3 94       	inc	r15
     9c0:	21 96       	adiw	r28, 0x01	; 1
}

uint8_t readFromCB(struct CircularBuffer* cb, uint8_t* dst, uint8_t max_count) {
	uint8_t temp = 0;
		
	while (temp < max_count && readByteFromCB(cb, dst + temp)) {
     9c2:	fe 14       	cp	r15, r14
     9c4:	39 f0       	breq	.+14     	; 0x9d4 <readFromCB+0x32>
     9c6:	be 01       	movw	r22, r28
     9c8:	c8 01       	movw	r24, r16
     9ca:	cc df       	rcall	.-104    	; 0x964 <readByteFromCB>
     9cc:	81 11       	cpse	r24, r1
     9ce:	f7 cf       	rjmp	.-18     	; 0x9be <readFromCB+0x1c>
     9d0:	01 c0       	rjmp	.+2      	; 0x9d4 <readFromCB+0x32>
	
	return success;
}

uint8_t readFromCB(struct CircularBuffer* cb, uint8_t* dst, uint8_t max_count) {
	uint8_t temp = 0;
     9d2:	f1 2c       	mov	r15, r1
	while (temp < max_count && readByteFromCB(cb, dst + temp)) {
		temp++;
	}		
		
	return temp;
}
     9d4:	8f 2d       	mov	r24, r15
     9d6:	df 91       	pop	r29
     9d8:	cf 91       	pop	r28
     9da:	1f 91       	pop	r17
     9dc:	0f 91       	pop	r16
     9de:	ff 90       	pop	r15
     9e0:	ef 90       	pop	r14
     9e2:	08 95       	ret

000009e4 <readStringFromCB>:

bool readStringFromCB(struct CircularBuffer *cb, char* dst, uint8_t max_count) {
     9e4:	1f 93       	push	r17
     9e6:	cf 93       	push	r28
     9e8:	df 93       	push	r29
     9ea:	dc 01       	movw	r26, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     9ec:	1f b7       	in	r17, 0x3f	; 63
	cpu_irq_disable();
     9ee:	f8 94       	cli
	bool found = false;
	// Save the interrupt state and disable interrupts:
	irqflags_t flags = cpu_irq_save();
	
	// Start at the back for the circular buffer:
	idx = cb->back;
     9f0:	13 96       	adiw	r26, 0x03	; 3
     9f2:	8c 91       	ld	r24, X
     9f4:	13 97       	sbiw	r26, 0x03	; 3
	
	// Pick the minimum search area:
	count = MIN(cb->count, max_count);
     9f6:	14 96       	adiw	r26, 0x04	; 4
     9f8:	9c 91       	ld	r25, X
     9fa:	14 97       	sbiw	r26, 0x04	; 4
     9fc:	94 17       	cp	r25, r20
     9fe:	20 f4       	brcc	.+8      	; 0xa08 <readStringFromCB+0x24>
     a00:	14 96       	adiw	r26, 0x04	; 4
     a02:	cc 91       	ld	r28, X
     a04:	14 97       	sbiw	r26, 0x04	; 4
     a06:	01 c0       	rjmp	.+2      	; 0xa0a <readStringFromCB+0x26>
     a08:	c4 2f       	mov	r28, r20
	
	// Search for the first CB_STRING_TERMINATOR:
	for (temp = 0; temp < count; temp++) {
     a0a:	cc 23       	and	r28, r28
     a0c:	e9 f0       	breq	.+58     	; 0xa48 <readStringFromCB+0x64>
		// Has it been found?
		if (cb->buffer[idx] == CB_STRING_TERMINATOR) {
     a0e:	2d 91       	ld	r18, X+
     a10:	3c 91       	ld	r19, X
     a12:	11 97       	sbiw	r26, 0x01	; 1
     a14:	f9 01       	movw	r30, r18
     a16:	e8 0f       	add	r30, r24
     a18:	f1 1d       	adc	r31, r1
     a1a:	90 81       	ld	r25, Z
     a1c:	99 23       	and	r25, r25
     a1e:	b9 f0       	breq	.+46     	; 0xa4e <readStringFromCB+0x6a>
			break;
		}
		
		// Increment:
		idx++;
		if (idx >= cb->size) {
     a20:	15 96       	adiw	r26, 0x05	; 5
     a22:	dc 91       	ld	r29, X
     a24:	15 97       	sbiw	r26, 0x05	; 5
	
	// Pick the minimum search area:
	count = MIN(cb->count, max_count);
	
	// Search for the first CB_STRING_TERMINATOR:
	for (temp = 0; temp < count; temp++) {
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	06 c0       	rjmp	.+12     	; 0xa36 <readStringFromCB+0x52>
		// Has it been found?
		if (cb->buffer[idx] == CB_STRING_TERMINATOR) {
     a2a:	f9 01       	movw	r30, r18
     a2c:	e8 0f       	add	r30, r24
     a2e:	f1 1d       	adc	r31, r1
     a30:	50 81       	ld	r21, Z
     a32:	55 23       	and	r21, r21
     a34:	79 f0       	breq	.+30     	; 0xa54 <readStringFromCB+0x70>
			found = true;
			break;
		}
		
		// Increment:
		idx++;
     a36:	8f 5f       	subi	r24, 0xFF	; 255
		if (idx >= cb->size) {
     a38:	8d 17       	cp	r24, r29
     a3a:	08 f0       	brcs	.+2      	; 0xa3e <readStringFromCB+0x5a>
			idx = 0;
     a3c:	80 e0       	ldi	r24, 0x00	; 0
	
	// Pick the minimum search area:
	count = MIN(cb->count, max_count);
	
	// Search for the first CB_STRING_TERMINATOR:
	for (temp = 0; temp < count; temp++) {
     a3e:	9f 5f       	subi	r25, 0xFF	; 255
     a40:	9c 13       	cpse	r25, r28
     a42:	f3 cf       	rjmp	.-26     	; 0xa2a <readStringFromCB+0x46>
	return temp;
}

bool readStringFromCB(struct CircularBuffer *cb, char* dst, uint8_t max_count) {
	uint8_t temp, idx, count;
	bool found = false;
     a44:	c0 e0       	ldi	r28, 0x00	; 0
     a46:	07 c0       	rjmp	.+14     	; 0xa56 <readStringFromCB+0x72>
	
	// Pick the minimum search area:
	count = MIN(cb->count, max_count);
	
	// Search for the first CB_STRING_TERMINATOR:
	for (temp = 0; temp < count; temp++) {
     a48:	90 e0       	ldi	r25, 0x00	; 0
	return temp;
}

bool readStringFromCB(struct CircularBuffer *cb, char* dst, uint8_t max_count) {
	uint8_t temp, idx, count;
	bool found = false;
     a4a:	c0 e0       	ldi	r28, 0x00	; 0
     a4c:	04 c0       	rjmp	.+8      	; 0xa56 <readStringFromCB+0x72>
	
	// Pick the minimum search area:
	count = MIN(cb->count, max_count);
	
	// Search for the first CB_STRING_TERMINATOR:
	for (temp = 0; temp < count; temp++) {
     a4e:	90 e0       	ldi	r25, 0x00	; 0
		// Has it been found?
		if (cb->buffer[idx] == CB_STRING_TERMINATOR) {
			// Then stop searching:
			found = true;
     a50:	c1 e0       	ldi	r28, 0x01	; 1
     a52:	01 c0       	rjmp	.+2      	; 0xa56 <readStringFromCB+0x72>
     a54:	c1 e0       	ldi	r28, 0x01	; 1
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     a56:	1f bf       	out	0x3f, r17	; 63

	// Restore the interrupt state:
	cpu_irq_restore(flags);
	
	// Make sure there is room for the terminator:
	found &= (temp + 1) < max_count;
     a58:	e9 2f       	mov	r30, r25
     a5a:	f0 e0       	ldi	r31, 0x00	; 0
     a5c:	31 96       	adiw	r30, 0x01	; 1
     a5e:	24 2f       	mov	r18, r20
     a60:	30 e0       	ldi	r19, 0x00	; 0
     a62:	81 e0       	ldi	r24, 0x01	; 1
     a64:	e2 17       	cp	r30, r18
     a66:	f3 07       	cpc	r31, r19
     a68:	0c f0       	brlt	.+2      	; 0xa6c <readStringFromCB+0x88>
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	c8 23       	and	r28, r24
	
	// Read the line:
	if (found) {
     a6e:	21 f0       	breq	.+8      	; 0xa78 <readStringFromCB+0x94>
		readFromCB(cb, dst, temp + 1);
     a70:	49 2f       	mov	r20, r25
     a72:	4f 5f       	subi	r20, 0xFF	; 255
     a74:	cd 01       	movw	r24, r26
     a76:	95 df       	rcall	.-214    	; 0x9a2 <readFromCB>
	}
	
	return found;
}
     a78:	8c 2f       	mov	r24, r28
     a7a:	df 91       	pop	r29
     a7c:	cf 91       	pop	r28
     a7e:	1f 91       	pop	r17
     a80:	08 95       	ret

00000a82 <byteToASCIIHex>:

// Local "pointers" for the working sets:
static uint8_t ghAddr;
static uint8_t ccAddr;

void byteToASCIIHex(const uint8_t b, char* high, char* low) {
     a82:	fb 01       	movw	r30, r22
     a84:	da 01       	movw	r26, r20
	*low = b & 0x0F;
     a86:	98 2f       	mov	r25, r24
     a88:	9f 70       	andi	r25, 0x0F	; 15
     a8a:	9c 93       	st	X, r25
	*high = (b>>4) & 0x0F;
     a8c:	82 95       	swap	r24
     a8e:	8f 70       	andi	r24, 0x0F	; 15
     a90:	80 83       	st	Z, r24
	
	if (*low > 9) {
     a92:	8c 91       	ld	r24, X
     a94:	8a 30       	cpi	r24, 0x0A	; 10
     a96:	1c f0       	brlt	.+6      	; 0xa9e <byteToASCIIHex+0x1c>
		*low = 'a' + *low - 0x0A;
     a98:	89 5a       	subi	r24, 0xA9	; 169
     a9a:	8c 93       	st	X, r24
     a9c:	02 c0       	rjmp	.+4      	; 0xaa2 <byteToASCIIHex+0x20>
	}
	else {
		*low = '0' + *low;
     a9e:	80 5d       	subi	r24, 0xD0	; 208
     aa0:	8c 93       	st	X, r24
	}

	if (*high > 9) {
     aa2:	80 81       	ld	r24, Z
     aa4:	8a 30       	cpi	r24, 0x0A	; 10
     aa6:	1c f0       	brlt	.+6      	; 0xaae <byteToASCIIHex+0x2c>
		*high = 'a' + *high - 0x0A;
     aa8:	89 5a       	subi	r24, 0xA9	; 169
     aaa:	80 83       	st	Z, r24
     aac:	08 95       	ret
	}
	else {
		*high = '0' + *high;
     aae:	80 5d       	subi	r24, 0xD0	; 208
     ab0:	80 83       	st	Z, r24
     ab2:	08 95       	ret

00000ab4 <ASCIIHexToByte>:

uint8_t ASCIIHexToByte(char high, char low) {
	uint8_t temp;
	
	// Make high and low lower case:
	high |= 0x20;
     ab4:	80 62       	ori	r24, 0x20	; 32
	low  |= 0x20;
     ab6:	60 62       	ori	r22, 0x20	; 32
	
	if (high >= 'a') {
     ab8:	81 36       	cpi	r24, 0x61	; 97
     aba:	14 f0       	brlt	.+4      	; 0xac0 <ASCIIHexToByte+0xc>
		temp = 0x0A + high - 'a';
     abc:	87 55       	subi	r24, 0x57	; 87
     abe:	01 c0       	rjmp	.+2      	; 0xac2 <ASCIIHexToByte+0xe>
	}
	else {
		temp = high - '0';
     ac0:	80 53       	subi	r24, 0x30	; 48
	}
	
	temp <<= 4;
     ac2:	82 95       	swap	r24
     ac4:	80 7f       	andi	r24, 0xF0	; 240
	
	if (low >= 'a') {
     ac6:	61 36       	cpi	r22, 0x61	; 97
     ac8:	1c f0       	brlt	.+6      	; 0xad0 <ASCIIHexToByte+0x1c>
		temp += 0x0A + low - 'a';
     aca:	67 55       	subi	r22, 0x57	; 87
     acc:	86 0f       	add	r24, r22
     ace:	08 95       	ret
	}
	else {
		temp += low - '0';
     ad0:	60 53       	subi	r22, 0x30	; 48
     ad2:	86 0f       	add	r24, r22
	}
	
	return temp;
}
     ad4:	08 95       	ret

00000ad6 <sendCommOK>:
		}
	}
}

void sendCommOK(void) {
	sendUSBString("OK", true);
     ad6:	61 e0       	ldi	r22, 0x01	; 1
     ad8:	8d e7       	ldi	r24, 0x7D	; 125
     ada:	90 e2       	ldi	r25, 0x20	; 32
     adc:	0c 94 29 14 	jmp	0x2852	; 0x2852 <sendUSBString>

00000ae0 <commRS>:
}

void commRS(void)
{	
	// Send an OK:
	sendCommOK();
     ae0:	fa df       	rcall	.-12     	; 0xad6 <sendCommOK>
     ae2:	80 e0       	ldi	r24, 0x00	; 0
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	01 96       	adiw	r24, 0x01	; 1
     ae8:	85 35       	cpi	r24, 0x55	; 85
     aea:	20 ed       	ldi	r18, 0xD0	; 208
     aec:	92 07       	cpc	r25, r18
     aee:	d9 f7       	brne	.-10     	; 0xae6 <commRS+0x6>
     af0:	61 e0       	ldi	r22, 0x01	; 1
     af2:	89 e7       	ldi	r24, 0x79	; 121
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <ccp_write_io>
     afa:	ff cf       	rjmp	.-2      	; 0xafa <commRS+0x1a>

00000afc <commSG>:
void commSG(char* args) {
	uint8_t i;
	char high, low;
	
	// Read the global header:
	writeGlobalHeader(&ghTemp);
     afc:	81 e4       	ldi	r24, 0x41	; 65
     afe:	9a e2       	ldi	r25, 0x2A	; 42
     b00:	a9 d1       	rcall	.+850    	; 0xe54 <writeGlobalHeader>
	
	// Send an OK:
	sendCommOK();
     b02:	e9 df       	rcall	.-46     	; 0xad6 <sendCommOK>
	
	// Reset the working copy address:
	ghAddr = 0;
     b04:	10 92 c8 2a 	sts	0x2AC8, r1
     b08:	08 95       	ret

00000b0a <commRG>:

void sendCommNO(void) {
	sendUSBString("NO", true);
}

void commRG(char* args) {
     b0a:	ef 92       	push	r14
     b0c:	ff 92       	push	r15
     b0e:	0f 93       	push	r16
     b10:	1f 93       	push	r17
     b12:	cf 93       	push	r28
     b14:	df 93       	push	r29
     b16:	00 d0       	rcall	.+0      	; 0xb18 <commRG+0xe>
     b18:	cd b7       	in	r28, 0x3d	; 61
     b1a:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;
	char high, low;
	
	// Read the global header:
	readGlobalHeader(&ghTemp);
     b1c:	81 e4       	ldi	r24, 0x41	; 65
     b1e:	9a e2       	ldi	r25, 0x2A	; 42
     b20:	92 d1       	rcall	.+804    	; 0xe46 <readGlobalHeader>
     b22:	01 e4       	ldi	r16, 0x41	; 65
     b24:	1a e2       	ldi	r17, 0x2A	; 42

void sendCommNO(void) {
	sendUSBString("NO", true);
}

void commRG(char* args) {
     b26:	0f 2e       	mov	r0, r31
     b28:	f8 ec       	ldi	r31, 0xC8	; 200
     b2a:	ef 2e       	mov	r14, r31
     b2c:	fa e2       	ldi	r31, 0x2A	; 42
     b2e:	ff 2e       	mov	r15, r31
     b30:	f0 2d       	mov	r31, r0
	// Read the global header:
	readGlobalHeader(&ghTemp);
	
	// Write each ASCII byte:
	for (i = 0; i < sizeof(struct GlobalHeader); i++) {
		byteToASCIIHex(((uint8_t*)&ghTemp)[i], &high, &low);
     b32:	ae 01       	movw	r20, r28
     b34:	4e 5f       	subi	r20, 0xFE	; 254
     b36:	5f 4f       	sbci	r21, 0xFF	; 255
     b38:	be 01       	movw	r22, r28
     b3a:	6f 5f       	subi	r22, 0xFF	; 255
     b3c:	7f 4f       	sbci	r23, 0xFF	; 255
     b3e:	f8 01       	movw	r30, r16
     b40:	81 91       	ld	r24, Z+
     b42:	8f 01       	movw	r16, r30
     b44:	9e df       	rcall	.-196    	; 0xa82 <byteToASCIIHex>
		sendUSBChar(high);
     b46:	89 81       	ldd	r24, Y+1	; 0x01
     b48:	0e 94 18 14 	call	0x2830	; 0x2830 <sendUSBChar>
		sendUSBChar(low);
     b4c:	8a 81       	ldd	r24, Y+2	; 0x02
     b4e:	0e 94 18 14 	call	0x2830	; 0x2830 <sendUSBChar>
	
	// Read the global header:
	readGlobalHeader(&ghTemp);
	
	// Write each ASCII byte:
	for (i = 0; i < sizeof(struct GlobalHeader); i++) {
     b52:	0e 15       	cp	r16, r14
     b54:	1f 05       	cpc	r17, r15
     b56:	69 f7       	brne	.-38     	; 0xb32 <commRG+0x28>
		sendUSBChar(high);
		sendUSBChar(low);
	}
	
	// Add the terminator:
	sendUSBChar('\0');
     b58:	80 e0       	ldi	r24, 0x00	; 0
     b5a:	0e 94 18 14 	call	0x2830	; 0x2830 <sendUSBChar>
	
	// Send an OK:
	sendCommOK();
     b5e:	bb df       	rcall	.-138    	; 0xad6 <sendCommOK>
	
	// Reset the working copy address:
	ghAddr = 0;
     b60:	10 92 c8 2a 	sts	0x2AC8, r1
}
     b64:	0f 90       	pop	r0
     b66:	0f 90       	pop	r0
     b68:	df 91       	pop	r29
     b6a:	cf 91       	pop	r28
     b6c:	1f 91       	pop	r17
     b6e:	0f 91       	pop	r16
     b70:	ff 90       	pop	r15
     b72:	ef 90       	pop	r14
     b74:	08 95       	ret

00000b76 <sendCommNO>:
void sendCommOK(void) {
	sendUSBString("OK", true);
}

void sendCommNO(void) {
	sendUSBString("NO", true);
     b76:	61 e0       	ldi	r22, 0x01	; 1
     b78:	80 e8       	ldi	r24, 0x80	; 128
     b7a:	90 e2       	ldi	r25, 0x20	; 32
     b7c:	0c 94 29 14 	jmp	0x2852	; 0x2852 <sendUSBString>

00000b80 <commSC>:
	else {
		sendCommNO();
	}
}

void commSC(char* args) {
     b80:	fc 01       	movw	r30, r24
	uint8_t which;
	
	// Check for the argument and terminator:
	if (args[0] == '\0' || args[1] == '\0' || args[2] != '\0') {
     b82:	80 81       	ld	r24, Z
     b84:	88 23       	and	r24, r24
     b86:	31 f0       	breq	.+12     	; 0xb94 <commSC+0x14>
     b88:	61 81       	ldd	r22, Z+1	; 0x01
     b8a:	66 23       	and	r22, r22
     b8c:	19 f0       	breq	.+6      	; 0xb94 <commSC+0x14>
     b8e:	92 81       	ldd	r25, Z+2	; 0x02
     b90:	99 23       	and	r25, r25
     b92:	09 f0       	breq	.+2      	; 0xb96 <commSC+0x16>
		sendCommNO();
		return;
     b94:	f0 cf       	rjmp	.-32     	; 0xb76 <sendCommNO>
	}
	
	// Get the argument:
	which = ASCIIHexToByte(args[0], args[1]);
     b96:	8e df       	rcall	.-228    	; 0xab4 <ASCIIHexToByte>
	
	// Write the controller configuration:
	writeControllerConfig(which, &ccTemp);
     b98:	69 ec       	ldi	r22, 0xC9	; 201
     b9a:	7a e2       	ldi	r23, 0x2A	; 42
     b9c:	6c d1       	rcall	.+728    	; 0xe76 <writeControllerConfig>

	// Send an OK:
	sendCommOK();
     b9e:	9b df       	rcall	.-202    	; 0xad6 <sendCommOK>

	// Reset the working copy address:
	ccAddr = 0;
     ba0:	10 92 74 2b 	sts	0x2B74, r1
     ba4:	08 95       	ret

00000ba6 <commWC>:
		// Send an OK:
		sendCommOK();
	}
}

void commWC(char* args) {
     ba6:	ff 92       	push	r15
     ba8:	0f 93       	push	r16
     baa:	1f 93       	push	r17
     bac:	cf 93       	push	r28
     bae:	df 93       	push	r29
     bb0:	ec 01       	movw	r28, r24
	uint8_t length;
	uint8_t temp = 0;
	
	// How much data is being written?
	length = strlen(args);
     bb2:	e8 2f       	mov	r30, r24
     bb4:	fd 2f       	mov	r31, r29
     bb6:	df 01       	movw	r26, r30
     bb8:	0d 90       	ld	r0, X+
     bba:	00 20       	and	r0, r0
     bbc:	e9 f7       	brne	.-6      	; 0xbb8 <commWC+0x12>
     bbe:	11 97       	sbiw	r26, 0x01	; 1
     bc0:	ae 1b       	sub	r26, r30
     bc2:	bf 0b       	sbc	r27, r31
     bc4:	fa 2e       	mov	r15, r26
	
	// Length must be an even number since it represents ASCII coded hex.
	if ((length & 1) == 1) {
     bc6:	a0 fd       	sbrc	r26, 0
     bc8:	07 c0       	rjmp	.+14     	; 0xbd8 <commWC+0x32>
		sendCommNO();
		return;
	}
	
	// Translate the ASCII to hex and write it to the working copy as long as there is room:
	while (temp < length && ccAddr < sizeof(struct ControllerConfiguration)) {
     bca:	aa 23       	and	r26, r26
     bcc:	01 f1       	breq	.+64     	; 0xc0e <commWC+0x68>
     bce:	10 91 74 2b 	lds	r17, 0x2B74
     bd2:	1b 3a       	cpi	r17, 0xAB	; 171
     bd4:	18 f0       	brcs	.+6      	; 0xbdc <commWC+0x36>
     bd6:	1d c0       	rjmp	.+58     	; 0xc12 <commWC+0x6c>
	// How much data is being written?
	length = strlen(args);
	
	// Length must be an even number since it represents ASCII coded hex.
	if ((length & 1) == 1) {
		sendCommNO();
     bd8:	ce df       	rcall	.-100    	; 0xb76 <sendCommNO>
		return;
     bda:	1c c0       	rjmp	.+56     	; 0xc14 <commWC+0x6e>
	}
	
	// Translate the ASCII to hex and write it to the working copy as long as there is room:
	while (temp < length && ccAddr < sizeof(struct ControllerConfiguration)) {
     bdc:	00 e0       	ldi	r16, 0x00	; 0
		((uint8_t*)&ccTemp)[ccAddr++] = ASCIIHexToByte(args[temp], args[temp+1]);
     bde:	fe 01       	movw	r30, r28
     be0:	e0 0f       	add	r30, r16
     be2:	f1 1d       	adc	r31, r1
     be4:	61 81       	ldd	r22, Z+1	; 0x01
     be6:	80 81       	ld	r24, Z
     be8:	65 df       	rcall	.-310    	; 0xab4 <ASCIIHexToByte>
     bea:	e1 2f       	mov	r30, r17
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	e7 53       	subi	r30, 0x37	; 55
     bf0:	f5 4d       	sbci	r31, 0xD5	; 213
     bf2:	80 83       	st	Z, r24
     bf4:	1f 5f       	subi	r17, 0xFF	; 255
		temp += 2;
     bf6:	0e 5f       	subi	r16, 0xFE	; 254
		sendCommNO();
		return;
	}
	
	// Translate the ASCII to hex and write it to the working copy as long as there is room:
	while (temp < length && ccAddr < sizeof(struct ControllerConfiguration)) {
     bf8:	0f 15       	cp	r16, r15
     bfa:	18 f0       	brcs	.+6      	; 0xc02 <commWC+0x5c>
     bfc:	10 93 74 2b 	sts	0x2B74, r17
     c00:	04 c0       	rjmp	.+8      	; 0xc0a <commWC+0x64>
     c02:	1b 3a       	cpi	r17, 0xAB	; 171
     c04:	61 f7       	brne	.-40     	; 0xbde <commWC+0x38>
     c06:	10 93 74 2b 	sts	0x2B74, r17
		((uint8_t*)&ccTemp)[ccAddr++] = ASCIIHexToByte(args[temp], args[temp+1]);
		temp += 2;
	}
	
	// Did the copy complete?
	if (temp == length) {
     c0a:	f0 12       	cpse	r15, r16
     c0c:	02 c0       	rjmp	.+4      	; 0xc12 <commWC+0x6c>
		sendCommOK();
     c0e:	63 df       	rcall	.-314    	; 0xad6 <sendCommOK>
     c10:	01 c0       	rjmp	.+2      	; 0xc14 <commWC+0x6e>
	}
	else {
		sendCommNO();
     c12:	b1 df       	rcall	.-158    	; 0xb76 <sendCommNO>
	}
}
     c14:	df 91       	pop	r29
     c16:	cf 91       	pop	r28
     c18:	1f 91       	pop	r17
     c1a:	0f 91       	pop	r16
     c1c:	ff 90       	pop	r15
     c1e:	08 95       	ret

00000c20 <commAC>:
	
	// Reset the working copy address:
	ccAddr = 0;
}

void commAC(char* args) {
     c20:	fc 01       	movw	r30, r24
	// Check for the argument:
	if (args[0] == '\0' || args[1] == '\0' || args[2] != '\0') {
     c22:	80 81       	ld	r24, Z
     c24:	88 23       	and	r24, r24
     c26:	31 f0       	breq	.+12     	; 0xc34 <commAC+0x14>
     c28:	61 81       	ldd	r22, Z+1	; 0x01
     c2a:	66 23       	and	r22, r22
     c2c:	19 f0       	breq	.+6      	; 0xc34 <commAC+0x14>
     c2e:	92 81       	ldd	r25, Z+2	; 0x02
     c30:	99 23       	and	r25, r25
     c32:	09 f0       	breq	.+2      	; 0xc36 <commAC+0x16>
		sendCommNO();
     c34:	a0 cf       	rjmp	.-192    	; 0xb76 <sendCommNO>
	}
	else {
		// Set the new address:
		ccAddr = ASCIIHexToByte(args[0], args[1]);
     c36:	3e df       	rcall	.-388    	; 0xab4 <ASCIIHexToByte>
     c38:	80 93 74 2b 	sts	0x2B74, r24
	
		// Send an OK:
		sendCommOK();
     c3c:	4c cf       	rjmp	.-360    	; 0xad6 <sendCommOK>

00000c3e <commRC>:
	
	// Reset the working copy address:
	ghAddr = 0;
}

void commRC(char* args) {
     c3e:	ef 92       	push	r14
     c40:	ff 92       	push	r15
     c42:	0f 93       	push	r16
     c44:	1f 93       	push	r17
     c46:	cf 93       	push	r28
     c48:	df 93       	push	r29
     c4a:	00 d0       	rcall	.+0      	; 0xc4c <commRC+0xe>
     c4c:	cd b7       	in	r28, 0x3d	; 61
     c4e:	de b7       	in	r29, 0x3e	; 62
     c50:	fc 01       	movw	r30, r24
	uint8_t i, which;
	char high, low;
	
	// Check for the argument and terminator:
	if (args[0] == '\0' || args[1] == '\0' || args[2] != '\0') {
     c52:	80 81       	ld	r24, Z
     c54:	88 23       	and	r24, r24
     c56:	31 f0       	breq	.+12     	; 0xc64 <commRC+0x26>
     c58:	61 81       	ldd	r22, Z+1	; 0x01
     c5a:	66 23       	and	r22, r22
     c5c:	19 f0       	breq	.+6      	; 0xc64 <commRC+0x26>
     c5e:	92 81       	ldd	r25, Z+2	; 0x02
     c60:	99 23       	and	r25, r25
     c62:	11 f0       	breq	.+4      	; 0xc68 <commRC+0x2a>
		sendCommNO();
     c64:	88 df       	rcall	.-240    	; 0xb76 <sendCommNO>
     c66:	25 c0       	rjmp	.+74     	; 0xcb2 <commRC+0x74>
		return;
	}
	
	// Get the argument:
	which = ASCIIHexToByte(args[0], args[1]);
     c68:	25 df       	rcall	.-438    	; 0xab4 <ASCIIHexToByte>
	
	// Read the controller configuration:
	readControllerConfig(which, &ccTemp);
     c6a:	69 ec       	ldi	r22, 0xC9	; 201
     c6c:	7a e2       	ldi	r23, 0x2A	; 42
     c6e:	f9 d0       	rcall	.+498    	; 0xe62 <readControllerConfig>
     c70:	09 ec       	ldi	r16, 0xC9	; 201
     c72:	1a e2       	ldi	r17, 0x2A	; 42
	
	// Reset the working copy address:
	ghAddr = 0;
}

void commRC(char* args) {
     c74:	0f 2e       	mov	r0, r31
     c76:	f4 e7       	ldi	r31, 0x74	; 116
     c78:	ef 2e       	mov	r14, r31
     c7a:	fb e2       	ldi	r31, 0x2B	; 43
     c7c:	ff 2e       	mov	r15, r31
     c7e:	f0 2d       	mov	r31, r0
	// Read the controller configuration:
	readControllerConfig(which, &ccTemp);
	
	// Write each ASCII byte:
	for (i = 0; i < sizeof(struct ControllerConfiguration); i++) {
		byteToASCIIHex(((uint8_t*)&ccTemp)[i], &high, &low);
     c80:	ae 01       	movw	r20, r28
     c82:	4e 5f       	subi	r20, 0xFE	; 254
     c84:	5f 4f       	sbci	r21, 0xFF	; 255
     c86:	be 01       	movw	r22, r28
     c88:	6f 5f       	subi	r22, 0xFF	; 255
     c8a:	7f 4f       	sbci	r23, 0xFF	; 255
     c8c:	f8 01       	movw	r30, r16
     c8e:	81 91       	ld	r24, Z+
     c90:	8f 01       	movw	r16, r30
     c92:	f7 de       	rcall	.-530    	; 0xa82 <byteToASCIIHex>
		sendUSBChar(high);
     c94:	89 81       	ldd	r24, Y+1	; 0x01
     c96:	0e 94 18 14 	call	0x2830	; 0x2830 <sendUSBChar>
		sendUSBChar(low);
     c9a:	8a 81       	ldd	r24, Y+2	; 0x02
     c9c:	0e 94 18 14 	call	0x2830	; 0x2830 <sendUSBChar>
	
	// Read the controller configuration:
	readControllerConfig(which, &ccTemp);
	
	// Write each ASCII byte:
	for (i = 0; i < sizeof(struct ControllerConfiguration); i++) {
     ca0:	0e 15       	cp	r16, r14
     ca2:	1f 05       	cpc	r17, r15
     ca4:	69 f7       	brne	.-38     	; 0xc80 <commRC+0x42>
		sendUSBChar(high);
		sendUSBChar(low);
	}
	
	// Add the terminator:
	sendUSBChar('\0');
     ca6:	80 e0       	ldi	r24, 0x00	; 0
     ca8:	0e 94 18 14 	call	0x2830	; 0x2830 <sendUSBChar>
	
	// Send an OK:
	sendCommOK();
     cac:	14 df       	rcall	.-472    	; 0xad6 <sendCommOK>
	
	// Reset the working copy address:
	ccAddr = 0;
     cae:	10 92 74 2b 	sts	0x2B74, r1
}
     cb2:	0f 90       	pop	r0
     cb4:	0f 90       	pop	r0
     cb6:	df 91       	pop	r29
     cb8:	cf 91       	pop	r28
     cba:	1f 91       	pop	r17
     cbc:	0f 91       	pop	r16
     cbe:	ff 90       	pop	r15
     cc0:	ef 90       	pop	r14
     cc2:	08 95       	ret

00000cc4 <commWG>:
		// Send an OK:
		sendCommOK();
	}
}

void commWG(char* args) {
     cc4:	ff 92       	push	r15
     cc6:	0f 93       	push	r16
     cc8:	1f 93       	push	r17
     cca:	cf 93       	push	r28
     ccc:	df 93       	push	r29
     cce:	ec 01       	movw	r28, r24
	uint8_t length;
	uint8_t temp = 0;
	
	// How much data is being written?
	length = strlen(args);
     cd0:	e8 2f       	mov	r30, r24
     cd2:	fd 2f       	mov	r31, r29
     cd4:	df 01       	movw	r26, r30
     cd6:	0d 90       	ld	r0, X+
     cd8:	00 20       	and	r0, r0
     cda:	e9 f7       	brne	.-6      	; 0xcd6 <commWG+0x12>
     cdc:	11 97       	sbiw	r26, 0x01	; 1
     cde:	ae 1b       	sub	r26, r30
     ce0:	bf 0b       	sbc	r27, r31
     ce2:	fa 2e       	mov	r15, r26
	
	// Length must be an even number since it represents ASCII coded hex.
	if ((length & 1) == 1) {
     ce4:	a0 fd       	sbrc	r26, 0
     ce6:	07 c0       	rjmp	.+14     	; 0xcf6 <commWG+0x32>
		sendCommNO();
		return;
	}
	
	// Translate the ASCII to hex and write it to the working copy as long as there is room:
	while (temp < length && ghAddr < sizeof(struct GlobalHeader)) {
     ce8:	aa 23       	and	r26, r26
     cea:	01 f1       	breq	.+64     	; 0xd2c <commWG+0x68>
     cec:	10 91 c8 2a 	lds	r17, 0x2AC8
     cf0:	17 38       	cpi	r17, 0x87	; 135
     cf2:	18 f0       	brcs	.+6      	; 0xcfa <commWG+0x36>
     cf4:	1d c0       	rjmp	.+58     	; 0xd30 <commWG+0x6c>
	// How much data is being written?
	length = strlen(args);
	
	// Length must be an even number since it represents ASCII coded hex.
	if ((length & 1) == 1) {
		sendCommNO();
     cf6:	3f df       	rcall	.-386    	; 0xb76 <sendCommNO>
		return;
     cf8:	1c c0       	rjmp	.+56     	; 0xd32 <commWG+0x6e>
	}
	
	// Translate the ASCII to hex and write it to the working copy as long as there is room:
	while (temp < length && ghAddr < sizeof(struct GlobalHeader)) {
     cfa:	00 e0       	ldi	r16, 0x00	; 0
		((uint8_t*)&ghTemp)[ghAddr++] = ASCIIHexToByte(args[temp], args[temp+1]);
     cfc:	fe 01       	movw	r30, r28
     cfe:	e0 0f       	add	r30, r16
     d00:	f1 1d       	adc	r31, r1
     d02:	61 81       	ldd	r22, Z+1	; 0x01
     d04:	80 81       	ld	r24, Z
     d06:	d6 de       	rcall	.-596    	; 0xab4 <ASCIIHexToByte>
     d08:	e1 2f       	mov	r30, r17
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	ef 5b       	subi	r30, 0xBF	; 191
     d0e:	f5 4d       	sbci	r31, 0xD5	; 213
     d10:	80 83       	st	Z, r24
     d12:	1f 5f       	subi	r17, 0xFF	; 255
		temp += 2;
     d14:	0e 5f       	subi	r16, 0xFE	; 254
		sendCommNO();
		return;
	}
	
	// Translate the ASCII to hex and write it to the working copy as long as there is room:
	while (temp < length && ghAddr < sizeof(struct GlobalHeader)) {
     d16:	0f 15       	cp	r16, r15
     d18:	18 f0       	brcs	.+6      	; 0xd20 <commWG+0x5c>
     d1a:	10 93 c8 2a 	sts	0x2AC8, r17
     d1e:	04 c0       	rjmp	.+8      	; 0xd28 <commWG+0x64>
     d20:	17 38       	cpi	r17, 0x87	; 135
     d22:	61 f7       	brne	.-40     	; 0xcfc <commWG+0x38>
     d24:	10 93 c8 2a 	sts	0x2AC8, r17
		((uint8_t*)&ghTemp)[ghAddr++] = ASCIIHexToByte(args[temp], args[temp+1]);
		temp += 2;
	}
	
	// Did the copy complete?
	if (temp == length) {
     d28:	f0 12       	cpse	r15, r16
     d2a:	02 c0       	rjmp	.+4      	; 0xd30 <commWG+0x6c>
		sendCommOK();
     d2c:	d4 de       	rcall	.-600    	; 0xad6 <sendCommOK>
     d2e:	01 c0       	rjmp	.+2      	; 0xd32 <commWG+0x6e>
	}
	else {
		sendCommNO();
     d30:	22 df       	rcall	.-444    	; 0xb76 <sendCommNO>
	}
}
     d32:	df 91       	pop	r29
     d34:	cf 91       	pop	r28
     d36:	1f 91       	pop	r17
     d38:	0f 91       	pop	r16
     d3a:	ff 90       	pop	r15
     d3c:	08 95       	ret

00000d3e <commAG>:
	
	// Reset the working copy address:
	ghAddr = 0;
}

void commAG(char* args) {
     d3e:	fc 01       	movw	r30, r24
	// Check for the argument:
	if (args[0] == '\0' || args[1] == '\0' || args[2] != '\0') {
     d40:	80 81       	ld	r24, Z
     d42:	88 23       	and	r24, r24
     d44:	31 f0       	breq	.+12     	; 0xd52 <commAG+0x14>
     d46:	61 81       	ldd	r22, Z+1	; 0x01
     d48:	66 23       	and	r22, r22
     d4a:	19 f0       	breq	.+6      	; 0xd52 <commAG+0x14>
     d4c:	92 81       	ldd	r25, Z+2	; 0x02
     d4e:	99 23       	and	r25, r25
     d50:	09 f0       	breq	.+2      	; 0xd54 <commAG+0x16>
		sendCommNO();
     d52:	11 cf       	rjmp	.-478    	; 0xb76 <sendCommNO>
	}
	else {
		// Set the new address:
		ghAddr = ASCIIHexToByte(args[0], args[1]);
     d54:	af de       	rcall	.-674    	; 0xab4 <ASCIIHexToByte>
     d56:	80 93 c8 2a 	sts	0x2AC8, r24
		
		// Send an OK:
		sendCommOK();
     d5a:	bd ce       	rjmp	.-646    	; 0xad6 <sendCommOK>

00000d5c <processComm>:
	}
	
	return temp;
}

void processComm(void) {
     d5c:	af 92       	push	r10
     d5e:	bf 92       	push	r11
     d60:	cf 92       	push	r12
     d62:	df 92       	push	r13
     d64:	ef 92       	push	r14
     d66:	ff 92       	push	r15
     d68:	0f 93       	push	r16
     d6a:	1f 93       	push	r17
     d6c:	cf 93       	push	r28
     d6e:	df 93       	push	r29
     d70:	cd b7       	in	r28, 0x3d	; 61
     d72:	de b7       	in	r29, 0x3e	; 62
     d74:	c3 54       	subi	r28, 0x43	; 67
     d76:	d1 09       	sbc	r29, r1
     d78:	cd bf       	out	0x3d, r28	; 61
     d7a:	de bf       	out	0x3e, r29	; 62
	char str[USB_SERIAL_RX_BUFFER_SIZE];
	char cmd[3];
	bool match = false;
	
	// Was a string transmitted?
	if (recvUSBString(str, USB_SERIAL_RX_BUFFER_SIZE)) {
     d7c:	60 e4       	ldi	r22, 0x40	; 64
     d7e:	ce 01       	movw	r24, r28
     d80:	01 96       	adiw	r24, 0x01	; 1
     d82:	0e 94 44 14 	call	0x2888	; 0x2888 <recvUSBString>
     d86:	88 23       	and	r24, r24
     d88:	09 f4       	brne	.+2      	; 0xd8c <processComm+0x30>
     d8a:	4e c0       	rjmp	.+156    	; 0xe28 <processComm+0xcc>
		cmd[0] = str[0];
     d8c:	89 81       	ldd	r24, Y+1	; 0x01
     d8e:	22 96       	adiw	r28, 0x02	; 2
     d90:	8f af       	std	Y+63, r24	; 0x3f
     d92:	22 97       	sbiw	r28, 0x02	; 2
		cmd[1] = str[1];
     d94:	9a 81       	ldd	r25, Y+2	; 0x02
     d96:	23 96       	adiw	r28, 0x03	; 3
     d98:	9f af       	std	Y+63, r25	; 0x3f
     d9a:	23 97       	sbiw	r28, 0x03	; 3
		cmd[2] = '\0';
     d9c:	24 96       	adiw	r28, 0x04	; 4
     d9e:	1f ae       	std	Y+63, r1	; 0x3f
     da0:	24 97       	sbiw	r28, 0x04	; 4
		sendDBGLine("USB:rcv" + *cmd);
     da2:	99 27       	eor	r25, r25
     da4:	87 fd       	sbrc	r24, 7
     da6:	90 95       	com	r25
     da8:	8d 57       	subi	r24, 0x7D	; 125
     daa:	9f 4d       	sbci	r25, 0xDF	; 223
     dac:	0e 94 a5 10 	call	0x214a	; 0x214a <sendDBGLine>
     db0:	0f 2e       	mov	r0, r31
     db2:	fa ec       	ldi	r31, 0xCA	; 202
     db4:	ef 2e       	mov	r14, r31
     db6:	f0 e2       	ldi	r31, 0x20	; 32
     db8:	ff 2e       	mov	r15, r31
     dba:	f0 2d       	mov	r31, r0
     dbc:	00 e0       	ldi	r16, 0x00	; 0
     dbe:	10 e0       	ldi	r17, 0x00	; 0
		// Search for the command:
		for (i = 0; i < NUM_COMMANDS; i++) {
			// Is this a match?
			if (0 == strcmp(COMMANDS[i].CMD, cmd)) {
     dc0:	f7 01       	movw	r30, r14
     dc2:	c0 80       	ld	r12, Z
     dc4:	d1 80       	ldd	r13, Z+1	; 0x01
     dc6:	be 01       	movw	r22, r28
     dc8:	6f 5b       	subi	r22, 0xBF	; 191
     dca:	7f 4f       	sbci	r23, 0xFF	; 255
     dcc:	c6 01       	movw	r24, r12
     dce:	0e 94 08 25 	call	0x4a10	; 0x4a10 <strcmp>
     dd2:	28 2f       	mov	r18, r24
     dd4:	39 2f       	mov	r19, r25
     dd6:	23 2b       	or	r18, r19
     dd8:	a9 f4       	brne	.+42     	; 0xe04 <processComm+0xa8>
				sendDBGString("Command match ");
     dda:	8b e8       	ldi	r24, 0x8B	; 139
     ddc:	90 e2       	ldi	r25, 0x20	; 32
     dde:	0e 94 97 10 	call	0x212e	; 0x212e <sendDBGString>
				sendDBGLine(COMMANDS[i].CMD);
     de2:	c6 01       	movw	r24, r12
     de4:	0e 94 a5 10 	call	0x214a	; 0x214a <sendDBGLine>
				// Then execute the command passing it the rest of the string:
				match = true;
				COMMANDS[i].action(str+2);
     de8:	f8 01       	movw	r30, r16
     dea:	ee 0f       	add	r30, r30
     dec:	ff 1f       	adc	r31, r31
     dee:	ee 0f       	add	r30, r30
     df0:	ff 1f       	adc	r31, r31
     df2:	e6 53       	subi	r30, 0x36	; 54
     df4:	ff 4d       	sbci	r31, 0xDF	; 223
     df6:	02 80       	ldd	r0, Z+2	; 0x02
     df8:	f3 81       	ldd	r31, Z+3	; 0x03
     dfa:	e0 2d       	mov	r30, r0
     dfc:	ce 01       	movw	r24, r28
     dfe:	03 96       	adiw	r24, 0x03	; 3
     e00:	09 95       	icall
     e02:	12 c0       	rjmp	.+36     	; 0xe28 <processComm+0xcc>
     e04:	0f 5f       	subi	r16, 0xFF	; 255
     e06:	1f 4f       	sbci	r17, 0xFF	; 255
     e08:	f4 e0       	ldi	r31, 0x04	; 4
     e0a:	ef 0e       	add	r14, r31
     e0c:	f1 1c       	adc	r15, r1
		cmd[0] = str[0];
		cmd[1] = str[1];
		cmd[2] = '\0';
		sendDBGLine("USB:rcv" + *cmd);
		// Search for the command:
		for (i = 0; i < NUM_COMMANDS; i++) {
     e0e:	08 30       	cpi	r16, 0x08	; 8
     e10:	11 05       	cpc	r17, r1
     e12:	b1 f6       	brne	.-84     	; 0xdc0 <processComm+0x64>
			}
		}
		
		// If the command was not found, Then send a NO:
		if (!match) {
			sendDBGString("No command matching ");
     e14:	8a e9       	ldi	r24, 0x9A	; 154
     e16:	90 e2       	ldi	r25, 0x20	; 32
     e18:	0e 94 97 10 	call	0x212e	; 0x212e <sendDBGString>
			sendDBGLine(cmd);
     e1c:	ce 01       	movw	r24, r28
     e1e:	8f 5b       	subi	r24, 0xBF	; 191
     e20:	9f 4f       	sbci	r25, 0xFF	; 255
     e22:	0e 94 a5 10 	call	0x214a	; 0x214a <sendDBGLine>
			sendCommNO();
     e26:	a7 de       	rcall	.-690    	; 0xb76 <sendCommNO>
		}
	}
}
     e28:	cd 5b       	subi	r28, 0xBD	; 189
     e2a:	df 4f       	sbci	r29, 0xFF	; 255
     e2c:	cd bf       	out	0x3d, r28	; 61
     e2e:	de bf       	out	0x3e, r29	; 62
     e30:	df 91       	pop	r29
     e32:	cf 91       	pop	r28
     e34:	1f 91       	pop	r17
     e36:	0f 91       	pop	r16
     e38:	ff 90       	pop	r15
     e3a:	ef 90       	pop	r14
     e3c:	df 90       	pop	r13
     e3e:	cf 90       	pop	r12
     e40:	bf 90       	pop	r11
     e42:	af 90       	pop	r10
     e44:	08 95       	ret

00000e46 <readGlobalHeader>:
#define CONTROLLER_CONFIGURATION_EEPROM_START_ADDRESS (GLOBAL_HEADER_EEPROM_ADDRESS + GLOBAL_HEADER_EEPROM_SIZE)
#define CONTROLLER_CONFIGURATION_EEPROM_PAGE_COUNT ((sizeof(struct ControllerConfiguration) + (EEPROM_PAGE_SIZE-1)) / EEPROM_PAGE_SIZE)
#define CONTROLLER_CONFIGURATION_EEPROM_SIZE (CONTROLLER_CONFIGURATION_EEPROM_PAGE_COUNT * EEPROM_PAGE_SIZE)

void readGlobalHeader(struct GlobalHeader *gh) {
	nvm_eeprom_read_buffer(GLOBAL_HEADER_EEPROM_ADDRESS, (void *)gh, sizeof(struct GlobalHeader));
     e46:	47 e8       	ldi	r20, 0x87	; 135
     e48:	50 e0       	ldi	r21, 0x00	; 0
     e4a:	bc 01       	movw	r22, r24
     e4c:	80 e0       	ldi	r24, 0x00	; 0
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	0c 94 f6 15 	jmp	0x2bec	; 0x2bec <nvm_eeprom_read_buffer>

00000e54 <writeGlobalHeader>:
}

void writeGlobalHeader(const struct GlobalHeader *gh) {
	nvm_eeprom_erase_and_write_buffer(GLOBAL_HEADER_EEPROM_ADDRESS, (const void *) gh, sizeof(struct GlobalHeader));
     e54:	47 e8       	ldi	r20, 0x87	; 135
     e56:	50 e0       	ldi	r21, 0x00	; 0
     e58:	bc 01       	movw	r22, r24
     e5a:	80 e0       	ldi	r24, 0x00	; 0
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	0c 94 86 16 	jmp	0x2d0c	; 0x2d0c <nvm_eeprom_erase_and_write_buffer>

00000e62 <readControllerConfig>:
}

void readControllerConfig(uint8_t index, struct ControllerConfiguration *cc) {
	eeprom_addr_t addr = CONTROLLER_CONFIGURATION_EEPROM_START_ADDRESS;
	addr += index * CONTROLLER_CONFIGURATION_EEPROM_SIZE;
     e62:	20 ec       	ldi	r18, 0xC0	; 192
     e64:	82 9f       	mul	r24, r18
     e66:	c0 01       	movw	r24, r0
     e68:	11 24       	eor	r1, r1
	nvm_eeprom_read_buffer(addr, (void *)cc, sizeof(struct ControllerConfiguration));
     e6a:	4b ea       	ldi	r20, 0xAB	; 171
     e6c:	50 e0       	ldi	r21, 0x00	; 0
     e6e:	80 56       	subi	r24, 0x60	; 96
     e70:	9f 4f       	sbci	r25, 0xFF	; 255
     e72:	0c 94 f6 15 	jmp	0x2bec	; 0x2bec <nvm_eeprom_read_buffer>

00000e76 <writeControllerConfig>:
}

void writeControllerConfig(uint8_t index, const struct ControllerConfiguration *cc) {
	eeprom_addr_t addr = CONTROLLER_CONFIGURATION_EEPROM_START_ADDRESS;
	addr += index * CONTROLLER_CONFIGURATION_EEPROM_SIZE;
     e76:	20 ec       	ldi	r18, 0xC0	; 192
     e78:	82 9f       	mul	r24, r18
     e7a:	c0 01       	movw	r24, r0
     e7c:	11 24       	eor	r1, r1
	nvm_eeprom_erase_and_write_buffer(addr, (const void *)cc, sizeof(struct ControllerConfiguration));
     e7e:	4b ea       	ldi	r20, 0xAB	; 171
     e80:	50 e0       	ldi	r21, 0x00	; 0
     e82:	80 56       	subi	r24, 0x60	; 96
     e84:	9f 4f       	sbci	r25, 0xFF	; 255
     e86:	0c 94 86 16 	jmp	0x2d0c	; 0x2d0c <nvm_eeprom_erase_and_write_buffer>

00000e8a <loadConfiguration>:
}

void loadConfiguration(cfgsel_t which_configuration) {
     e8a:	cf 93       	push	r28
     e8c:	c8 2f       	mov	r28, r24
	
	if(which_configuration==CFG_SELECT)
     e8e:	8a 30       	cpi	r24, 0x0A	; 10
     e90:	29 f4       	brne	.+10     	; 0xe9c <loadConfiguration+0x12>
	{
		sendDBGLine("BIOS");
     e92:	8e ee       	ldi	r24, 0xEE	; 238
     e94:	90 e2       	ldi	r25, 0x20	; 32
     e96:	0e 94 a5 10 	call	0x214a	; 0x214a <sendDBGLine>
		biosMain();
     e9a:	56 dc       	rcall	.-1876   	; 0x748 <biosMain>
		//this line never reached - exiting biosMain() resets microcontroller
	}
	
	readGlobalHeader(&global_header); // Load the global header:
     e9c:	84 e8       	ldi	r24, 0x84	; 132
     e9e:	9c e2       	ldi	r25, 0x2C	; 44
     ea0:	d2 df       	rcall	.-92     	; 0xe46 <readGlobalHeader>

	// Do the default configurations need to be written?	
	if (global_header.first_run == 1) {
     ea2:	80 91 08 2d 	lds	r24, 0x2D08
     ea6:	84 ff       	sbrs	r24, 4
     ea8:	39 c0       	rjmp	.+114    	; 0xf1c <loadConfiguration+0x92>
		//Write the default controller configurations to EEPROM:
		writeControllerConfig(CFG_A,     &DRONE_KEYBOARD_CONFIG);		// B_A
     eaa:	67 e8       	ldi	r22, 0x87	; 135
     eac:	76 e2       	ldi	r23, 0x26	; 38
     eae:	80 e0       	ldi	r24, 0x00	; 0
     eb0:	e2 df       	rcall	.-60     	; 0xe76 <writeControllerConfig>
		writeControllerConfig(CFG_B,     &DRONE_IOS_CONFIG);			// B_B
     eb2:	61 e3       	ldi	r22, 0x31	; 49
     eb4:	75 e2       	ldi	r23, 0x25	; 37
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	de df       	rcall	.-68     	; 0xe76 <writeControllerConfig>
		writeControllerConfig(CFG_X,     &DRONE_GAMEPAD_CONFIG);		// B_X
     eba:	63 e5       	ldi	r22, 0x53	; 83
     ebc:	71 e2       	ldi	r23, 0x21	; 33
     ebe:	82 e0       	ldi	r24, 0x02	; 2
     ec0:	da df       	rcall	.-76     	; 0xe76 <writeControllerConfig>
		writeControllerConfig(CFG_Y,     &DRONE_KEYBOARD_MOUSE_CONFIG);	// B_Y
     ec2:	62 e3       	ldi	r22, 0x32	; 50
     ec4:	77 e2       	ldi	r23, 0x27	; 39
     ec6:	83 e0       	ldi	r24, 0x03	; 3
     ec8:	d6 df       	rcall	.-84     	; 0xe76 <writeControllerConfig>
		writeControllerConfig(CFG_RB,    &DRONE_JOYSTICK_CONFIG);		// B_RB
     eca:	6c ed       	ldi	r22, 0xDC	; 220
     ecc:	75 e2       	ldi	r23, 0x25	; 37
     ece:	84 e0       	ldi	r24, 0x04	; 4
     ed0:	d2 df       	rcall	.-92     	; 0xe76 <writeControllerConfig>
		writeControllerConfig(CFG_DOWN,  &DRONE_GSRS_CONFIG);			// B_DOWN
     ed2:	65 e8       	ldi	r22, 0x85	; 133
     ed4:	72 e2       	ldi	r23, 0x22	; 34
     ed6:	85 e0       	ldi	r24, 0x05	; 5
     ed8:	ce df       	rcall	.-100    	; 0xe76 <writeControllerConfig>
		writeControllerConfig(CFG_RIGHT, &DRONE_SSF_ARCADE_CONFIG);		// B_RIGHT
     eda:	6d ed       	ldi	r22, 0xDD	; 221
     edc:	77 e2       	ldi	r23, 0x27	; 39
     ede:	86 e0       	ldi	r24, 0x06	; 6
     ee0:	ca df       	rcall	.-108    	; 0xe76 <writeControllerConfig>
		writeControllerConfig(CFG_UP,    &DRONE_GTEL_CONFIG);			// B_UP
     ee2:	60 e3       	ldi	r22, 0x30	; 48
     ee4:	73 e2       	ldi	r23, 0x23	; 35
     ee6:	87 e0       	ldi	r24, 0x07	; 7
     ee8:	c6 df       	rcall	.-116    	; 0xe76 <writeControllerConfig>
		writeControllerConfig(CFG_LEFT,  &DRONE_GTEL_IOS_CONFIG);	    // B_LEFT
     eea:	6b ed       	ldi	r22, 0xDB	; 219
     eec:	73 e2       	ldi	r23, 0x23	; 35
     eee:	88 e0       	ldi	r24, 0x08	; 8
     ef0:	c2 df       	rcall	.-124    	; 0xe76 <writeControllerConfig>
		writeControllerConfig(CFG_LB,	 &DRONE_ICP_CONFIG);			// B_LB
     ef2:	66 e8       	ldi	r22, 0x86	; 134
     ef4:	74 e2       	ldi	r23, 0x24	; 36
     ef6:	89 e0       	ldi	r24, 0x09	; 9
     ef8:	be df       	rcall	.-132    	; 0xe76 <writeControllerConfig>
		
		// Write the default header to EEPROM:
		memcpy(&global_header, &DEFAULT_HEADER, sizeof(struct GlobalHeader));
     efa:	87 e8       	ldi	r24, 0x87	; 135
     efc:	ee ef       	ldi	r30, 0xFE	; 254
     efe:	f1 e2       	ldi	r31, 0x21	; 33
     f00:	a4 e8       	ldi	r26, 0x84	; 132
     f02:	bc e2       	ldi	r27, 0x2C	; 44
     f04:	01 90       	ld	r0, Z+
     f06:	0d 92       	st	X+, r0
     f08:	8a 95       	dec	r24
     f0a:	e1 f7       	brne	.-8      	; 0xf04 <loadConfiguration+0x7a>
		global_header.first_run = 0;
     f0c:	e8 e0       	ldi	r30, 0x08	; 8
     f0e:	fd e2       	ldi	r31, 0x2D	; 45
     f10:	80 81       	ld	r24, Z
     f12:	8f 7e       	andi	r24, 0xEF	; 239
     f14:	80 83       	st	Z, r24
		writeGlobalHeader(&global_header);
     f16:	84 e8       	ldi	r24, 0x84	; 132
     f18:	9c e2       	ldi	r25, 0x2C	; 44
     f1a:	9c df       	rcall	.-200    	; 0xe54 <writeGlobalHeader>
	}
	
	
	sendDBGString("Loading configuration ");
     f1c:	83 ef       	ldi	r24, 0xF3	; 243
     f1e:	90 e2       	ldi	r25, 0x20	; 32
     f20:	0e 94 97 10 	call	0x212e	; 0x212e <sendDBGString>
	sendDBGChar('0' + which_configuration);
     f24:	8c 2f       	mov	r24, r28
     f26:	80 5d       	subi	r24, 0xD0	; 208
     f28:	0e 94 92 10 	call	0x2124	; 0x2124 <sendDBGChar>
	sendDBGString("");
     f2c:	81 e3       	ldi	r24, 0x31	; 49
     f2e:	9a e2       	ldi	r25, 0x2A	; 42
     f30:	0e 94 97 10 	call	0x212e	; 0x212e <sendDBGString>
	readControllerConfig(which_configuration, &ccc);
     f34:	6d e0       	ldi	r22, 0x0D	; 13
     f36:	7d e2       	ldi	r23, 0x2D	; 45
     f38:	8c 2f       	mov	r24, r28
     f3a:	93 df       	rcall	.-218    	; 0xe62 <readControllerConfig>
}	
     f3c:	cf 91       	pop	r28
     f3e:	08 95       	ret

00000f40 <whichConfiguration>:

cfgsel_t whichConfiguration(void){
	cfgsel_t which_configuration;
	
	if (buttonActivated(B_SELECT))
     f40:	89 e0       	ldi	r24, 0x09	; 9
     f42:	4c dc       	rcall	.-1896   	; 0x7dc <buttonActivated>
     f44:	81 11       	cpse	r24, r1
     f46:	2b c0       	rjmp	.+86     	; 0xf9e <whichConfiguration+0x5e>
	{
		which_configuration = CFG_SELECT;
	}
	else if (buttonActivated(B_A)) {
     f48:	84 e0       	ldi	r24, 0x04	; 4
     f4a:	48 dc       	rcall	.-1904   	; 0x7dc <buttonActivated>
     f4c:	81 11       	cpse	r24, r1
     f4e:	29 c0       	rjmp	.+82     	; 0xfa2 <whichConfiguration+0x62>
		which_configuration = CFG_A;
	}
	else if (buttonActivated(B_B)) {
     f50:	85 e0       	ldi	r24, 0x05	; 5
     f52:	44 dc       	rcall	.-1912   	; 0x7dc <buttonActivated>
     f54:	81 11       	cpse	r24, r1
     f56:	27 c0       	rjmp	.+78     	; 0xfa6 <whichConfiguration+0x66>
		which_configuration = CFG_B;
	}
	else if (buttonActivated(B_X)) {
     f58:	86 e0       	ldi	r24, 0x06	; 6
     f5a:	40 dc       	rcall	.-1920   	; 0x7dc <buttonActivated>
     f5c:	81 11       	cpse	r24, r1
     f5e:	25 c0       	rjmp	.+74     	; 0xfaa <whichConfiguration+0x6a>
		which_configuration = CFG_X;
	}
	else if (buttonActivated(B_Y)) {
     f60:	87 e0       	ldi	r24, 0x07	; 7
     f62:	3c dc       	rcall	.-1928   	; 0x7dc <buttonActivated>
     f64:	81 11       	cpse	r24, r1
     f66:	23 c0       	rjmp	.+70     	; 0xfae <whichConfiguration+0x6e>
		which_configuration = CFG_Y;
	}
	else if (buttonActivated(B_RB)) {
     f68:	8a e0       	ldi	r24, 0x0A	; 10
     f6a:	38 dc       	rcall	.-1936   	; 0x7dc <buttonActivated>
     f6c:	81 11       	cpse	r24, r1
     f6e:	21 c0       	rjmp	.+66     	; 0xfb2 <whichConfiguration+0x72>
		which_configuration = CFG_RB;
	}
	else if (buttonActivated(B_DOWN)) {
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	34 dc       	rcall	.-1944   	; 0x7dc <buttonActivated>
     f74:	81 11       	cpse	r24, r1
     f76:	1f c0       	rjmp	.+62     	; 0xfb6 <whichConfiguration+0x76>
		which_configuration = CFG_DOWN;
	}
	else if (buttonActivated(B_RIGHT)) {
     f78:	83 e0       	ldi	r24, 0x03	; 3
     f7a:	30 dc       	rcall	.-1952   	; 0x7dc <buttonActivated>
     f7c:	81 11       	cpse	r24, r1
     f7e:	1d c0       	rjmp	.+58     	; 0xfba <whichConfiguration+0x7a>
		which_configuration = CFG_RIGHT;
	}
	else if (buttonActivated(B_LEFT)) {
     f80:	82 e0       	ldi	r24, 0x02	; 2
     f82:	2c dc       	rcall	.-1960   	; 0x7dc <buttonActivated>
     f84:	81 11       	cpse	r24, r1
     f86:	1b c0       	rjmp	.+54     	; 0xfbe <whichConfiguration+0x7e>
		which_configuration = CFG_LEFT;
	}
	else if (buttonActivated(B_UP)) {
     f88:	29 dc       	rcall	.-1966   	; 0x7dc <buttonActivated>
     f8a:	81 11       	cpse	r24, r1
     f8c:	1a c0       	rjmp	.+52     	; 0xfc2 <whichConfiguration+0x82>
		which_configuration = CFG_UP;
	}
	else if (buttonActivated(B_LB)) {
     f8e:	8b e0       	ldi	r24, 0x0B	; 11
     f90:	25 dc       	rcall	.-1974   	; 0x7dc <buttonActivated>
     f92:	81 11       	cpse	r24, r1
     f94:	18 c0       	rjmp	.+48     	; 0xfc6 <whichConfiguration+0x86>
		which_configuration = CFG_LB;
	}	
	else {
		which_configuration = global_header.default_configuration;
     f96:	80 91 08 2d 	lds	r24, 0x2D08
     f9a:	8f 70       	andi	r24, 0x0F	; 15
     f9c:	08 95       	ret
cfgsel_t whichConfiguration(void){
	cfgsel_t which_configuration;
	
	if (buttonActivated(B_SELECT))
	{
		which_configuration = CFG_SELECT;
     f9e:	8a e0       	ldi	r24, 0x0A	; 10
     fa0:	08 95       	ret
	}
	else if (buttonActivated(B_A)) {
		which_configuration = CFG_A;
     fa2:	80 e0       	ldi	r24, 0x00	; 0
     fa4:	08 95       	ret
	}
	else if (buttonActivated(B_B)) {
		which_configuration = CFG_B;
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	08 95       	ret
	}
	else if (buttonActivated(B_X)) {
		which_configuration = CFG_X;
     faa:	82 e0       	ldi	r24, 0x02	; 2
     fac:	08 95       	ret
	}
	else if (buttonActivated(B_Y)) {
		which_configuration = CFG_Y;
     fae:	83 e0       	ldi	r24, 0x03	; 3
     fb0:	08 95       	ret
	}
	else if (buttonActivated(B_RB)) {
		which_configuration = CFG_RB;
     fb2:	84 e0       	ldi	r24, 0x04	; 4
     fb4:	08 95       	ret
	}
	else if (buttonActivated(B_DOWN)) {
		which_configuration = CFG_DOWN;
     fb6:	85 e0       	ldi	r24, 0x05	; 5
     fb8:	08 95       	ret
	}
	else if (buttonActivated(B_RIGHT)) {
		which_configuration = CFG_RIGHT;
     fba:	86 e0       	ldi	r24, 0x06	; 6
     fbc:	08 95       	ret
	}
	else if (buttonActivated(B_LEFT)) {
		which_configuration = CFG_LEFT;
     fbe:	88 e0       	ldi	r24, 0x08	; 8
     fc0:	08 95       	ret
	}
	else if (buttonActivated(B_UP)) {
		which_configuration = CFG_UP;
     fc2:	87 e0       	ldi	r24, 0x07	; 7
     fc4:	08 95       	ret
	}
	else if (buttonActivated(B_LB)) {
		which_configuration = CFG_LB;
     fc6:	89 e0       	ldi	r24, 0x09	; 9
	else {
		which_configuration = global_header.default_configuration;
	}
	
	return which_configuration;
}
     fc8:	08 95       	ret

00000fca <gamepadInit>:

// Local function to handle keyboard and joystick button presses.
void gamepadReport(void);

void gamepadInit(struct ControllerConfiguration *cc) {
	my_cc = cc;
     fca:	80 93 75 2b 	sts	0x2B75, r24
     fce:	90 93 76 2b 	sts	0x2B76, r25
	BluetoothGamePadMode();
     fd2:	0c 94 b8 20 	jmp	0x4170	; 0x4170 <BluetoothGamePadMode>

00000fd6 <gamepadReport>:
	
	gamepadReport();
}

// Sends a gamepad report when needed:
void gamepadReport(void) {
     fd6:	0f 93       	push	r16
     fd8:	1f 93       	push	r17
     fda:	cf 93       	push	r28
     fdc:	df 93       	push	r29

	// Send a report if the joystick or buttons have changed:
	if (pressed_buttons != previous_pressed_buttons
     fde:	80 91 77 2b 	lds	r24, 0x2B77
     fe2:	90 91 78 2b 	lds	r25, 0x2B78
     fe6:	a0 91 79 2b 	lds	r26, 0x2B79
     fea:	b0 91 7a 2b 	lds	r27, 0x2B7A
     fee:	40 91 7f 2b 	lds	r20, 0x2B7F
     ff2:	50 91 80 2b 	lds	r21, 0x2B80
     ff6:	60 91 81 2b 	lds	r22, 0x2B81
     ffa:	70 91 82 2b 	lds	r23, 0x2B82
     ffe:	84 17       	cp	r24, r20
    1000:	95 07       	cpc	r25, r21
    1002:	a6 07       	cpc	r26, r22
    1004:	b7 07       	cpc	r27, r23
    1006:	c9 f4       	brne	.+50     	; 0x103a <gamepadReport+0x64>
	    || current_xy[JOYSTICK_LEFT].x != previous_xy[JOYSTICK_LEFT].x
    1008:	30 91 7b 2b 	lds	r19, 0x2B7B
    100c:	20 91 83 2b 	lds	r18, 0x2B83
    1010:	32 13       	cpse	r19, r18
    1012:	13 c0       	rjmp	.+38     	; 0x103a <gamepadReport+0x64>
		|| current_xy[JOYSTICK_LEFT].y != previous_xy[JOYSTICK_LEFT].y
    1014:	30 91 7c 2b 	lds	r19, 0x2B7C
    1018:	20 91 84 2b 	lds	r18, 0x2B84
    101c:	32 13       	cpse	r19, r18
    101e:	0d c0       	rjmp	.+26     	; 0x103a <gamepadReport+0x64>
		|| current_xy[JOYSTICK_RIGHT].x != previous_xy[JOYSTICK_RIGHT].x
    1020:	30 91 7d 2b 	lds	r19, 0x2B7D
    1024:	20 91 85 2b 	lds	r18, 0x2B85
    1028:	32 13       	cpse	r19, r18
    102a:	07 c0       	rjmp	.+14     	; 0x103a <gamepadReport+0x64>
		|| current_xy[JOYSTICK_RIGHT].y != previous_xy[JOYSTICK_RIGHT].y) {
    102c:	30 91 7e 2b 	lds	r19, 0x2B7E
    1030:	20 91 86 2b 	lds	r18, 0x2B86
    1034:	32 17       	cp	r19, r18
    1036:	09 f4       	brne	.+2      	; 0x103a <gamepadReport+0x64>
    1038:	1f c1       	rjmp	.+574    	; 0x1278 <gamepadReport+0x2a2>
		
		// Update the previous values:
		memcpy(&previous_xy, &current_xy, sizeof(previous_xy));
    103a:	40 91 7b 2b 	lds	r20, 0x2B7B
    103e:	50 91 7c 2b 	lds	r21, 0x2B7C
    1042:	60 91 7d 2b 	lds	r22, 0x2B7D
    1046:	70 91 7e 2b 	lds	r23, 0x2B7E
    104a:	40 93 83 2b 	sts	0x2B83, r20
    104e:	50 93 84 2b 	sts	0x2B84, r21
    1052:	60 93 85 2b 	sts	0x2B85, r22
    1056:	70 93 86 2b 	sts	0x2B86, r23
		previous_pressed_buttons = pressed_buttons;
    105a:	80 93 7f 2b 	sts	0x2B7F, r24
    105e:	90 93 80 2b 	sts	0x2B80, r25
    1062:	a0 93 81 2b 	sts	0x2B81, r26
    1066:	b0 93 82 2b 	sts	0x2B82, r27
    106a:	c0 e0       	ldi	r28, 0x00	; 0
    106c:	d0 e0       	ldi	r29, 0x00	; 0
#if DEBUG == 1
	{
		int8_t i;
		int8_t temp1, temp2;
		for (i = 0; i < NUM_BUTTONS; i++) {
			sendDBGChar((pressed_buttons & (1ul<<i))? '1':'0');
    106e:	80 91 77 2b 	lds	r24, 0x2B77
    1072:	90 91 78 2b 	lds	r25, 0x2B78
    1076:	a0 91 79 2b 	lds	r26, 0x2B79
    107a:	b0 91 7a 2b 	lds	r27, 0x2B7A
    107e:	0c 2e       	mov	r0, r28
    1080:	04 c0       	rjmp	.+8      	; 0x108a <gamepadReport+0xb4>
    1082:	b6 95       	lsr	r27
    1084:	a7 95       	ror	r26
    1086:	97 95       	ror	r25
    1088:	87 95       	ror	r24
    108a:	0a 94       	dec	r0
    108c:	d2 f7       	brpl	.-12     	; 0x1082 <gamepadReport+0xac>
    108e:	80 ff       	sbrs	r24, 0
    1090:	02 c0       	rjmp	.+4      	; 0x1096 <gamepadReport+0xc0>
    1092:	81 e3       	ldi	r24, 0x31	; 49
    1094:	01 c0       	rjmp	.+2      	; 0x1098 <gamepadReport+0xc2>
    1096:	80 e3       	ldi	r24, 0x30	; 48
    1098:	0e 94 92 10 	call	0x2124	; 0x2124 <sendDBGChar>
    109c:	21 96       	adiw	r28, 0x01	; 1

#if DEBUG == 1
	{
		int8_t i;
		int8_t temp1, temp2;
		for (i = 0; i < NUM_BUTTONS; i++) {
    109e:	ce 30       	cpi	r28, 0x0E	; 14
    10a0:	d1 05       	cpc	r29, r1
    10a2:	29 f7       	brne	.-54     	; 0x106e <gamepadReport+0x98>
			sendDBGChar((pressed_buttons & (1ul<<i))? '1':'0');
		}
		
		temp1 = current_xy[JOYSTICK_LEFT].x;
    10a4:	00 91 7b 2b 	lds	r16, 0x2B7B
		sendDBGString(", X1=");
    10a8:	8a e0       	ldi	r24, 0x0A	; 10
    10aa:	91 e2       	ldi	r25, 0x21	; 33
    10ac:	0e 94 97 10 	call	0x212e	; 0x212e <sendDBGString>
		if (temp1 < 0) {
    10b0:	00 23       	and	r16, r16
    10b2:	0c f0       	brlt	.+2      	; 0x10b6 <gamepadReport+0xe0>
    10b4:	d1 c0       	rjmp	.+418    	; 0x1258 <gamepadReport+0x282>
			sendDBGChar('-');
    10b6:	8d e2       	ldi	r24, 0x2D	; 45
    10b8:	0e 94 92 10 	call	0x2124	; 0x2124 <sendDBGChar>
			temp1 = -temp1;
    10bc:	01 95       	neg	r16
    10be:	cc c0       	rjmp	.+408    	; 0x1258 <gamepadReport+0x282>
		}
		for (i = 100; i != 0; i /= 10) {
			sendDBGChar('0' + (temp1/i));
    10c0:	80 2f       	mov	r24, r16
    10c2:	99 27       	eor	r25, r25
    10c4:	87 fd       	sbrc	r24, 7
    10c6:	90 95       	com	r25
    10c8:	61 2f       	mov	r22, r17
    10ca:	77 27       	eor	r23, r23
    10cc:	67 fd       	sbrc	r22, 7
    10ce:	70 95       	com	r23
    10d0:	0e 94 9d 24 	call	0x493a	; 0x493a <__divmodhi4>
    10d4:	08 2f       	mov	r16, r24
    10d6:	86 2f       	mov	r24, r22
    10d8:	80 5d       	subi	r24, 0xD0	; 208
    10da:	0e 94 92 10 	call	0x2124	; 0x2124 <sendDBGChar>
		sendDBGString(", X1=");
		if (temp1 < 0) {
			sendDBGChar('-');
			temp1 = -temp1;
		}
		for (i = 100; i != 0; i /= 10) {
    10de:	97 e6       	ldi	r25, 0x67	; 103
    10e0:	19 02       	muls	r17, r25
    10e2:	81 2d       	mov	r24, r1
    10e4:	11 24       	eor	r1, r1
    10e6:	85 95       	asr	r24
    10e8:	85 95       	asr	r24
    10ea:	17 fd       	sbrc	r17, 7
    10ec:	83 95       	inc	r24
    10ee:	18 2f       	mov	r17, r24
    10f0:	21 97       	sbiw	r28, 0x01	; 1
    10f2:	31 f7       	brne	.-52     	; 0x10c0 <gamepadReport+0xea>
			sendDBGChar('0' + (temp1/i));
			temp1 %= i;
		}
		temp1 = current_xy[JOYSTICK_LEFT].y;
    10f4:	00 91 7c 2b 	lds	r16, 0x2B7C
		sendDBGString(", Y1=");
    10f8:	80 e1       	ldi	r24, 0x10	; 16
    10fa:	91 e2       	ldi	r25, 0x21	; 33
    10fc:	0e 94 97 10 	call	0x212e	; 0x212e <sendDBGString>
		if (temp1 < 0) {
    1100:	00 23       	and	r16, r16
    1102:	0c f0       	brlt	.+2      	; 0x1106 <gamepadReport+0x130>
    1104:	ad c0       	rjmp	.+346    	; 0x1260 <gamepadReport+0x28a>
			sendDBGChar('-');
    1106:	8d e2       	ldi	r24, 0x2D	; 45
    1108:	0e 94 92 10 	call	0x2124	; 0x2124 <sendDBGChar>
			temp1 = -temp1;
    110c:	01 95       	neg	r16
    110e:	a8 c0       	rjmp	.+336    	; 0x1260 <gamepadReport+0x28a>
		}
		for (i = 100; i != 0; i /= 10) {
			sendDBGChar('0' + (temp1/i));
    1110:	80 2f       	mov	r24, r16
    1112:	99 27       	eor	r25, r25
    1114:	87 fd       	sbrc	r24, 7
    1116:	90 95       	com	r25
    1118:	61 2f       	mov	r22, r17
    111a:	77 27       	eor	r23, r23
    111c:	67 fd       	sbrc	r22, 7
    111e:	70 95       	com	r23
    1120:	0e 94 9d 24 	call	0x493a	; 0x493a <__divmodhi4>
    1124:	08 2f       	mov	r16, r24
    1126:	86 2f       	mov	r24, r22
    1128:	80 5d       	subi	r24, 0xD0	; 208
    112a:	fc d7       	rcall	.+4088   	; 0x2124 <sendDBGChar>
		sendDBGString(", Y1=");
		if (temp1 < 0) {
			sendDBGChar('-');
			temp1 = -temp1;
		}
		for (i = 100; i != 0; i /= 10) {
    112c:	27 e6       	ldi	r18, 0x67	; 103
    112e:	12 02       	muls	r17, r18
    1130:	81 2d       	mov	r24, r1
    1132:	11 24       	eor	r1, r1
    1134:	85 95       	asr	r24
    1136:	85 95       	asr	r24
    1138:	17 fd       	sbrc	r17, 7
    113a:	83 95       	inc	r24
    113c:	18 2f       	mov	r17, r24
    113e:	21 97       	sbiw	r28, 0x01	; 1
    1140:	39 f7       	brne	.-50     	; 0x1110 <gamepadReport+0x13a>
			sendDBGChar('0' + (temp1/i));
			temp1 %= i;
		}
		temp1 = current_xy[JOYSTICK_RIGHT].x;
    1142:	00 91 7d 2b 	lds	r16, 0x2B7D
		sendDBGString(", X2=");
    1146:	86 e1       	ldi	r24, 0x16	; 22
    1148:	91 e2       	ldi	r25, 0x21	; 33
    114a:	f1 d7       	rcall	.+4066   	; 0x212e <sendDBGString>
		if (temp1 < 0) {
    114c:	00 23       	and	r16, r16
    114e:	0c f0       	brlt	.+2      	; 0x1152 <gamepadReport+0x17c>
    1150:	8b c0       	rjmp	.+278    	; 0x1268 <gamepadReport+0x292>
			sendDBGChar('-');
    1152:	8d e2       	ldi	r24, 0x2D	; 45
    1154:	e7 d7       	rcall	.+4046   	; 0x2124 <sendDBGChar>
			temp1 = -temp1;
    1156:	01 95       	neg	r16
    1158:	87 c0       	rjmp	.+270    	; 0x1268 <gamepadReport+0x292>
		}
		for (i = 100; i != 0; i /= 10) {
			sendDBGChar('0' + (temp1/i));
    115a:	80 2f       	mov	r24, r16
    115c:	99 27       	eor	r25, r25
    115e:	87 fd       	sbrc	r24, 7
    1160:	90 95       	com	r25
    1162:	61 2f       	mov	r22, r17
    1164:	77 27       	eor	r23, r23
    1166:	67 fd       	sbrc	r22, 7
    1168:	70 95       	com	r23
    116a:	0e 94 9d 24 	call	0x493a	; 0x493a <__divmodhi4>
    116e:	08 2f       	mov	r16, r24
    1170:	86 2f       	mov	r24, r22
    1172:	80 5d       	subi	r24, 0xD0	; 208
    1174:	d7 d7       	rcall	.+4014   	; 0x2124 <sendDBGChar>
		sendDBGString(", X2=");
		if (temp1 < 0) {
			sendDBGChar('-');
			temp1 = -temp1;
		}
		for (i = 100; i != 0; i /= 10) {
    1176:	97 e6       	ldi	r25, 0x67	; 103
    1178:	19 02       	muls	r17, r25
    117a:	81 2d       	mov	r24, r1
    117c:	11 24       	eor	r1, r1
    117e:	85 95       	asr	r24
    1180:	85 95       	asr	r24
    1182:	17 fd       	sbrc	r17, 7
    1184:	83 95       	inc	r24
    1186:	18 2f       	mov	r17, r24
    1188:	21 97       	sbiw	r28, 0x01	; 1
    118a:	39 f7       	brne	.-50     	; 0x115a <gamepadReport+0x184>
			sendDBGChar('0' + (temp1/i));
			temp1 %= i;
		}
		temp1 = current_xy[JOYSTICK_RIGHT].y;
    118c:	00 91 7e 2b 	lds	r16, 0x2B7E
		sendDBGString(", Y2=");
    1190:	8c e1       	ldi	r24, 0x1C	; 28
    1192:	91 e2       	ldi	r25, 0x21	; 33
    1194:	cc d7       	rcall	.+3992   	; 0x212e <sendDBGString>
		if (temp1 < 0) {
    1196:	00 23       	and	r16, r16
    1198:	0c f0       	brlt	.+2      	; 0x119c <gamepadReport+0x1c6>
    119a:	6a c0       	rjmp	.+212    	; 0x1270 <gamepadReport+0x29a>
			sendDBGChar('-');
    119c:	8d e2       	ldi	r24, 0x2D	; 45
    119e:	c2 d7       	rcall	.+3972   	; 0x2124 <sendDBGChar>
			temp1 = -temp1;
    11a0:	01 95       	neg	r16
    11a2:	66 c0       	rjmp	.+204    	; 0x1270 <gamepadReport+0x29a>
		}
		for (i = 100; i != 0; i /= 10) {
			sendDBGChar('0' + (temp1/i));
    11a4:	80 2f       	mov	r24, r16
    11a6:	99 27       	eor	r25, r25
    11a8:	87 fd       	sbrc	r24, 7
    11aa:	90 95       	com	r25
    11ac:	61 2f       	mov	r22, r17
    11ae:	77 27       	eor	r23, r23
    11b0:	67 fd       	sbrc	r22, 7
    11b2:	70 95       	com	r23
    11b4:	0e 94 9d 24 	call	0x493a	; 0x493a <__divmodhi4>
    11b8:	08 2f       	mov	r16, r24
    11ba:	86 2f       	mov	r24, r22
    11bc:	80 5d       	subi	r24, 0xD0	; 208
    11be:	b2 d7       	rcall	.+3940   	; 0x2124 <sendDBGChar>
		sendDBGString(", Y2=");
		if (temp1 < 0) {
			sendDBGChar('-');
			temp1 = -temp1;
		}
		for (i = 100; i != 0; i /= 10) {
    11c0:	27 e6       	ldi	r18, 0x67	; 103
    11c2:	12 02       	muls	r17, r18
    11c4:	81 2d       	mov	r24, r1
    11c6:	11 24       	eor	r1, r1
    11c8:	85 95       	asr	r24
    11ca:	85 95       	asr	r24
    11cc:	17 fd       	sbrc	r17, 7
    11ce:	83 95       	inc	r24
    11d0:	18 2f       	mov	r17, r24
    11d2:	21 97       	sbiw	r28, 0x01	; 1
    11d4:	39 f7       	brne	.-50     	; 0x11a4 <gamepadReport+0x1ce>
			sendDBGChar('0' + (temp1/i));
			temp1 %= i;
		}
		sendDBGLine("");
    11d6:	81 e3       	ldi	r24, 0x31	; 49
    11d8:	9a e2       	ldi	r25, 0x2A	; 42
    11da:	b7 d7       	rcall	.+3950   	; 0x214a <sendDBGLine>
		 * HatSwitch
		 * Buttons 7-0
		 * Buttons 15-8
		 */
		// Send the identifier/size/blank-byte:
		sendBTString("BC:KR=A1,04,");
    11dc:	82 e2       	ldi	r24, 0x22	; 34
    11de:	91 e2       	ldi	r25, 0x21	; 33
    11e0:	0e 94 0f 20 	call	0x401e	; 0x401e <sendBTString>
		// Send the throttle (not used)
		sendBTHexPair(0);
    11e4:	80 e0       	ldi	r24, 0x00	; 0
    11e6:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <sendBTHexPair>
		// Send the left joystick values:
		sendBTChar(',');
    11ea:	8c e2       	ldi	r24, 0x2C	; 44
    11ec:	0e 94 02 20 	call	0x4004	; 0x4004 <sendBTChar>
		sendBTHexPair(current_xy[JOYSTICK_LEFT].x);
    11f0:	80 91 7b 2b 	lds	r24, 0x2B7B
    11f4:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <sendBTHexPair>
		sendBTChar(',');
    11f8:	8c e2       	ldi	r24, 0x2C	; 44
    11fa:	0e 94 02 20 	call	0x4004	; 0x4004 <sendBTChar>
		sendBTHexPair(current_xy[JOYSTICK_LEFT].y);
    11fe:	80 91 7c 2b 	lds	r24, 0x2B7C
    1202:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <sendBTHexPair>
		
		// Send the right joystick values:
		sendBTChar(',');
    1206:	8c e2       	ldi	r24, 0x2C	; 44
    1208:	0e 94 02 20 	call	0x4004	; 0x4004 <sendBTChar>
		sendBTHexPair(current_xy[JOYSTICK_RIGHT].x);
    120c:	80 91 7d 2b 	lds	r24, 0x2B7D
    1210:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <sendBTHexPair>
		sendBTChar(',');
    1214:	8c e2       	ldi	r24, 0x2C	; 44
    1216:	0e 94 02 20 	call	0x4004	; 0x4004 <sendBTChar>
		sendBTHexPair(current_xy[JOYSTICK_RIGHT].y);
    121a:	80 91 7e 2b 	lds	r24, 0x2B7E
    121e:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <sendBTHexPair>

		// Send the hat switch (no movement)
		sendBTChar(',');
    1222:	8c e2       	ldi	r24, 0x2C	; 44
    1224:	0e 94 02 20 	call	0x4004	; 0x4004 <sendBTChar>
		sendBTHexPair(8);
    1228:	88 e0       	ldi	r24, 0x08	; 8
    122a:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <sendBTHexPair>
		// Send the button states:
		sendBTChar(',');
    122e:	8c e2       	ldi	r24, 0x2C	; 44
    1230:	0e 94 02 20 	call	0x4004	; 0x4004 <sendBTChar>
		sendBTHexPair((uint8_t)(pressed_buttons & 0x00FF));
    1234:	80 91 77 2b 	lds	r24, 0x2B77
    1238:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <sendBTHexPair>
		sendBTChar(',');
    123c:	8c e2       	ldi	r24, 0x2C	; 44
    123e:	0e 94 02 20 	call	0x4004	; 0x4004 <sendBTChar>
		sendBTHexPair((uint8_t)((pressed_buttons >> 8) & 0x00FF));
    1242:	80 91 78 2b 	lds	r24, 0x2B78
    1246:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <sendBTHexPair>
		sendBTChar('\r');
    124a:	8d e0       	ldi	r24, 0x0D	; 13
    124c:	0e 94 02 20 	call	0x4004	; 0x4004 <sendBTChar>
		sendBTChar('\n');
    1250:	8a e0       	ldi	r24, 0x0A	; 10
    1252:	0e 94 02 20 	call	0x4004	; 0x4004 <sendBTChar>
    1256:	10 c0       	rjmp	.+32     	; 0x1278 <gamepadReport+0x2a2>
#if DEBUG == 1
	{
		int8_t i;
		int8_t temp1, temp2;
		for (i = 0; i < NUM_BUTTONS; i++) {
			sendDBGChar((pressed_buttons & (1ul<<i))? '1':'0');
    1258:	c3 e0       	ldi	r28, 0x03	; 3
    125a:	d0 e0       	ldi	r29, 0x00	; 0
    125c:	14 e6       	ldi	r17, 0x64	; 100
    125e:	30 cf       	rjmp	.-416    	; 0x10c0 <gamepadReport+0xea>
    1260:	c3 e0       	ldi	r28, 0x03	; 3
    1262:	d0 e0       	ldi	r29, 0x00	; 0
    1264:	14 e6       	ldi	r17, 0x64	; 100
    1266:	54 cf       	rjmp	.-344    	; 0x1110 <gamepadReport+0x13a>
    1268:	c3 e0       	ldi	r28, 0x03	; 3
    126a:	d0 e0       	ldi	r29, 0x00	; 0
    126c:	14 e6       	ldi	r17, 0x64	; 100
    126e:	75 cf       	rjmp	.-278    	; 0x115a <gamepadReport+0x184>
    1270:	c3 e0       	ldi	r28, 0x03	; 3
    1272:	d0 e0       	ldi	r29, 0x00	; 0
    1274:	14 e6       	ldi	r17, 0x64	; 100
    1276:	96 cf       	rjmp	.-212    	; 0x11a4 <gamepadReport+0x1ce>
		sendBTHexPair((uint8_t)((pressed_buttons >> 8) & 0x00FF));
		sendBTChar('\r');
		sendBTChar('\n');
#endif		
	}
    1278:	df 91       	pop	r29
    127a:	cf 91       	pop	r28
    127c:	1f 91       	pop	r17
    127e:	0f 91       	pop	r16
    1280:	08 95       	ret

00001282 <gamepadJoystickHandler>:
	
	gamepadReport();
}

void gamepadJoystickHandler(enum JoystickName name, int16_t x, int16_t y) {
	struct Joystick *this_joystick = &joysticks[name];
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	fc 01       	movw	r30, r24
    1286:	ee 0f       	add	r30, r30
    1288:	ff 1f       	adc	r31, r31
    128a:	df 01       	movw	r26, r30
    128c:	aa 0f       	add	r26, r26
    128e:	bb 1f       	adc	r27, r27
    1290:	aa 0f       	add	r26, r26
    1292:	bb 1f       	adc	r27, r27
    1294:	aa 0f       	add	r26, r26
    1296:	bb 1f       	adc	r27, r27
    1298:	ae 1b       	sub	r26, r30
    129a:	bf 0b       	sbc	r27, r31
    129c:	a8 5c       	subi	r26, 0xC8	; 200
    129e:	bf 4d       	sbci	r27, 0xDF	; 223
	struct JoystickConfiguration *this_joystick_cfg = &my_cc->joystick_configs[name];
    12a0:	26 e1       	ldi	r18, 0x16	; 22
    12a2:	28 9f       	mul	r18, r24
    12a4:	f0 01       	movw	r30, r0
    12a6:	29 9f       	mul	r18, r25
    12a8:	f0 0d       	add	r31, r0
    12aa:	11 24       	eor	r1, r1
    12ac:	e1 58       	subi	r30, 0x81	; 129
    12ae:	ff 4f       	sbci	r31, 0xFF	; 255
    12b0:	20 91 75 2b 	lds	r18, 0x2B75
    12b4:	30 91 76 2b 	lds	r19, 0x2B76
    12b8:	e2 0f       	add	r30, r18
    12ba:	f3 1f       	adc	r31, r19

	// Correct for the center position:
	x -= this_joystick->center_x;
    12bc:	12 96       	adiw	r26, 0x02	; 2
    12be:	2d 91       	ld	r18, X+
    12c0:	3c 91       	ld	r19, X
    12c2:	13 97       	sbiw	r26, 0x03	; 3
    12c4:	62 1b       	sub	r22, r18
    12c6:	73 0b       	sbc	r23, r19
	y -= this_joystick->center_y;
    12c8:	14 96       	adiw	r26, 0x04	; 4
    12ca:	0d 90       	ld	r0, X+
    12cc:	bc 91       	ld	r27, X
    12ce:	a0 2d       	mov	r26, r0
    12d0:	4a 1b       	sub	r20, r26
    12d2:	5b 0b       	sbc	r21, r27
	
	// Check if the magnitude is greater than the deadzone:
	if (x > this_joystick_cfg->x_deadzone) {
    12d4:	22 89       	ldd	r18, Z+18	; 0x12
    12d6:	33 89       	ldd	r19, Z+19	; 0x13
    12d8:	26 17       	cp	r18, r22
    12da:	37 07       	cpc	r19, r23
    12dc:	1c f4       	brge	.+6      	; 0x12e4 <gamepadJoystickHandler+0x62>
		x -= this_joystick_cfg->x_deadzone;
    12de:	62 1b       	sub	r22, r18
    12e0:	73 0b       	sbc	r23, r19
    12e2:	0c c0       	rjmp	.+24     	; 0x12fc <gamepadJoystickHandler+0x7a>
	}
	else if (x < -this_joystick_cfg->x_deadzone) {
    12e4:	aa 27       	eor	r26, r26
    12e6:	bb 27       	eor	r27, r27
    12e8:	a2 1b       	sub	r26, r18
    12ea:	b3 0b       	sbc	r27, r19
    12ec:	6a 17       	cp	r22, r26
    12ee:	7b 07       	cpc	r23, r27
    12f0:	1c f4       	brge	.+6      	; 0x12f8 <gamepadJoystickHandler+0x76>
		x += this_joystick_cfg->x_deadzone;
    12f2:	62 0f       	add	r22, r18
    12f4:	73 1f       	adc	r23, r19
    12f6:	02 c0       	rjmp	.+4      	; 0x12fc <gamepadJoystickHandler+0x7a>
	}
	else {
		x = 0;
    12f8:	60 e0       	ldi	r22, 0x00	; 0
    12fa:	70 e0       	ldi	r23, 0x00	; 0
	}
	if (y > this_joystick_cfg->y_deadzone) {
    12fc:	24 89       	ldd	r18, Z+20	; 0x14
    12fe:	35 89       	ldd	r19, Z+21	; 0x15
    1300:	24 17       	cp	r18, r20
    1302:	35 07       	cpc	r19, r21
    1304:	1c f4       	brge	.+6      	; 0x130c <gamepadJoystickHandler+0x8a>
		y -= this_joystick_cfg->y_deadzone;
    1306:	42 1b       	sub	r20, r18
    1308:	53 0b       	sbc	r21, r19
    130a:	0c c0       	rjmp	.+24     	; 0x1324 <gamepadJoystickHandler+0xa2>
	}
	else if (y < -this_joystick_cfg->y_deadzone) {
    130c:	ee 27       	eor	r30, r30
    130e:	ff 27       	eor	r31, r31
    1310:	e2 1b       	sub	r30, r18
    1312:	f3 0b       	sbc	r31, r19
    1314:	4e 17       	cp	r20, r30
    1316:	5f 07       	cpc	r21, r31
    1318:	1c f4       	brge	.+6      	; 0x1320 <gamepadJoystickHandler+0x9e>
		y += this_joystick_cfg->y_deadzone;
    131a:	42 0f       	add	r20, r18
    131c:	53 1f       	adc	r21, r19
    131e:	02 c0       	rjmp	.+4      	; 0x1324 <gamepadJoystickHandler+0xa2>
	}
	else {
		y = 0;
    1320:	40 e0       	ldi	r20, 0x00	; 0
    1322:	50 e0       	ldi	r21, 0x00	; 0
	}
	
	// Adjust for sensitivity:
	x /= GAMEPAD_RESOLUTION;
    1324:	fb 01       	movw	r30, r22
    1326:	ff 23       	and	r31, r31
    1328:	0c f4       	brge	.+2      	; 0x132c <gamepadJoystickHandler+0xaa>
    132a:	3f 96       	adiw	r30, 0x0f	; 15
    132c:	f5 95       	asr	r31
    132e:	e7 95       	ror	r30
    1330:	f5 95       	asr	r31
    1332:	e7 95       	ror	r30
    1334:	f5 95       	asr	r31
    1336:	e7 95       	ror	r30
    1338:	f5 95       	asr	r31
    133a:	e7 95       	ror	r30
    133c:	3e 2f       	mov	r19, r30
    133e:	2f 2f       	mov	r18, r31
	y /= GAMEPAD_RESOLUTION;
    1340:	ba 01       	movw	r22, r20
    1342:	55 23       	and	r21, r21
    1344:	14 f4       	brge	.+4      	; 0x134a <gamepadJoystickHandler+0xc8>
    1346:	61 5f       	subi	r22, 0xF1	; 241
    1348:	7f 4f       	sbci	r23, 0xFF	; 255
    134a:	75 95       	asr	r23
    134c:	67 95       	ror	r22
    134e:	75 95       	asr	r23
    1350:	67 95       	ror	r22
    1352:	75 95       	asr	r23
    1354:	67 95       	ror	r22
    1356:	75 95       	asr	r23
    1358:	67 95       	ror	r22
    135a:	e6 2f       	mov	r30, r22
    135c:	67 2f       	mov	r22, r23
    135e:	43 2f       	mov	r20, r19
    1360:	52 2f       	mov	r21, r18
    1362:	41 38       	cpi	r20, 0x81	; 129
    1364:	2f ef       	ldi	r18, 0xFF	; 255
    1366:	52 07       	cpc	r21, r18
    1368:	14 f4       	brge	.+4      	; 0x136e <gamepadJoystickHandler+0xec>
    136a:	41 e8       	ldi	r20, 0x81	; 129
    136c:	5f ef       	ldi	r21, 0xFF	; 255
    136e:	2e 2f       	mov	r18, r30
    1370:	36 2f       	mov	r19, r22
    1372:	21 38       	cpi	r18, 0x81	; 129
    1374:	6f ef       	ldi	r22, 0xFF	; 255
    1376:	36 07       	cpc	r19, r22
    1378:	14 f4       	brge	.+4      	; 0x137e <gamepadJoystickHandler+0xfc>
    137a:	21 e8       	ldi	r18, 0x81	; 129
    137c:	3f ef       	ldi	r19, 0xFF	; 255
	else if (y < GAMEPAD_Y_MIN) {
		y = GAMEPAD_Y_MIN;
	}

	// Record the position:
	current_xy[name].x = (int8_t)x;
    137e:	fc 01       	movw	r30, r24
    1380:	ee 0f       	add	r30, r30
    1382:	ff 1f       	adc	r31, r31
    1384:	e5 58       	subi	r30, 0x85	; 133
    1386:	f4 4d       	sbci	r31, 0xD4	; 212
    1388:	40 38       	cpi	r20, 0x80	; 128
    138a:	51 05       	cpc	r21, r1
    138c:	14 f0       	brlt	.+4      	; 0x1392 <gamepadJoystickHandler+0x110>
    138e:	4f e7       	ldi	r20, 0x7F	; 127
    1390:	50 e0       	ldi	r21, 0x00	; 0
    1392:	40 83       	st	Z, r20
	current_xy[name].y = (int8_t)y;
    1394:	fc 01       	movw	r30, r24
    1396:	ee 0f       	add	r30, r30
    1398:	ff 1f       	adc	r31, r31
    139a:	e4 58       	subi	r30, 0x84	; 132
    139c:	f4 4d       	sbci	r31, 0xD4	; 212
    139e:	20 38       	cpi	r18, 0x80	; 128
    13a0:	31 05       	cpc	r19, r1
    13a2:	14 f0       	brlt	.+4      	; 0x13a8 <gamepadJoystickHandler+0x126>
    13a4:	2f e7       	ldi	r18, 0x7F	; 127
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	20 83       	st	Z, r18
	
	gamepadReport();
    13aa:	15 ce       	rjmp	.-982    	; 0xfd6 <gamepadReport>

000013ac <gamepadButtonHandler>:
void gamepadInit(struct ControllerConfiguration *cc) {
	my_cc = cc;
	BluetoothGamePadMode();
}

void gamepadButtonHandler(enum ButtonName name, enum ButtonState state) {
    13ac:	0f 93       	push	r16
    13ae:	1f 93       	push	r17
	if (state == BUTTON_PRESSED) {
    13b0:	61 30       	cpi	r22, 0x01	; 1
    13b2:	21 f5       	brne	.+72     	; 0x13fc <gamepadButtonHandler+0x50>
		// Set the corresponding bit:
		pressed_buttons |= 1ul<<name;
    13b4:	41 e0       	ldi	r20, 0x01	; 1
    13b6:	50 e0       	ldi	r21, 0x00	; 0
    13b8:	60 e0       	ldi	r22, 0x00	; 0
    13ba:	70 e0       	ldi	r23, 0x00	; 0
    13bc:	8a 01       	movw	r16, r20
    13be:	9b 01       	movw	r18, r22
    13c0:	04 c0       	rjmp	.+8      	; 0x13ca <gamepadButtonHandler+0x1e>
    13c2:	00 0f       	add	r16, r16
    13c4:	11 1f       	adc	r17, r17
    13c6:	22 1f       	adc	r18, r18
    13c8:	33 1f       	adc	r19, r19
    13ca:	8a 95       	dec	r24
    13cc:	d2 f7       	brpl	.-12     	; 0x13c2 <gamepadButtonHandler+0x16>
    13ce:	d9 01       	movw	r26, r18
    13d0:	c8 01       	movw	r24, r16
    13d2:	40 91 77 2b 	lds	r20, 0x2B77
    13d6:	50 91 78 2b 	lds	r21, 0x2B78
    13da:	60 91 79 2b 	lds	r22, 0x2B79
    13de:	70 91 7a 2b 	lds	r23, 0x2B7A
    13e2:	84 2b       	or	r24, r20
    13e4:	95 2b       	or	r25, r21
    13e6:	a6 2b       	or	r26, r22
    13e8:	b7 2b       	or	r27, r23
    13ea:	80 93 77 2b 	sts	0x2B77, r24
    13ee:	90 93 78 2b 	sts	0x2B78, r25
    13f2:	a0 93 79 2b 	sts	0x2B79, r26
    13f6:	b0 93 7a 2b 	sts	0x2B7A, r27
    13fa:	29 c0       	rjmp	.+82     	; 0x144e <gamepadButtonHandler+0xa2>
	}

	if (state == BUTTON_RELEASED) {
    13fc:	61 11       	cpse	r22, r1
    13fe:	27 c0       	rjmp	.+78     	; 0x144e <gamepadButtonHandler+0xa2>
		// Clear the corresponding bit:
		pressed_buttons &= ~(1ul<<name);
    1400:	41 e0       	ldi	r20, 0x01	; 1
    1402:	50 e0       	ldi	r21, 0x00	; 0
    1404:	60 e0       	ldi	r22, 0x00	; 0
    1406:	70 e0       	ldi	r23, 0x00	; 0
    1408:	8a 01       	movw	r16, r20
    140a:	9b 01       	movw	r18, r22
    140c:	04 c0       	rjmp	.+8      	; 0x1416 <gamepadButtonHandler+0x6a>
    140e:	00 0f       	add	r16, r16
    1410:	11 1f       	adc	r17, r17
    1412:	22 1f       	adc	r18, r18
    1414:	33 1f       	adc	r19, r19
    1416:	8a 95       	dec	r24
    1418:	d2 f7       	brpl	.-12     	; 0x140e <gamepadButtonHandler+0x62>
    141a:	d9 01       	movw	r26, r18
    141c:	c8 01       	movw	r24, r16
    141e:	80 95       	com	r24
    1420:	90 95       	com	r25
    1422:	a0 95       	com	r26
    1424:	b0 95       	com	r27
    1426:	40 91 77 2b 	lds	r20, 0x2B77
    142a:	50 91 78 2b 	lds	r21, 0x2B78
    142e:	60 91 79 2b 	lds	r22, 0x2B79
    1432:	70 91 7a 2b 	lds	r23, 0x2B7A
    1436:	84 23       	and	r24, r20
    1438:	95 23       	and	r25, r21
    143a:	a6 23       	and	r26, r22
    143c:	b7 23       	and	r27, r23
    143e:	80 93 77 2b 	sts	0x2B77, r24
    1442:	90 93 78 2b 	sts	0x2B78, r25
    1446:	a0 93 79 2b 	sts	0x2B79, r26
    144a:	b0 93 7a 2b 	sts	0x2B7A, r27
	}
	
	gamepadReport();
    144e:	c3 dd       	rcall	.-1146   	; 0xfd6 <gamepadReport>
}
    1450:	1f 91       	pop	r17
    1452:	0f 91       	pop	r16
    1454:	08 95       	ret

00001456 <jStickInit>:

// Local function to handle keyboard and joystick button presses.
void jStickReport(void);

void jStickInit(struct ControllerConfiguration *cc) {
	my_cc = cc;
    1456:	80 93 87 2b 	sts	0x2B87, r24
    145a:	90 93 88 2b 	sts	0x2B88, r25
	sendDBGLine("jStickInit");
    145e:	8f e2       	ldi	r24, 0x2F	; 47
    1460:	91 e2       	ldi	r25, 0x21	; 33
    1462:	73 d6       	rcall	.+3302   	; 0x214a <sendDBGLine>
	BluetoothJoystickMode();
    1464:	0c 94 bb 20 	jmp	0x4176	; 0x4176 <BluetoothJoystickMode>

00001468 <jStickReport>:
	
	jStickReport();
}

// Sends a jStick report when needed:
void jStickReport(void) {
    1468:	0f 93       	push	r16
    146a:	1f 93       	push	r17
    146c:	cf 93       	push	r28
    146e:	df 93       	push	r29

	// Send a report if the joystick or buttons have changed:
	if (pressed_buttons != previous_pressed_buttons
    1470:	80 91 89 2b 	lds	r24, 0x2B89
    1474:	90 91 8a 2b 	lds	r25, 0x2B8A
    1478:	a0 91 8b 2b 	lds	r26, 0x2B8B
    147c:	b0 91 8c 2b 	lds	r27, 0x2B8C
    1480:	40 91 91 2b 	lds	r20, 0x2B91
    1484:	50 91 92 2b 	lds	r21, 0x2B92
    1488:	60 91 93 2b 	lds	r22, 0x2B93
    148c:	70 91 94 2b 	lds	r23, 0x2B94
    1490:	84 17       	cp	r24, r20
    1492:	95 07       	cpc	r25, r21
    1494:	a6 07       	cpc	r26, r22
    1496:	b7 07       	cpc	r27, r23
    1498:	c9 f4       	brne	.+50     	; 0x14cc <jStickReport+0x64>
	    || current_xy[JOYSTICK_LEFT].x != previous_xy[JOYSTICK_LEFT].x
    149a:	30 91 8d 2b 	lds	r19, 0x2B8D
    149e:	20 91 95 2b 	lds	r18, 0x2B95
    14a2:	32 13       	cpse	r19, r18
    14a4:	13 c0       	rjmp	.+38     	; 0x14cc <jStickReport+0x64>
		|| current_xy[JOYSTICK_LEFT].y != previous_xy[JOYSTICK_LEFT].y
    14a6:	30 91 8e 2b 	lds	r19, 0x2B8E
    14aa:	20 91 96 2b 	lds	r18, 0x2B96
    14ae:	32 13       	cpse	r19, r18
    14b0:	0d c0       	rjmp	.+26     	; 0x14cc <jStickReport+0x64>
		|| current_xy[JOYSTICK_RIGHT].x != previous_xy[JOYSTICK_RIGHT].x
    14b2:	30 91 8f 2b 	lds	r19, 0x2B8F
    14b6:	20 91 97 2b 	lds	r18, 0x2B97
    14ba:	32 13       	cpse	r19, r18
    14bc:	07 c0       	rjmp	.+14     	; 0x14cc <jStickReport+0x64>
		|| current_xy[JOYSTICK_RIGHT].y != previous_xy[JOYSTICK_RIGHT].y) {
    14be:	30 91 90 2b 	lds	r19, 0x2B90
    14c2:	20 91 98 2b 	lds	r18, 0x2B98
    14c6:	32 17       	cp	r19, r18
    14c8:	09 f4       	brne	.+2      	; 0x14cc <jStickReport+0x64>
    14ca:	19 c1       	rjmp	.+562    	; 0x16fe <jStickReport+0x296>
		
		// Update the previous values:
		memcpy(&previous_xy, &current_xy, sizeof(previous_xy));
    14cc:	40 91 8d 2b 	lds	r20, 0x2B8D
    14d0:	50 91 8e 2b 	lds	r21, 0x2B8E
    14d4:	60 91 8f 2b 	lds	r22, 0x2B8F
    14d8:	70 91 90 2b 	lds	r23, 0x2B90
    14dc:	40 93 95 2b 	sts	0x2B95, r20
    14e0:	50 93 96 2b 	sts	0x2B96, r21
    14e4:	60 93 97 2b 	sts	0x2B97, r22
    14e8:	70 93 98 2b 	sts	0x2B98, r23
		previous_pressed_buttons = pressed_buttons;
    14ec:	80 93 91 2b 	sts	0x2B91, r24
    14f0:	90 93 92 2b 	sts	0x2B92, r25
    14f4:	a0 93 93 2b 	sts	0x2B93, r26
    14f8:	b0 93 94 2b 	sts	0x2B94, r27
    14fc:	c0 e0       	ldi	r28, 0x00	; 0
    14fe:	d0 e0       	ldi	r29, 0x00	; 0

#if DEBUG == 1
		int8_t i;
		int8_t temp1, temp2;
		for (i = 0; i < NUM_BUTTONS; i++) {
			sendDBGChar((pressed_buttons & (1ul<<i))? '1':'0');
    1500:	80 91 89 2b 	lds	r24, 0x2B89
    1504:	90 91 8a 2b 	lds	r25, 0x2B8A
    1508:	a0 91 8b 2b 	lds	r26, 0x2B8B
    150c:	b0 91 8c 2b 	lds	r27, 0x2B8C
    1510:	0c 2e       	mov	r0, r28
    1512:	04 c0       	rjmp	.+8      	; 0x151c <jStickReport+0xb4>
    1514:	b6 95       	lsr	r27
    1516:	a7 95       	ror	r26
    1518:	97 95       	ror	r25
    151a:	87 95       	ror	r24
    151c:	0a 94       	dec	r0
    151e:	d2 f7       	brpl	.-12     	; 0x1514 <jStickReport+0xac>
    1520:	80 ff       	sbrs	r24, 0
    1522:	02 c0       	rjmp	.+4      	; 0x1528 <jStickReport+0xc0>
    1524:	81 e3       	ldi	r24, 0x31	; 49
    1526:	01 c0       	rjmp	.+2      	; 0x152a <jStickReport+0xc2>
    1528:	80 e3       	ldi	r24, 0x30	; 48
    152a:	fc d5       	rcall	.+3064   	; 0x2124 <sendDBGChar>
    152c:	21 96       	adiw	r28, 0x01	; 1
		previous_pressed_buttons = pressed_buttons;

#if DEBUG == 1
		int8_t i;
		int8_t temp1, temp2;
		for (i = 0; i < NUM_BUTTONS; i++) {
    152e:	ce 30       	cpi	r28, 0x0E	; 14
    1530:	d1 05       	cpc	r29, r1
    1532:	31 f7       	brne	.-52     	; 0x1500 <jStickReport+0x98>
			sendDBGChar((pressed_buttons & (1ul<<i))? '1':'0');
		}
		
		temp1 = current_xy[JOYSTICK_LEFT].x;
    1534:	00 91 8d 2b 	lds	r16, 0x2B8D
		sendDBGString(", X1=");
    1538:	8a e0       	ldi	r24, 0x0A	; 10
    153a:	91 e2       	ldi	r25, 0x21	; 33
    153c:	f8 d5       	rcall	.+3056   	; 0x212e <sendDBGString>
		if (temp1 < 0) {
    153e:	00 23       	and	r16, r16
    1540:	0c f0       	brlt	.+2      	; 0x1544 <jStickReport+0xdc>
    1542:	cd c0       	rjmp	.+410    	; 0x16de <jStickReport+0x276>
			sendDBGChar('-');
    1544:	8d e2       	ldi	r24, 0x2D	; 45
    1546:	ee d5       	rcall	.+3036   	; 0x2124 <sendDBGChar>
			temp1 = -temp1;
    1548:	01 95       	neg	r16
    154a:	c9 c0       	rjmp	.+402    	; 0x16de <jStickReport+0x276>
		}
		for (i = 100; i != 0; i /= 10) {
			sendDBGChar('0' + (temp1/i));
    154c:	80 2f       	mov	r24, r16
    154e:	99 27       	eor	r25, r25
    1550:	87 fd       	sbrc	r24, 7
    1552:	90 95       	com	r25
    1554:	61 2f       	mov	r22, r17
    1556:	77 27       	eor	r23, r23
    1558:	67 fd       	sbrc	r22, 7
    155a:	70 95       	com	r23
    155c:	0e 94 9d 24 	call	0x493a	; 0x493a <__divmodhi4>
    1560:	08 2f       	mov	r16, r24
    1562:	86 2f       	mov	r24, r22
    1564:	80 5d       	subi	r24, 0xD0	; 208
    1566:	de d5       	rcall	.+3004   	; 0x2124 <sendDBGChar>
		sendDBGString(", X1=");
		if (temp1 < 0) {
			sendDBGChar('-');
			temp1 = -temp1;
		}
		for (i = 100; i != 0; i /= 10) {
    1568:	97 e6       	ldi	r25, 0x67	; 103
    156a:	19 02       	muls	r17, r25
    156c:	81 2d       	mov	r24, r1
    156e:	11 24       	eor	r1, r1
    1570:	85 95       	asr	r24
    1572:	85 95       	asr	r24
    1574:	17 fd       	sbrc	r17, 7
    1576:	83 95       	inc	r24
    1578:	18 2f       	mov	r17, r24
    157a:	21 97       	sbiw	r28, 0x01	; 1
    157c:	39 f7       	brne	.-50     	; 0x154c <jStickReport+0xe4>
			sendDBGChar('0' + (temp1/i));
			temp1 %= i;
		}
		temp1 = current_xy[JOYSTICK_LEFT].y;
    157e:	00 91 8e 2b 	lds	r16, 0x2B8E
		sendDBGString(", Y1=");
    1582:	80 e1       	ldi	r24, 0x10	; 16
    1584:	91 e2       	ldi	r25, 0x21	; 33
    1586:	d3 d5       	rcall	.+2982   	; 0x212e <sendDBGString>
		if (temp1 < 0) {
    1588:	00 23       	and	r16, r16
    158a:	0c f0       	brlt	.+2      	; 0x158e <jStickReport+0x126>
    158c:	ac c0       	rjmp	.+344    	; 0x16e6 <jStickReport+0x27e>
			sendDBGChar('-');
    158e:	8d e2       	ldi	r24, 0x2D	; 45
    1590:	c9 d5       	rcall	.+2962   	; 0x2124 <sendDBGChar>
			temp1 = -temp1;
    1592:	01 95       	neg	r16
    1594:	a8 c0       	rjmp	.+336    	; 0x16e6 <jStickReport+0x27e>
		}
		for (i = 100; i != 0; i /= 10) {
			sendDBGChar('0' + (temp1/i));
    1596:	80 2f       	mov	r24, r16
    1598:	99 27       	eor	r25, r25
    159a:	87 fd       	sbrc	r24, 7
    159c:	90 95       	com	r25
    159e:	61 2f       	mov	r22, r17
    15a0:	77 27       	eor	r23, r23
    15a2:	67 fd       	sbrc	r22, 7
    15a4:	70 95       	com	r23
    15a6:	0e 94 9d 24 	call	0x493a	; 0x493a <__divmodhi4>
    15aa:	08 2f       	mov	r16, r24
    15ac:	86 2f       	mov	r24, r22
    15ae:	80 5d       	subi	r24, 0xD0	; 208
    15b0:	b9 d5       	rcall	.+2930   	; 0x2124 <sendDBGChar>
		sendDBGString(", Y1=");
		if (temp1 < 0) {
			sendDBGChar('-');
			temp1 = -temp1;
		}
		for (i = 100; i != 0; i /= 10) {
    15b2:	27 e6       	ldi	r18, 0x67	; 103
    15b4:	12 02       	muls	r17, r18
    15b6:	81 2d       	mov	r24, r1
    15b8:	11 24       	eor	r1, r1
    15ba:	85 95       	asr	r24
    15bc:	85 95       	asr	r24
    15be:	17 fd       	sbrc	r17, 7
    15c0:	83 95       	inc	r24
    15c2:	18 2f       	mov	r17, r24
    15c4:	21 97       	sbiw	r28, 0x01	; 1
    15c6:	39 f7       	brne	.-50     	; 0x1596 <jStickReport+0x12e>
			sendDBGChar('0' + (temp1/i));
			temp1 %= i;
		}
		temp1 = current_xy[JOYSTICK_RIGHT].x;
    15c8:	00 91 8f 2b 	lds	r16, 0x2B8F
		sendDBGString(", X2=");
    15cc:	86 e1       	ldi	r24, 0x16	; 22
    15ce:	91 e2       	ldi	r25, 0x21	; 33
    15d0:	ae d5       	rcall	.+2908   	; 0x212e <sendDBGString>
		if (temp1 < 0) {
    15d2:	00 23       	and	r16, r16
    15d4:	0c f0       	brlt	.+2      	; 0x15d8 <jStickReport+0x170>
    15d6:	8b c0       	rjmp	.+278    	; 0x16ee <jStickReport+0x286>
			sendDBGChar('-');
    15d8:	8d e2       	ldi	r24, 0x2D	; 45
    15da:	a4 d5       	rcall	.+2888   	; 0x2124 <sendDBGChar>
			temp1 = -temp1;
    15dc:	01 95       	neg	r16
    15de:	87 c0       	rjmp	.+270    	; 0x16ee <jStickReport+0x286>
		}
		for (i = 100; i != 0; i /= 10) {
			sendDBGChar('0' + (temp1/i));
    15e0:	80 2f       	mov	r24, r16
    15e2:	99 27       	eor	r25, r25
    15e4:	87 fd       	sbrc	r24, 7
    15e6:	90 95       	com	r25
    15e8:	61 2f       	mov	r22, r17
    15ea:	77 27       	eor	r23, r23
    15ec:	67 fd       	sbrc	r22, 7
    15ee:	70 95       	com	r23
    15f0:	0e 94 9d 24 	call	0x493a	; 0x493a <__divmodhi4>
    15f4:	08 2f       	mov	r16, r24
    15f6:	86 2f       	mov	r24, r22
    15f8:	80 5d       	subi	r24, 0xD0	; 208
    15fa:	94 d5       	rcall	.+2856   	; 0x2124 <sendDBGChar>
		sendDBGString(", X2=");
		if (temp1 < 0) {
			sendDBGChar('-');
			temp1 = -temp1;
		}
		for (i = 100; i != 0; i /= 10) {
    15fc:	97 e6       	ldi	r25, 0x67	; 103
    15fe:	19 02       	muls	r17, r25
    1600:	81 2d       	mov	r24, r1
    1602:	11 24       	eor	r1, r1
    1604:	85 95       	asr	r24
    1606:	85 95       	asr	r24
    1608:	17 fd       	sbrc	r17, 7
    160a:	83 95       	inc	r24
    160c:	18 2f       	mov	r17, r24
    160e:	21 97       	sbiw	r28, 0x01	; 1
    1610:	39 f7       	brne	.-50     	; 0x15e0 <jStickReport+0x178>
			sendDBGChar('0' + (temp1/i));
			temp1 %= i;
		}
		temp1 = current_xy[JOYSTICK_RIGHT].y;
    1612:	00 91 90 2b 	lds	r16, 0x2B90
		sendDBGString(", Y2=");
    1616:	8c e1       	ldi	r24, 0x1C	; 28
    1618:	91 e2       	ldi	r25, 0x21	; 33
    161a:	89 d5       	rcall	.+2834   	; 0x212e <sendDBGString>
		if (temp1 < 0) {
    161c:	00 23       	and	r16, r16
    161e:	0c f0       	brlt	.+2      	; 0x1622 <jStickReport+0x1ba>
    1620:	6a c0       	rjmp	.+212    	; 0x16f6 <jStickReport+0x28e>
			sendDBGChar('-');
    1622:	8d e2       	ldi	r24, 0x2D	; 45
    1624:	7f d5       	rcall	.+2814   	; 0x2124 <sendDBGChar>
			temp1 = -temp1;
    1626:	01 95       	neg	r16
    1628:	66 c0       	rjmp	.+204    	; 0x16f6 <jStickReport+0x28e>
		}
		for (i = 100; i != 0; i /= 10) {
			sendDBGChar('0' + (temp1/i));
    162a:	80 2f       	mov	r24, r16
    162c:	99 27       	eor	r25, r25
    162e:	87 fd       	sbrc	r24, 7
    1630:	90 95       	com	r25
    1632:	61 2f       	mov	r22, r17
    1634:	77 27       	eor	r23, r23
    1636:	67 fd       	sbrc	r22, 7
    1638:	70 95       	com	r23
    163a:	0e 94 9d 24 	call	0x493a	; 0x493a <__divmodhi4>
    163e:	08 2f       	mov	r16, r24
    1640:	86 2f       	mov	r24, r22
    1642:	80 5d       	subi	r24, 0xD0	; 208
    1644:	6f d5       	rcall	.+2782   	; 0x2124 <sendDBGChar>
		sendDBGString(", Y2=");
		if (temp1 < 0) {
			sendDBGChar('-');
			temp1 = -temp1;
		}
		for (i = 100; i != 0; i /= 10) {
    1646:	27 e6       	ldi	r18, 0x67	; 103
    1648:	12 02       	muls	r17, r18
    164a:	81 2d       	mov	r24, r1
    164c:	11 24       	eor	r1, r1
    164e:	85 95       	asr	r24
    1650:	85 95       	asr	r24
    1652:	17 fd       	sbrc	r17, 7
    1654:	83 95       	inc	r24
    1656:	18 2f       	mov	r17, r24
    1658:	21 97       	sbiw	r28, 0x01	; 1
    165a:	39 f7       	brne	.-50     	; 0x162a <jStickReport+0x1c2>
			sendDBGChar('0' + (temp1/i));
			temp1 %= i;
		}
		sendDBGLine("");
    165c:	81 e3       	ldi	r24, 0x31	; 49
    165e:	9a e2       	ldi	r25, 0x2A	; 42
    1660:	74 d5       	rcall	.+2792   	; 0x214a <sendDBGLine>
			* Buttons 7-0
			* Buttons 15-8
			* HatSwitch
			*/
		// Send the identifier/size/blank-byte:
		sendBTString("BC:KR=A1,04,");
    1662:	82 e2       	ldi	r24, 0x22	; 34
    1664:	91 e2       	ldi	r25, 0x21	; 33
    1666:	0e 94 0f 20 	call	0x401e	; 0x401e <sendBTString>
		// Send the throttle (not used)
		sendBTHexPair(0);
    166a:	80 e0       	ldi	r24, 0x00	; 0
    166c:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <sendBTHexPair>
		// Send the left joystick values:
		sendBTChar(',');
    1670:	8c e2       	ldi	r24, 0x2C	; 44
    1672:	0e 94 02 20 	call	0x4004	; 0x4004 <sendBTChar>
		sendBTHexPair(current_xy[JOYSTICK_LEFT].x);
    1676:	80 91 8d 2b 	lds	r24, 0x2B8D
    167a:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <sendBTHexPair>
		sendBTChar(',');
    167e:	8c e2       	ldi	r24, 0x2C	; 44
    1680:	0e 94 02 20 	call	0x4004	; 0x4004 <sendBTChar>
		sendBTHexPair(current_xy[JOYSTICK_LEFT].y);
    1684:	80 91 8e 2b 	lds	r24, 0x2B8E
    1688:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <sendBTHexPair>
		
		// Send the right joystick values:
		sendBTChar(',');
    168c:	8c e2       	ldi	r24, 0x2C	; 44
    168e:	0e 94 02 20 	call	0x4004	; 0x4004 <sendBTChar>
		sendBTHexPair(current_xy[JOYSTICK_RIGHT].x);
    1692:	80 91 8f 2b 	lds	r24, 0x2B8F
    1696:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <sendBTHexPair>
		sendBTChar(',');
    169a:	8c e2       	ldi	r24, 0x2C	; 44
    169c:	0e 94 02 20 	call	0x4004	; 0x4004 <sendBTChar>
		sendBTHexPair(current_xy[JOYSTICK_RIGHT].y);
    16a0:	80 91 90 2b 	lds	r24, 0x2B90
    16a4:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <sendBTHexPair>

		// Send the button states:
		sendBTChar(',');
    16a8:	8c e2       	ldi	r24, 0x2C	; 44
    16aa:	0e 94 02 20 	call	0x4004	; 0x4004 <sendBTChar>
		sendBTHexPair((uint8_t)(pressed_buttons & 0x00FF));
    16ae:	80 91 89 2b 	lds	r24, 0x2B89
    16b2:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <sendBTHexPair>
		sendBTChar(',');
    16b6:	8c e2       	ldi	r24, 0x2C	; 44
    16b8:	0e 94 02 20 	call	0x4004	; 0x4004 <sendBTChar>
		sendBTHexPair((uint8_t)((pressed_buttons >> 8) & 0x00FF));
    16bc:	80 91 8a 2b 	lds	r24, 0x2B8A
    16c0:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <sendBTHexPair>
		// Send the hat switch (no movement)
		sendBTChar(',');
    16c4:	8c e2       	ldi	r24, 0x2C	; 44
    16c6:	0e 94 02 20 	call	0x4004	; 0x4004 <sendBTChar>
		sendBTHexPair(8);
    16ca:	88 e0       	ldi	r24, 0x08	; 8
    16cc:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <sendBTHexPair>
		sendBTChar('\r');
    16d0:	8d e0       	ldi	r24, 0x0D	; 13
    16d2:	0e 94 02 20 	call	0x4004	; 0x4004 <sendBTChar>
		sendBTChar('\n');
    16d6:	8a e0       	ldi	r24, 0x0A	; 10
    16d8:	0e 94 02 20 	call	0x4004	; 0x4004 <sendBTChar>
    16dc:	10 c0       	rjmp	.+32     	; 0x16fe <jStickReport+0x296>

#if DEBUG == 1
		int8_t i;
		int8_t temp1, temp2;
		for (i = 0; i < NUM_BUTTONS; i++) {
			sendDBGChar((pressed_buttons & (1ul<<i))? '1':'0');
    16de:	c3 e0       	ldi	r28, 0x03	; 3
    16e0:	d0 e0       	ldi	r29, 0x00	; 0
    16e2:	14 e6       	ldi	r17, 0x64	; 100
    16e4:	33 cf       	rjmp	.-410    	; 0x154c <jStickReport+0xe4>
    16e6:	c3 e0       	ldi	r28, 0x03	; 3
    16e8:	d0 e0       	ldi	r29, 0x00	; 0
    16ea:	14 e6       	ldi	r17, 0x64	; 100
    16ec:	54 cf       	rjmp	.-344    	; 0x1596 <jStickReport+0x12e>
    16ee:	c3 e0       	ldi	r28, 0x03	; 3
    16f0:	d0 e0       	ldi	r29, 0x00	; 0
    16f2:	14 e6       	ldi	r17, 0x64	; 100
    16f4:	75 cf       	rjmp	.-278    	; 0x15e0 <jStickReport+0x178>
    16f6:	c3 e0       	ldi	r28, 0x03	; 3
    16f8:	d0 e0       	ldi	r29, 0x00	; 0
    16fa:	14 e6       	ldi	r17, 0x64	; 100
    16fc:	96 cf       	rjmp	.-212    	; 0x162a <jStickReport+0x1c2>
		sendBTHexPair(8);
		sendBTChar('\r');
		sendBTChar('\n');
#endif		
	}
    16fe:	df 91       	pop	r29
    1700:	cf 91       	pop	r28
    1702:	1f 91       	pop	r17
    1704:	0f 91       	pop	r16
    1706:	08 95       	ret

00001708 <jStickJoystickHandler>:
	
	jStickReport();
}

void jStickJoystickHandler(enum JoystickName name, int16_t x, int16_t y) {
	struct Joystick *this_joystick = &joysticks[name];
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	fc 01       	movw	r30, r24
    170c:	ee 0f       	add	r30, r30
    170e:	ff 1f       	adc	r31, r31
    1710:	df 01       	movw	r26, r30
    1712:	aa 0f       	add	r26, r26
    1714:	bb 1f       	adc	r27, r27
    1716:	aa 0f       	add	r26, r26
    1718:	bb 1f       	adc	r27, r27
    171a:	aa 0f       	add	r26, r26
    171c:	bb 1f       	adc	r27, r27
    171e:	ae 1b       	sub	r26, r30
    1720:	bf 0b       	sbc	r27, r31
    1722:	a8 5c       	subi	r26, 0xC8	; 200
    1724:	bf 4d       	sbci	r27, 0xDF	; 223
	struct JoystickConfiguration *this_joystick_cfg = &my_cc->joystick_configs[name];
    1726:	26 e1       	ldi	r18, 0x16	; 22
    1728:	28 9f       	mul	r18, r24
    172a:	f0 01       	movw	r30, r0
    172c:	29 9f       	mul	r18, r25
    172e:	f0 0d       	add	r31, r0
    1730:	11 24       	eor	r1, r1
    1732:	e1 58       	subi	r30, 0x81	; 129
    1734:	ff 4f       	sbci	r31, 0xFF	; 255
    1736:	20 91 87 2b 	lds	r18, 0x2B87
    173a:	30 91 88 2b 	lds	r19, 0x2B88
    173e:	e2 0f       	add	r30, r18
    1740:	f3 1f       	adc	r31, r19

	// Correct for the center position:
	x -= this_joystick->center_x;
    1742:	12 96       	adiw	r26, 0x02	; 2
    1744:	2d 91       	ld	r18, X+
    1746:	3c 91       	ld	r19, X
    1748:	13 97       	sbiw	r26, 0x03	; 3
    174a:	62 1b       	sub	r22, r18
    174c:	73 0b       	sbc	r23, r19
	y -= this_joystick->center_y;
    174e:	14 96       	adiw	r26, 0x04	; 4
    1750:	0d 90       	ld	r0, X+
    1752:	bc 91       	ld	r27, X
    1754:	a0 2d       	mov	r26, r0
    1756:	4a 1b       	sub	r20, r26
    1758:	5b 0b       	sbc	r21, r27
	
	// Check if the magnitude is greater than the deadzone:
	if (x > this_joystick_cfg->x_deadzone) {
    175a:	22 89       	ldd	r18, Z+18	; 0x12
    175c:	33 89       	ldd	r19, Z+19	; 0x13
    175e:	26 17       	cp	r18, r22
    1760:	37 07       	cpc	r19, r23
    1762:	1c f4       	brge	.+6      	; 0x176a <jStickJoystickHandler+0x62>
		x -= this_joystick_cfg->x_deadzone;
    1764:	62 1b       	sub	r22, r18
    1766:	73 0b       	sbc	r23, r19
    1768:	0c c0       	rjmp	.+24     	; 0x1782 <jStickJoystickHandler+0x7a>
	}
	else if (x < -this_joystick_cfg->x_deadzone) {
    176a:	aa 27       	eor	r26, r26
    176c:	bb 27       	eor	r27, r27
    176e:	a2 1b       	sub	r26, r18
    1770:	b3 0b       	sbc	r27, r19
    1772:	6a 17       	cp	r22, r26
    1774:	7b 07       	cpc	r23, r27
    1776:	1c f4       	brge	.+6      	; 0x177e <jStickJoystickHandler+0x76>
		x += this_joystick_cfg->x_deadzone;
    1778:	62 0f       	add	r22, r18
    177a:	73 1f       	adc	r23, r19
    177c:	02 c0       	rjmp	.+4      	; 0x1782 <jStickJoystickHandler+0x7a>
	}
	else {
		x = 0;
    177e:	60 e0       	ldi	r22, 0x00	; 0
    1780:	70 e0       	ldi	r23, 0x00	; 0
	}
	if (y > this_joystick_cfg->y_deadzone) {
    1782:	24 89       	ldd	r18, Z+20	; 0x14
    1784:	35 89       	ldd	r19, Z+21	; 0x15
    1786:	24 17       	cp	r18, r20
    1788:	35 07       	cpc	r19, r21
    178a:	1c f4       	brge	.+6      	; 0x1792 <jStickJoystickHandler+0x8a>
		y -= this_joystick_cfg->y_deadzone;
    178c:	42 1b       	sub	r20, r18
    178e:	53 0b       	sbc	r21, r19
    1790:	0c c0       	rjmp	.+24     	; 0x17aa <jStickJoystickHandler+0xa2>
	}
	else if (y < -this_joystick_cfg->y_deadzone) {
    1792:	ee 27       	eor	r30, r30
    1794:	ff 27       	eor	r31, r31
    1796:	e2 1b       	sub	r30, r18
    1798:	f3 0b       	sbc	r31, r19
    179a:	4e 17       	cp	r20, r30
    179c:	5f 07       	cpc	r21, r31
    179e:	1c f4       	brge	.+6      	; 0x17a6 <jStickJoystickHandler+0x9e>
		y += this_joystick_cfg->y_deadzone;
    17a0:	42 0f       	add	r20, r18
    17a2:	53 1f       	adc	r21, r19
    17a4:	02 c0       	rjmp	.+4      	; 0x17aa <jStickJoystickHandler+0xa2>
	}
	else {
		y = 0;
    17a6:	40 e0       	ldi	r20, 0x00	; 0
    17a8:	50 e0       	ldi	r21, 0x00	; 0
	}
	
	// Adjust for sensitivity:
	x /= JSTICK_RESOLUTION;
    17aa:	fb 01       	movw	r30, r22
    17ac:	ff 23       	and	r31, r31
    17ae:	0c f4       	brge	.+2      	; 0x17b2 <jStickJoystickHandler+0xaa>
    17b0:	3f 96       	adiw	r30, 0x0f	; 15
    17b2:	f5 95       	asr	r31
    17b4:	e7 95       	ror	r30
    17b6:	f5 95       	asr	r31
    17b8:	e7 95       	ror	r30
    17ba:	f5 95       	asr	r31
    17bc:	e7 95       	ror	r30
    17be:	f5 95       	asr	r31
    17c0:	e7 95       	ror	r30
    17c2:	3e 2f       	mov	r19, r30
    17c4:	2f 2f       	mov	r18, r31
	y /= JSTICK_RESOLUTION;
    17c6:	ba 01       	movw	r22, r20
    17c8:	55 23       	and	r21, r21
    17ca:	14 f4       	brge	.+4      	; 0x17d0 <jStickJoystickHandler+0xc8>
    17cc:	61 5f       	subi	r22, 0xF1	; 241
    17ce:	7f 4f       	sbci	r23, 0xFF	; 255
    17d0:	75 95       	asr	r23
    17d2:	67 95       	ror	r22
    17d4:	75 95       	asr	r23
    17d6:	67 95       	ror	r22
    17d8:	75 95       	asr	r23
    17da:	67 95       	ror	r22
    17dc:	75 95       	asr	r23
    17de:	67 95       	ror	r22
    17e0:	e6 2f       	mov	r30, r22
    17e2:	67 2f       	mov	r22, r23
    17e4:	43 2f       	mov	r20, r19
    17e6:	52 2f       	mov	r21, r18
    17e8:	41 38       	cpi	r20, 0x81	; 129
    17ea:	2f ef       	ldi	r18, 0xFF	; 255
    17ec:	52 07       	cpc	r21, r18
    17ee:	14 f4       	brge	.+4      	; 0x17f4 <jStickJoystickHandler+0xec>
    17f0:	41 e8       	ldi	r20, 0x81	; 129
    17f2:	5f ef       	ldi	r21, 0xFF	; 255
    17f4:	2e 2f       	mov	r18, r30
    17f6:	36 2f       	mov	r19, r22
    17f8:	21 38       	cpi	r18, 0x81	; 129
    17fa:	6f ef       	ldi	r22, 0xFF	; 255
    17fc:	36 07       	cpc	r19, r22
    17fe:	14 f4       	brge	.+4      	; 0x1804 <jStickJoystickHandler+0xfc>
    1800:	21 e8       	ldi	r18, 0x81	; 129
    1802:	3f ef       	ldi	r19, 0xFF	; 255
	else if (y < JSTICK_Y_MIN) {
		y = JSTICK_Y_MIN;
	}

	// Record the position:
	current_xy[name].x = (int8_t)x;
    1804:	fc 01       	movw	r30, r24
    1806:	ee 0f       	add	r30, r30
    1808:	ff 1f       	adc	r31, r31
    180a:	e3 57       	subi	r30, 0x73	; 115
    180c:	f4 4d       	sbci	r31, 0xD4	; 212
    180e:	40 38       	cpi	r20, 0x80	; 128
    1810:	51 05       	cpc	r21, r1
    1812:	14 f0       	brlt	.+4      	; 0x1818 <jStickJoystickHandler+0x110>
    1814:	4f e7       	ldi	r20, 0x7F	; 127
    1816:	50 e0       	ldi	r21, 0x00	; 0
    1818:	40 83       	st	Z, r20
	current_xy[name].y = (int8_t)y;
    181a:	fc 01       	movw	r30, r24
    181c:	ee 0f       	add	r30, r30
    181e:	ff 1f       	adc	r31, r31
    1820:	e2 57       	subi	r30, 0x72	; 114
    1822:	f4 4d       	sbci	r31, 0xD4	; 212
    1824:	20 38       	cpi	r18, 0x80	; 128
    1826:	31 05       	cpc	r19, r1
    1828:	14 f0       	brlt	.+4      	; 0x182e <jStickJoystickHandler+0x126>
    182a:	2f e7       	ldi	r18, 0x7F	; 127
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	20 83       	st	Z, r18
	
	jStickReport();
    1830:	1b ce       	rjmp	.-970    	; 0x1468 <jStickReport>

00001832 <jStickButtonHandler>:
	my_cc = cc;
	sendDBGLine("jStickInit");
	BluetoothJoystickMode();
}

void jStickButtonHandler(enum ButtonName name, enum ButtonState state) {
    1832:	0f 93       	push	r16
    1834:	1f 93       	push	r17
	if (state == BUTTON_PRESSED) {
    1836:	61 30       	cpi	r22, 0x01	; 1
    1838:	21 f5       	brne	.+72     	; 0x1882 <jStickButtonHandler+0x50>
		// Set the corresponding bit:
		pressed_buttons |= 1ul<<name;
    183a:	41 e0       	ldi	r20, 0x01	; 1
    183c:	50 e0       	ldi	r21, 0x00	; 0
    183e:	60 e0       	ldi	r22, 0x00	; 0
    1840:	70 e0       	ldi	r23, 0x00	; 0
    1842:	8a 01       	movw	r16, r20
    1844:	9b 01       	movw	r18, r22
    1846:	04 c0       	rjmp	.+8      	; 0x1850 <jStickButtonHandler+0x1e>
    1848:	00 0f       	add	r16, r16
    184a:	11 1f       	adc	r17, r17
    184c:	22 1f       	adc	r18, r18
    184e:	33 1f       	adc	r19, r19
    1850:	8a 95       	dec	r24
    1852:	d2 f7       	brpl	.-12     	; 0x1848 <jStickButtonHandler+0x16>
    1854:	d9 01       	movw	r26, r18
    1856:	c8 01       	movw	r24, r16
    1858:	40 91 89 2b 	lds	r20, 0x2B89
    185c:	50 91 8a 2b 	lds	r21, 0x2B8A
    1860:	60 91 8b 2b 	lds	r22, 0x2B8B
    1864:	70 91 8c 2b 	lds	r23, 0x2B8C
    1868:	84 2b       	or	r24, r20
    186a:	95 2b       	or	r25, r21
    186c:	a6 2b       	or	r26, r22
    186e:	b7 2b       	or	r27, r23
    1870:	80 93 89 2b 	sts	0x2B89, r24
    1874:	90 93 8a 2b 	sts	0x2B8A, r25
    1878:	a0 93 8b 2b 	sts	0x2B8B, r26
    187c:	b0 93 8c 2b 	sts	0x2B8C, r27
    1880:	29 c0       	rjmp	.+82     	; 0x18d4 <jStickButtonHandler+0xa2>
	}

	if (state == BUTTON_RELEASED) {
    1882:	61 11       	cpse	r22, r1
    1884:	27 c0       	rjmp	.+78     	; 0x18d4 <jStickButtonHandler+0xa2>
		// Clear the corresponding bit:
		pressed_buttons &= ~(1ul<<name);
    1886:	41 e0       	ldi	r20, 0x01	; 1
    1888:	50 e0       	ldi	r21, 0x00	; 0
    188a:	60 e0       	ldi	r22, 0x00	; 0
    188c:	70 e0       	ldi	r23, 0x00	; 0
    188e:	8a 01       	movw	r16, r20
    1890:	9b 01       	movw	r18, r22
    1892:	04 c0       	rjmp	.+8      	; 0x189c <jStickButtonHandler+0x6a>
    1894:	00 0f       	add	r16, r16
    1896:	11 1f       	adc	r17, r17
    1898:	22 1f       	adc	r18, r18
    189a:	33 1f       	adc	r19, r19
    189c:	8a 95       	dec	r24
    189e:	d2 f7       	brpl	.-12     	; 0x1894 <jStickButtonHandler+0x62>
    18a0:	d9 01       	movw	r26, r18
    18a2:	c8 01       	movw	r24, r16
    18a4:	80 95       	com	r24
    18a6:	90 95       	com	r25
    18a8:	a0 95       	com	r26
    18aa:	b0 95       	com	r27
    18ac:	40 91 89 2b 	lds	r20, 0x2B89
    18b0:	50 91 8a 2b 	lds	r21, 0x2B8A
    18b4:	60 91 8b 2b 	lds	r22, 0x2B8B
    18b8:	70 91 8c 2b 	lds	r23, 0x2B8C
    18bc:	84 23       	and	r24, r20
    18be:	95 23       	and	r25, r21
    18c0:	a6 23       	and	r26, r22
    18c2:	b7 23       	and	r27, r23
    18c4:	80 93 89 2b 	sts	0x2B89, r24
    18c8:	90 93 8a 2b 	sts	0x2B8A, r25
    18cc:	a0 93 8b 2b 	sts	0x2B8B, r26
    18d0:	b0 93 8c 2b 	sts	0x2B8C, r27
	}
	
	jStickReport();
    18d4:	c9 dd       	rcall	.-1134   	; 0x1468 <jStickReport>
}
    18d6:	1f 91       	pop	r17
    18d8:	0f 91       	pop	r16
    18da:	08 95       	ret

000018dc <keyboardInit>:
// Local function to handle keyboard button presses.
void changeButtonPressState(uint8_t name, enum ButtonState state);


void keyboardInit(struct ControllerConfiguration *cc) {
	my_cc = cc;
    18dc:	80 93 99 2b 	sts	0x2B99, r24
    18e0:	90 93 9a 2b 	sts	0x2B9A, r25
	BluetoothKeyboardMode();
    18e4:	0c 94 b2 20 	jmp	0x4164	; 0x4164 <BluetoothKeyboardMode>

000018e8 <changeButtonPressState>:

void keyboardButtonHandler(enum ButtonName name, enum ButtonState state) {
	changeButtonPressState((uint8_t)name, state);
}

void changeButtonPressState(uint8_t name, enum ButtonState state) {
    18e8:	5f 92       	push	r5
    18ea:	6f 92       	push	r6
    18ec:	7f 92       	push	r7
    18ee:	8f 92       	push	r8
    18f0:	9f 92       	push	r9
    18f2:	af 92       	push	r10
    18f4:	bf 92       	push	r11
    18f6:	cf 92       	push	r12
    18f8:	df 92       	push	r13
    18fa:	ef 92       	push	r14
    18fc:	ff 92       	push	r15
    18fe:	0f 93       	push	r16
    1900:	1f 93       	push	r17
    1902:	cf 93       	push	r28
    1904:	df 93       	push	r29
    1906:	cd b7       	in	r28, 0x3d	; 61
    1908:	de b7       	in	r29, 0x3e	; 62
    190a:	26 97       	sbiw	r28, 0x06	; 6
    190c:	cd bf       	out	0x3d, r28	; 61
    190e:	de bf       	out	0x3e, r29	; 62
	uint8_t modifiers = 0;
	uint8_t count;
	struct ButtonConfiguration *this_button;
	uint8_t i;
	
	if (state == BUTTON_PRESSED) {
    1910:	61 30       	cpi	r22, 0x01	; 1
    1912:	21 f5       	brne	.+72     	; 0x195c <changeButtonPressState+0x74>
		// Set the corresponding bit:
		pressed_buttons |= 1ul<<name;
    1914:	41 e0       	ldi	r20, 0x01	; 1
    1916:	50 e0       	ldi	r21, 0x00	; 0
    1918:	60 e0       	ldi	r22, 0x00	; 0
    191a:	70 e0       	ldi	r23, 0x00	; 0
    191c:	8a 01       	movw	r16, r20
    191e:	9b 01       	movw	r18, r22
    1920:	04 c0       	rjmp	.+8      	; 0x192a <changeButtonPressState+0x42>
    1922:	00 0f       	add	r16, r16
    1924:	11 1f       	adc	r17, r17
    1926:	22 1f       	adc	r18, r18
    1928:	33 1f       	adc	r19, r19
    192a:	8a 95       	dec	r24
    192c:	d2 f7       	brpl	.-12     	; 0x1922 <changeButtonPressState+0x3a>
    192e:	d9 01       	movw	r26, r18
    1930:	c8 01       	movw	r24, r16
    1932:	40 91 9b 2b 	lds	r20, 0x2B9B
    1936:	50 91 9c 2b 	lds	r21, 0x2B9C
    193a:	60 91 9d 2b 	lds	r22, 0x2B9D
    193e:	70 91 9e 2b 	lds	r23, 0x2B9E
    1942:	84 2b       	or	r24, r20
    1944:	95 2b       	or	r25, r21
    1946:	a6 2b       	or	r26, r22
    1948:	b7 2b       	or	r27, r23
    194a:	80 93 9b 2b 	sts	0x2B9B, r24
    194e:	90 93 9c 2b 	sts	0x2B9C, r25
    1952:	a0 93 9d 2b 	sts	0x2B9D, r26
    1956:	b0 93 9e 2b 	sts	0x2B9E, r27
    195a:	8e c0       	rjmp	.+284    	; 0x1a78 <changeButtonPressState+0x190>
	}

	if (state == BUTTON_RELEASED) {
    195c:	61 11       	cpse	r22, r1
    195e:	8c c0       	rjmp	.+280    	; 0x1a78 <changeButtonPressState+0x190>
		// Clear the corresponding bit:
		pressed_buttons &= ~(1ul<<name);
    1960:	41 e0       	ldi	r20, 0x01	; 1
    1962:	50 e0       	ldi	r21, 0x00	; 0
    1964:	60 e0       	ldi	r22, 0x00	; 0
    1966:	70 e0       	ldi	r23, 0x00	; 0
    1968:	8a 01       	movw	r16, r20
    196a:	9b 01       	movw	r18, r22
    196c:	04 c0       	rjmp	.+8      	; 0x1976 <changeButtonPressState+0x8e>
    196e:	00 0f       	add	r16, r16
    1970:	11 1f       	adc	r17, r17
    1972:	22 1f       	adc	r18, r18
    1974:	33 1f       	adc	r19, r19
    1976:	8a 95       	dec	r24
    1978:	d2 f7       	brpl	.-12     	; 0x196e <changeButtonPressState+0x86>
    197a:	d9 01       	movw	r26, r18
    197c:	c8 01       	movw	r24, r16
    197e:	80 95       	com	r24
    1980:	90 95       	com	r25
    1982:	a0 95       	com	r26
    1984:	b0 95       	com	r27
    1986:	40 91 9b 2b 	lds	r20, 0x2B9B
    198a:	50 91 9c 2b 	lds	r21, 0x2B9C
    198e:	60 91 9d 2b 	lds	r22, 0x2B9D
    1992:	70 91 9e 2b 	lds	r23, 0x2B9E
    1996:	84 23       	and	r24, r20
    1998:	95 23       	and	r25, r21
    199a:	a6 23       	and	r26, r22
    199c:	b7 23       	and	r27, r23
    199e:	80 93 9b 2b 	sts	0x2B9B, r24
    19a2:	90 93 9c 2b 	sts	0x2B9C, r25
    19a6:	a0 93 9d 2b 	sts	0x2B9D, r26
    19aa:	b0 93 9e 2b 	sts	0x2B9E, r27
    19ae:	64 c0       	rjmp	.+200    	; 0x1a78 <changeButtonPressState+0x190>
	}

	// Find all the pressed buttons (max 6):
	for (i = 0, count = 0; i < NUM_BUTTONS && count < MAX_SCANCODES; i++) {
		// Is this button pressed?
		if (pressed_buttons & (1ul<<i)) {
    19b0:	95 01       	movw	r18, r10
    19b2:	84 01       	movw	r16, r8
    19b4:	0e 2c       	mov	r0, r14
    19b6:	04 c0       	rjmp	.+8      	; 0x19c0 <changeButtonPressState+0xd8>
    19b8:	36 95       	lsr	r19
    19ba:	27 95       	ror	r18
    19bc:	17 95       	ror	r17
    19be:	07 95       	ror	r16
    19c0:	0a 94       	dec	r0
    19c2:	d2 f7       	brpl	.-12     	; 0x19b8 <changeButtonPressState+0xd0>
    19c4:	00 ff       	sbrs	r16, 0
    19c6:	29 c0       	rjmp	.+82     	; 0x1a1a <changeButtonPressState+0x132>
			// Get information about this button:
			this_button = &(my_cc->button_configs[i]);
    19c8:	87 01       	movw	r16, r14
    19ca:	00 0f       	add	r16, r16
    19cc:	11 1f       	adc	r17, r17
    19ce:	00 0f       	add	r16, r16
    19d0:	11 1f       	adc	r17, r17
    19d2:	00 0f       	add	r16, r16
    19d4:	11 1f       	adc	r17, r17
    19d6:	0e 0d       	add	r16, r14
    19d8:	1f 1d       	adc	r17, r15
    19da:	0f 5f       	subi	r16, 0xFF	; 255
    19dc:	1f 4f       	sbci	r17, 0xFF	; 255
    19de:	0c 0d       	add	r16, r12
    19e0:	1d 1d       	adc	r17, r13
			
			// Is it a keyboard button?
			if (this_button->keyboard_and_mouse.input_type == INPUT_TYPE_KEYBOARD) {
    19e2:	f8 01       	movw	r30, r16
    19e4:	81 81       	ldd	r24, Z+1	; 0x01
    19e6:	83 fd       	sbrc	r24, 3
    19e8:	18 c0       	rjmp	.+48     	; 0x1a1a <changeButtonPressState+0x132>
				// Does this button have a scancode associated with it?
				if (this_button->button_down.scan_code != 0) {
    19ea:	55 80       	ldd	r5, Z+5	; 0x05
    19ec:	55 20       	and	r5, r5
    19ee:	91 f0       	breq	.+36     	; 0x1a14 <changeButtonPressState+0x12c>
					// Is this a new scancode for the list?
					if (memchr(&scan_codes, this_button->button_down.scan_code, count) == NULL) {
    19f0:	47 2d       	mov	r20, r7
    19f2:	50 e0       	ldi	r21, 0x00	; 0
    19f4:	65 2d       	mov	r22, r5
    19f6:	70 e0       	ldi	r23, 0x00	; 0
    19f8:	ce 01       	movw	r24, r28
    19fa:	01 96       	adiw	r24, 0x01	; 1
    19fc:	0e 94 f2 24 	call	0x49e4	; 0x49e4 <memchr>
    1a00:	89 2b       	or	r24, r25
    1a02:	41 f4       	brne	.+16     	; 0x1a14 <changeButtonPressState+0x12c>
						// Then add it to the hid report:
						scan_codes[count] = this_button->button_down.scan_code;
    1a04:	e1 e0       	ldi	r30, 0x01	; 1
    1a06:	f0 e0       	ldi	r31, 0x00	; 0
    1a08:	ec 0f       	add	r30, r28
    1a0a:	fd 1f       	adc	r31, r29
    1a0c:	e7 0d       	add	r30, r7
    1a0e:	f1 1d       	adc	r31, r1
    1a10:	50 82       	st	Z, r5
						
						// Increment the count:
						count++;
    1a12:	73 94       	inc	r7
					}
				}
				
				// OR any modifiers for this button:
				modifiers |= this_button->button_down.modifier;
    1a14:	f8 01       	movw	r30, r16
    1a16:	84 81       	ldd	r24, Z+4	; 0x04
    1a18:	68 2a       	or	r6, r24
		// Clear the corresponding bit:
		pressed_buttons &= ~(1ul<<name);
	}

	// Find all the pressed buttons (max 6):
	for (i = 0, count = 0; i < NUM_BUTTONS && count < MAX_SCANCODES; i++) {
    1a1a:	fd e0       	ldi	r31, 0x0D	; 13
    1a1c:	ef 16       	cp	r14, r31
    1a1e:	f1 04       	cpc	r15, r1
    1a20:	31 f0       	breq	.+12     	; 0x1a2e <changeButtonPressState+0x146>
    1a22:	0f ef       	ldi	r16, 0xFF	; 255
    1a24:	e0 1a       	sub	r14, r16
    1a26:	f0 0a       	sbc	r15, r16
    1a28:	15 e0       	ldi	r17, 0x05	; 5
    1a2a:	17 15       	cp	r17, r7
    1a2c:	08 f6       	brcc	.-126    	; 0x19b0 <changeButtonPressState+0xc8>
			sendBTChar(0);
		}
	}
	
	#else
	sendBTString("BC:KR=A1,01,00,");
    1a2e:	8d e6       	ldi	r24, 0x6D	; 109
    1a30:	90 e2       	ldi	r25, 0x20	; 32
    1a32:	0e 94 0f 20 	call	0x401e	; 0x401e <sendBTString>
	// Send the modifiers:
	sendBTHexPair(modifiers);
    1a36:	86 2d       	mov	r24, r6
    1a38:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <sendBTHexPair>
    1a3c:	8e 01       	movw	r16, r28
    1a3e:	0f 5f       	subi	r16, 0xFF	; 255
    1a40:	1f 4f       	sbci	r17, 0xFF	; 255
	// send the 6 scan codes
	for (i=0;i < 6; i++) {
    1a42:	f1 2c       	mov	r15, r1
		sendBTChar(',');
    1a44:	8c e2       	ldi	r24, 0x2C	; 44
    1a46:	0e 94 02 20 	call	0x4004	; 0x4004 <sendBTChar>
		if (i < count) {
    1a4a:	f7 14       	cp	r15, r7
    1a4c:	28 f4       	brcc	.+10     	; 0x1a58 <changeButtonPressState+0x170>
			sendBTHexPair(scan_codes[i]);
    1a4e:	f8 01       	movw	r30, r16
    1a50:	80 81       	ld	r24, Z
    1a52:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <sendBTHexPair>
    1a56:	03 c0       	rjmp	.+6      	; 0x1a5e <changeButtonPressState+0x176>
		}
		// Otherwise send the no-keys-pressed event:
		else {
			// Send the no-keys-pressed event:
			sendBTHexPair(0);
    1a58:	80 e0       	ldi	r24, 0x00	; 0
    1a5a:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <sendBTHexPair>
	#else
	sendBTString("BC:KR=A1,01,00,");
	// Send the modifiers:
	sendBTHexPair(modifiers);
	// send the 6 scan codes
	for (i=0;i < 6; i++) {
    1a5e:	f3 94       	inc	r15
    1a60:	0f 5f       	subi	r16, 0xFF	; 255
    1a62:	1f 4f       	sbci	r17, 0xFF	; 255
    1a64:	f6 e0       	ldi	r31, 0x06	; 6
    1a66:	ff 12       	cpse	r15, r31
    1a68:	ed cf       	rjmp	.-38     	; 0x1a44 <changeButtonPressState+0x15c>
			// Send the no-keys-pressed event:
			sendBTHexPair(0);
		}
		
	}
	sendBTChar('\r');
    1a6a:	8d e0       	ldi	r24, 0x0D	; 13
    1a6c:	0e 94 02 20 	call	0x4004	; 0x4004 <sendBTChar>
	sendBTChar('\n');
    1a70:	8a e0       	ldi	r24, 0x0A	; 10
    1a72:	0e 94 02 20 	call	0x4004	; 0x4004 <sendBTChar>
    1a76:	11 c0       	rjmp	.+34     	; 0x1a9a <changeButtonPressState+0x1b2>
	}

	// Find all the pressed buttons (max 6):
	for (i = 0, count = 0; i < NUM_BUTTONS && count < MAX_SCANCODES; i++) {
		// Is this button pressed?
		if (pressed_buttons & (1ul<<i)) {
    1a78:	80 90 9b 2b 	lds	r8, 0x2B9B
    1a7c:	90 90 9c 2b 	lds	r9, 0x2B9C
    1a80:	a0 90 9d 2b 	lds	r10, 0x2B9D
    1a84:	b0 90 9e 2b 	lds	r11, 0x2B9E
			// Get information about this button:
			this_button = &(my_cc->button_configs[i]);
    1a88:	c0 90 99 2b 	lds	r12, 0x2B99
    1a8c:	d0 90 9a 2b 	lds	r13, 0x2B9A
    1a90:	e1 2c       	mov	r14, r1
    1a92:	f1 2c       	mov	r15, r1
    1a94:	71 2c       	mov	r7, r1
    1a96:	61 2c       	mov	r6, r1
    1a98:	8b cf       	rjmp	.-234    	; 0x19b0 <changeButtonPressState+0xc8>
		
	}
	sendBTChar('\r');
	sendBTChar('\n');
	#endif
    1a9a:	26 96       	adiw	r28, 0x06	; 6
    1a9c:	cd bf       	out	0x3d, r28	; 61
    1a9e:	de bf       	out	0x3e, r29	; 62
    1aa0:	df 91       	pop	r29
    1aa2:	cf 91       	pop	r28
    1aa4:	1f 91       	pop	r17
    1aa6:	0f 91       	pop	r16
    1aa8:	ff 90       	pop	r15
    1aaa:	ef 90       	pop	r14
    1aac:	df 90       	pop	r13
    1aae:	cf 90       	pop	r12
    1ab0:	bf 90       	pop	r11
    1ab2:	af 90       	pop	r10
    1ab4:	9f 90       	pop	r9
    1ab6:	8f 90       	pop	r8
    1ab8:	7f 90       	pop	r7
    1aba:	6f 90       	pop	r6
    1abc:	5f 90       	pop	r5
    1abe:	08 95       	ret

00001ac0 <keyboardButtonHandler>:
	my_cc = cc;
	BluetoothKeyboardMode();
}

void keyboardButtonHandler(enum ButtonName name, enum ButtonState state) {
	changeButtonPressState((uint8_t)name, state);
    1ac0:	13 cf       	rjmp	.-474    	; 0x18e8 <changeButtonPressState>
    1ac2:	08 95       	ret

00001ac4 <keyboardMouseInit>:

// External reference to system time
extern uint32_t getSystemTime(void);

void keyboardMouseInit(struct ControllerConfiguration *cc) {
	my_cc = cc;
    1ac4:	80 93 9f 2b 	sts	0x2B9F, r24
    1ac8:	90 93 a0 2b 	sts	0x2BA0, r25
	BluetoothComboMode();
    1acc:	0e 94 b5 20 	call	0x416a	; 0x416a <BluetoothComboMode>
	startTimeout(&mouse_timeout, MOUSE_REPORT_INTERVAL_MS);
    1ad0:	44 e1       	ldi	r20, 0x14	; 20
    1ad2:	50 e0       	ldi	r21, 0x00	; 0
    1ad4:	60 e0       	ldi	r22, 0x00	; 0
    1ad6:	70 e0       	ldi	r23, 0x00	; 0
    1ad8:	81 ea       	ldi	r24, 0xA1	; 161
    1ada:	9b e2       	ldi	r25, 0x2B	; 43
    1adc:	f0 c5       	rjmp	.+3040   	; 0x26be <startTimeout>

00001ade <changeButtonState>:
	*/
}

// Similar to keyboadMouseButtonHandler, but will handle
// both "enum ButtonName" and "enum JoystickButtonName".
void changeButtonState(uint8_t name, enum ButtonState state) {
    1ade:	3f 92       	push	r3
    1ae0:	4f 92       	push	r4
    1ae2:	5f 92       	push	r5
    1ae4:	6f 92       	push	r6
    1ae6:	7f 92       	push	r7
    1ae8:	8f 92       	push	r8
    1aea:	9f 92       	push	r9
    1aec:	af 92       	push	r10
    1aee:	bf 92       	push	r11
    1af0:	cf 92       	push	r12
    1af2:	df 92       	push	r13
    1af4:	ef 92       	push	r14
    1af6:	ff 92       	push	r15
    1af8:	0f 93       	push	r16
    1afa:	1f 93       	push	r17
    1afc:	cf 93       	push	r28
    1afe:	df 93       	push	r29
    1b00:	cd b7       	in	r28, 0x3d	; 61
    1b02:	de b7       	in	r29, 0x3e	; 62
    1b04:	62 97       	sbiw	r28, 0x12	; 18
    1b06:	cd bf       	out	0x3d, r28	; 61
    1b08:	de bf       	out	0x3e, r29	; 62
	struct ButtonConfiguration *this_button;
	struct HIDReport *this_joystick_button;
	uint8_t i;
	
	// Clear the mouse buttons:
	mouse_buttons = 0;
    1b0a:	10 92 af 2b 	sts	0x2BAF, r1
	
	if (state == BUTTON_PRESSED) {
    1b0e:	61 30       	cpi	r22, 0x01	; 1
    1b10:	21 f5       	brne	.+72     	; 0x1b5a <changeButtonState+0x7c>
		// Set the corresponding bit:
		pressed_buttons |= 1ul<<name;
    1b12:	41 e0       	ldi	r20, 0x01	; 1
    1b14:	50 e0       	ldi	r21, 0x00	; 0
    1b16:	60 e0       	ldi	r22, 0x00	; 0
    1b18:	70 e0       	ldi	r23, 0x00	; 0
    1b1a:	8a 01       	movw	r16, r20
    1b1c:	9b 01       	movw	r18, r22
    1b1e:	04 c0       	rjmp	.+8      	; 0x1b28 <changeButtonState+0x4a>
    1b20:	00 0f       	add	r16, r16
    1b22:	11 1f       	adc	r17, r17
    1b24:	22 1f       	adc	r18, r18
    1b26:	33 1f       	adc	r19, r19
    1b28:	8a 95       	dec	r24
    1b2a:	d2 f7       	brpl	.-12     	; 0x1b20 <changeButtonState+0x42>
    1b2c:	d9 01       	movw	r26, r18
    1b2e:	c8 01       	movw	r24, r16
    1b30:	40 91 b1 2b 	lds	r20, 0x2BB1
    1b34:	50 91 b2 2b 	lds	r21, 0x2BB2
    1b38:	60 91 b3 2b 	lds	r22, 0x2BB3
    1b3c:	70 91 b4 2b 	lds	r23, 0x2BB4
    1b40:	84 2b       	or	r24, r20
    1b42:	95 2b       	or	r25, r21
    1b44:	a6 2b       	or	r26, r22
    1b46:	b7 2b       	or	r27, r23
    1b48:	80 93 b1 2b 	sts	0x2BB1, r24
    1b4c:	90 93 b2 2b 	sts	0x2BB2, r25
    1b50:	a0 93 b3 2b 	sts	0x2BB3, r26
    1b54:	b0 93 b4 2b 	sts	0x2BB4, r27
    1b58:	04 c1       	rjmp	.+520    	; 0x1d62 <changeButtonState+0x284>
	}

	if (state == BUTTON_RELEASED) {
    1b5a:	61 11       	cpse	r22, r1
    1b5c:	02 c1       	rjmp	.+516    	; 0x1d62 <changeButtonState+0x284>
		// Clear the corresponding bit:
		pressed_buttons &= ~(1ul<<name);
    1b5e:	41 e0       	ldi	r20, 0x01	; 1
    1b60:	50 e0       	ldi	r21, 0x00	; 0
    1b62:	60 e0       	ldi	r22, 0x00	; 0
    1b64:	70 e0       	ldi	r23, 0x00	; 0
    1b66:	8a 01       	movw	r16, r20
    1b68:	9b 01       	movw	r18, r22
    1b6a:	04 c0       	rjmp	.+8      	; 0x1b74 <changeButtonState+0x96>
    1b6c:	00 0f       	add	r16, r16
    1b6e:	11 1f       	adc	r17, r17
    1b70:	22 1f       	adc	r18, r18
    1b72:	33 1f       	adc	r19, r19
    1b74:	8a 95       	dec	r24
    1b76:	d2 f7       	brpl	.-12     	; 0x1b6c <changeButtonState+0x8e>
    1b78:	d9 01       	movw	r26, r18
    1b7a:	c8 01       	movw	r24, r16
    1b7c:	80 95       	com	r24
    1b7e:	90 95       	com	r25
    1b80:	a0 95       	com	r26
    1b82:	b0 95       	com	r27
    1b84:	40 91 b1 2b 	lds	r20, 0x2BB1
    1b88:	50 91 b2 2b 	lds	r21, 0x2BB2
    1b8c:	60 91 b3 2b 	lds	r22, 0x2BB3
    1b90:	70 91 b4 2b 	lds	r23, 0x2BB4
    1b94:	84 23       	and	r24, r20
    1b96:	95 23       	and	r25, r21
    1b98:	a6 23       	and	r26, r22
    1b9a:	b7 23       	and	r27, r23
    1b9c:	80 93 b1 2b 	sts	0x2BB1, r24
    1ba0:	90 93 b2 2b 	sts	0x2BB2, r25
    1ba4:	a0 93 b3 2b 	sts	0x2BB3, r26
    1ba8:	b0 93 b4 2b 	sts	0x2BB4, r27
    1bac:	da c0       	rjmp	.+436    	; 0x1d62 <changeButtonState+0x284>
	}

	// Find all the pressed buttons (max 6):
	for (i = 0, count = 0; i < NUM_BUTTONS && count < MAX_SCANCODES; i++) {
		// Is this button pressed?
		if (pressed_buttons & (1ul<<i)) {
    1bae:	d3 01       	movw	r26, r6
    1bb0:	c2 01       	movw	r24, r4
    1bb2:	00 2e       	mov	r0, r16
    1bb4:	04 c0       	rjmp	.+8      	; 0x1bbe <changeButtonState+0xe0>
    1bb6:	b6 95       	lsr	r27
    1bb8:	a7 95       	ror	r26
    1bba:	97 95       	ror	r25
    1bbc:	87 95       	ror	r24
    1bbe:	0a 94       	dec	r0
    1bc0:	d2 f7       	brpl	.-12     	; 0x1bb6 <changeButtonState+0xd8>
    1bc2:	80 ff       	sbrs	r24, 0
    1bc4:	33 c0       	rjmp	.+102    	; 0x1c2c <changeButtonState+0x14e>
			// Get information about this button:
			this_button = &(my_cc->button_configs[i]);
    1bc6:	78 01       	movw	r14, r16
    1bc8:	ee 0c       	add	r14, r14
    1bca:	ff 1c       	adc	r15, r15
    1bcc:	ee 0c       	add	r14, r14
    1bce:	ff 1c       	adc	r15, r15
    1bd0:	ee 0c       	add	r14, r14
    1bd2:	ff 1c       	adc	r15, r15
    1bd4:	e0 0e       	add	r14, r16
    1bd6:	f1 1e       	adc	r15, r17
    1bd8:	2f ef       	ldi	r18, 0xFF	; 255
    1bda:	e2 1a       	sub	r14, r18
    1bdc:	f2 0a       	sbc	r15, r18
    1bde:	ec 0c       	add	r14, r12
    1be0:	fd 1c       	adc	r15, r13
			
			// Is it a keyboard button?
			if (this_button->keyboard_and_mouse.input_type == INPUT_TYPE_KEYBOARD) {
    1be2:	f7 01       	movw	r30, r14
    1be4:	81 81       	ldd	r24, Z+1	; 0x01
    1be6:	83 fd       	sbrc	r24, 3
    1be8:	19 c0       	rjmp	.+50     	; 0x1c1c <changeButtonState+0x13e>
				// Does this button have a scancode associated with it?
				if (this_button->button_down.scan_code != 0) {
    1bea:	b5 80       	ldd	r11, Z+5	; 0x05
    1bec:	bb 20       	and	r11, r11
    1bee:	91 f0       	breq	.+36     	; 0x1c14 <changeButtonState+0x136>
					// Is this a new scancode for the list?
					if (memchr(&scan_codes, this_button->button_down.scan_code, count) == NULL) {
    1bf0:	49 2d       	mov	r20, r9
    1bf2:	50 e0       	ldi	r21, 0x00	; 0
    1bf4:	6b 2d       	mov	r22, r11
    1bf6:	70 e0       	ldi	r23, 0x00	; 0
    1bf8:	ce 01       	movw	r24, r28
    1bfa:	01 96       	adiw	r24, 0x01	; 1
    1bfc:	0e 94 f2 24 	call	0x49e4	; 0x49e4 <memchr>
    1c00:	89 2b       	or	r24, r25
    1c02:	41 f4       	brne	.+16     	; 0x1c14 <changeButtonState+0x136>
						// Then add it to the hid report:
						scan_codes[count] = this_button->button_down.scan_code;
    1c04:	e1 e0       	ldi	r30, 0x01	; 1
    1c06:	f0 e0       	ldi	r31, 0x00	; 0
    1c08:	ec 0f       	add	r30, r28
    1c0a:	fd 1f       	adc	r31, r29
    1c0c:	e9 0d       	add	r30, r9
    1c0e:	f1 1d       	adc	r31, r1
    1c10:	b0 82       	st	Z, r11
			
						// Increment the count:
						count++;
    1c12:	93 94       	inc	r9
					}					
				}
			
				// OR any modifiers for this button:
				modifiers |= this_button->button_down.modifier;
    1c14:	f7 01       	movw	r30, r14
    1c16:	84 81       	ldd	r24, Z+4	; 0x04
    1c18:	88 2a       	or	r8, r24
    1c1a:	08 c0       	rjmp	.+16     	; 0x1c2c <changeButtonState+0x14e>
			}
			// Otherwise this must be a mouse button.
			else {
				// OR any mouse buttons together:
				mouse_buttons |= this_button->keyboard_and_mouse.mouse_buttons;
    1c1c:	f7 01       	movw	r30, r14
    1c1e:	81 81       	ldd	r24, Z+1	; 0x01
    1c20:	87 70       	andi	r24, 0x07	; 7
    1c22:	90 91 af 2b 	lds	r25, 0x2BAF
    1c26:	89 2b       	or	r24, r25
    1c28:	80 93 af 2b 	sts	0x2BAF, r24
		// Clear the corresponding bit:
		pressed_buttons &= ~(1ul<<name);
	}

	// Find all the pressed buttons (max 6):
	for (i = 0, count = 0; i < NUM_BUTTONS && count < MAX_SCANCODES; i++) {
    1c2c:	0d 30       	cpi	r16, 0x0D	; 13
    1c2e:	11 05       	cpc	r17, r1
    1c30:	09 f4       	brne	.+2      	; 0x1c34 <changeButtonState+0x156>
    1c32:	a8 c0       	rjmp	.+336    	; 0x1d84 <changeButtonState+0x2a6>
    1c34:	0f 5f       	subi	r16, 0xFF	; 255
    1c36:	1f 4f       	sbci	r17, 0xFF	; 255
    1c38:	f5 e0       	ldi	r31, 0x05	; 5
    1c3a:	f9 15       	cp	r31, r9
    1c3c:	08 f0       	brcs	.+2      	; 0x1c40 <changeButtonState+0x162>
    1c3e:	b7 cf       	rjmp	.-146    	; 0x1bae <changeButtonState+0xd0>
    1c40:	54 c0       	rjmp	.+168    	; 0x1cea <changeButtonState+0x20c>
	}
	
	// Find all the "pressed" joystick directions:
	for (i = NUM_BUTTONS; i < NUM_ALL_BUTTONS && count < MAX_SCANCODES; i++) {
		// Is this joystick direction pressed?
		if (pressed_buttons & (1ul<<i)) {
    1c42:	d3 01       	movw	r26, r6
    1c44:	c2 01       	movw	r24, r4
    1c46:	00 2e       	mov	r0, r16
    1c48:	04 c0       	rjmp	.+8      	; 0x1c52 <changeButtonState+0x174>
    1c4a:	b6 95       	lsr	r27
    1c4c:	a7 95       	ror	r26
    1c4e:	97 95       	ror	r25
    1c50:	87 95       	ror	r24
    1c52:	0a 94       	dec	r0
    1c54:	d2 f7       	brpl	.-12     	; 0x1c4a <changeButtonState+0x16c>
    1c56:	80 ff       	sbrs	r24, 0
    1c58:	3f c0       	rjmp	.+126    	; 0x1cd8 <changeButtonState+0x1fa>
			// Get information about this joystick direction:
			switch (i) {
    1c5a:	01 31       	cpi	r16, 0x11	; 17
    1c5c:	a9 f0       	breq	.+42     	; 0x1c88 <changeButtonState+0x1aa>
    1c5e:	30 f4       	brcc	.+12     	; 0x1c6c <changeButtonState+0x18e>
    1c60:	0f 30       	cpi	r16, 0x0F	; 15
    1c62:	61 f0       	breq	.+24     	; 0x1c7c <changeButtonState+0x19e>
    1c64:	70 f4       	brcc	.+28     	; 0x1c82 <changeButtonState+0x1a4>
    1c66:	0e 30       	cpi	r16, 0x0E	; 14
    1c68:	b9 f5       	brne	.+110    	; 0x1cd8 <changeButtonState+0x1fa>
    1c6a:	1b c0       	rjmp	.+54     	; 0x1ca2 <changeButtonState+0x1c4>
    1c6c:	03 31       	cpi	r16, 0x13	; 19
    1c6e:	89 f0       	breq	.+34     	; 0x1c92 <changeButtonState+0x1b4>
    1c70:	68 f0       	brcs	.+26     	; 0x1c8c <changeButtonState+0x1ae>
    1c72:	04 31       	cpi	r16, 0x14	; 20
    1c74:	81 f0       	breq	.+32     	; 0x1c96 <changeButtonState+0x1b8>
    1c76:	05 31       	cpi	r16, 0x15	; 21
    1c78:	79 f5       	brne	.+94     	; 0x1cd8 <changeButtonState+0x1fa>
    1c7a:	10 c0       	rjmp	.+32     	; 0x1c9c <changeButtonState+0x1be>
				case B_JOYSTICK_LEFT_UP:
					this_joystick_button = &(my_cc->joystick_configs[JOYSTICK_LEFT].button_up);
					break;
				case B_JOYSTICK_LEFT_DOWN:
					this_joystick_button = &(my_cc->joystick_configs[JOYSTICK_LEFT].button_down);
    1c7c:	ed 84       	ldd	r14, Y+13	; 0x0d
    1c7e:	fe 84       	ldd	r15, Y+14	; 0x0e
					break;
    1c80:	12 c0       	rjmp	.+36     	; 0x1ca6 <changeButtonState+0x1c8>
				case B_JOYSTICK_LEFT_LEFT:
					this_joystick_button = &(my_cc->joystick_configs[JOYSTICK_LEFT].button_left);
    1c82:	ef 84       	ldd	r14, Y+15	; 0x0f
    1c84:	f8 88       	ldd	r15, Y+16	; 0x10
					break;
    1c86:	0f c0       	rjmp	.+30     	; 0x1ca6 <changeButtonState+0x1c8>
				case B_JOYSTICK_LEFT_RIGHT:
					this_joystick_button = &(my_cc->joystick_configs[JOYSTICK_LEFT].button_right);
    1c88:	75 01       	movw	r14, r10
					break;
    1c8a:	0d c0       	rjmp	.+26     	; 0x1ca6 <changeButtonState+0x1c8>
				case B_JOYSTICK_RIGHT_UP:
					this_joystick_button = &(my_cc->joystick_configs[JOYSTICK_RIGHT].button_up);
    1c8c:	ef 80       	ldd	r14, Y+7	; 0x07
    1c8e:	f8 84       	ldd	r15, Y+8	; 0x08
					break;
    1c90:	0a c0       	rjmp	.+20     	; 0x1ca6 <changeButtonState+0x1c8>
				case B_JOYSTICK_RIGHT_DOWN:
					this_joystick_button = &(my_cc->joystick_configs[JOYSTICK_RIGHT].button_down);
    1c92:	76 01       	movw	r14, r12
					break;
    1c94:	08 c0       	rjmp	.+16     	; 0x1ca6 <changeButtonState+0x1c8>
				case B_JOYSTICK_RIGHT_LEFT:
					this_joystick_button = &(my_cc->joystick_configs[JOYSTICK_RIGHT].button_left);
    1c96:	e9 84       	ldd	r14, Y+9	; 0x09
    1c98:	fa 84       	ldd	r15, Y+10	; 0x0a
					break;
    1c9a:	05 c0       	rjmp	.+10     	; 0x1ca6 <changeButtonState+0x1c8>
				case B_JOYSTICK_RIGHT_RIGHT:
					this_joystick_button = &(my_cc->joystick_configs[JOYSTICK_RIGHT].button_right);
    1c9c:	eb 84       	ldd	r14, Y+11	; 0x0b
    1c9e:	fc 84       	ldd	r15, Y+12	; 0x0c
					break;
    1ca0:	02 c0       	rjmp	.+4      	; 0x1ca6 <changeButtonState+0x1c8>
		// Is this joystick direction pressed?
		if (pressed_buttons & (1ul<<i)) {
			// Get information about this joystick direction:
			switch (i) {
				case B_JOYSTICK_LEFT_UP:
					this_joystick_button = &(my_cc->joystick_configs[JOYSTICK_LEFT].button_up);
    1ca2:	e9 88       	ldd	r14, Y+17	; 0x11
    1ca4:	fa 88       	ldd	r15, Y+18	; 0x12
				default:
					continue;
			};
			
			// Is there a button press associated with this direction?
			if (this_joystick_button->scan_code != 0) {
    1ca6:	f7 01       	movw	r30, r14
    1ca8:	31 80       	ldd	r3, Z+1	; 0x01
    1caa:	33 20       	and	r3, r3
    1cac:	91 f0       	breq	.+36     	; 0x1cd2 <changeButtonState+0x1f4>
				// Is this a new scancode for the list?
				if (memchr(scan_codes, this_joystick_button->scan_code, count) == NULL) {
    1cae:	49 2d       	mov	r20, r9
    1cb0:	50 e0       	ldi	r21, 0x00	; 0
    1cb2:	63 2d       	mov	r22, r3
    1cb4:	70 e0       	ldi	r23, 0x00	; 0
    1cb6:	ce 01       	movw	r24, r28
    1cb8:	01 96       	adiw	r24, 0x01	; 1
    1cba:	0e 94 f2 24 	call	0x49e4	; 0x49e4 <memchr>
    1cbe:	89 2b       	or	r24, r25
    1cc0:	41 f4       	brne	.+16     	; 0x1cd2 <changeButtonState+0x1f4>
					// Then add it to the hid report:
					scan_codes[count] = this_joystick_button->scan_code;
    1cc2:	e1 e0       	ldi	r30, 0x01	; 1
    1cc4:	f0 e0       	ldi	r31, 0x00	; 0
    1cc6:	ec 0f       	add	r30, r28
    1cc8:	fd 1f       	adc	r31, r29
    1cca:	e9 0d       	add	r30, r9
    1ccc:	f1 1d       	adc	r31, r1
    1cce:	30 82       	st	Z, r3
					
					// Increment the count:
					count++;
    1cd0:	93 94       	inc	r9
				}					
			}
			
			// OR any modifiers for this button:
			modifiers |= this_joystick_button->modifier;
    1cd2:	f7 01       	movw	r30, r14
    1cd4:	80 81       	ld	r24, Z
    1cd6:	88 2a       	or	r8, r24
			}				
		}
	}
	
	// Find all the "pressed" joystick directions:
	for (i = NUM_BUTTONS; i < NUM_ALL_BUTTONS && count < MAX_SCANCODES; i++) {
    1cd8:	05 31       	cpi	r16, 0x15	; 21
    1cda:	11 05       	cpc	r17, r1
    1cdc:	31 f0       	breq	.+12     	; 0x1cea <changeButtonState+0x20c>
    1cde:	0f 5f       	subi	r16, 0xFF	; 255
    1ce0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ce2:	f5 e0       	ldi	r31, 0x05	; 5
    1ce4:	f9 15       	cp	r31, r9
    1ce6:	08 f0       	brcs	.+2      	; 0x1cea <changeButtonState+0x20c>
    1ce8:	ac cf       	rjmp	.-168    	; 0x1c42 <changeButtonState+0x164>
		}			
	}
	sendDBGLine("");
*/
	{
		sendDBGString("Scancodes: ");
    1cea:	8a e3       	ldi	r24, 0x3A	; 58
    1cec:	91 e2       	ldi	r25, 0x21	; 33
    1cee:	1f d2       	rcall	.+1086   	; 0x212e <sendDBGString>
		for (i = 0; i < count; i++) {
    1cf0:	99 20       	and	r9, r9
    1cf2:	79 f0       	breq	.+30     	; 0x1d12 <changeButtonState+0x234>
    1cf4:	ee 24       	eor	r14, r14
    1cf6:	e3 94       	inc	r14
    1cf8:	f1 2c       	mov	r15, r1
    1cfa:	ec 0e       	add	r14, r28
    1cfc:	fd 1e       	adc	r15, r29
    1cfe:	87 01       	movw	r16, r14
			sendDBGChar(scan_codes[i] - 4 + 'a');
    1d00:	f8 01       	movw	r30, r16
    1d02:	81 91       	ld	r24, Z+
    1d04:	8f 01       	movw	r16, r30
    1d06:	83 5a       	subi	r24, 0xA3	; 163
    1d08:	0d d2       	rcall	.+1050   	; 0x2124 <sendDBGChar>
	}
	sendDBGLine("");
*/
	{
		sendDBGString("Scancodes: ");
		for (i = 0; i < count; i++) {
    1d0a:	80 2f       	mov	r24, r16
    1d0c:	8e 19       	sub	r24, r14
    1d0e:	89 15       	cp	r24, r9
    1d10:	b8 f3       	brcs	.-18     	; 0x1d00 <changeButtonState+0x222>
			sendDBGChar(scan_codes[i] - 4 + 'a');
		}
		sendDBGLine("");
    1d12:	81 e3       	ldi	r24, 0x31	; 49
    1d14:	9a e2       	ldi	r25, 0x2A	; 42
    1d16:	19 d2       	rcall	.+1074   	; 0x214a <sendDBGLine>
			sendBTChar(0);
		}
	}
	
#else
	sendBTString("BC:KR=A1,01,00,");
    1d18:	8d e6       	ldi	r24, 0x6D	; 109
    1d1a:	90 e2       	ldi	r25, 0x20	; 32
    1d1c:	0e 94 0f 20 	call	0x401e	; 0x401e <sendBTString>
	// Send the modifiers:
	sendBTHexPair(modifiers);
    1d20:	88 2d       	mov	r24, r8
    1d22:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <sendBTHexPair>
    1d26:	8e 01       	movw	r16, r28
    1d28:	0f 5f       	subi	r16, 0xFF	; 255
    1d2a:	1f 4f       	sbci	r17, 0xFF	; 255
	// send the 6 scan codes
	for (i=0;i < 6; i++) {
    1d2c:	f1 2c       	mov	r15, r1
		sendBTChar(',');
    1d2e:	8c e2       	ldi	r24, 0x2C	; 44
    1d30:	0e 94 02 20 	call	0x4004	; 0x4004 <sendBTChar>
		if (i < count) {
    1d34:	f9 14       	cp	r15, r9
    1d36:	28 f4       	brcc	.+10     	; 0x1d42 <changeButtonState+0x264>
			sendBTHexPair(scan_codes[i]);
    1d38:	f8 01       	movw	r30, r16
    1d3a:	80 81       	ld	r24, Z
    1d3c:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <sendBTHexPair>
    1d40:	03 c0       	rjmp	.+6      	; 0x1d48 <changeButtonState+0x26a>
		}
		// Otherwise send the no-keys-pressed event:
		else {
			// Send the no-keys-pressed event:
			sendBTHexPair(0);
    1d42:	80 e0       	ldi	r24, 0x00	; 0
    1d44:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <sendBTHexPair>
#else
	sendBTString("BC:KR=A1,01,00,");
	// Send the modifiers:
	sendBTHexPair(modifiers);
	// send the 6 scan codes
	for (i=0;i < 6; i++) {
    1d48:	f3 94       	inc	r15
    1d4a:	0f 5f       	subi	r16, 0xFF	; 255
    1d4c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d4e:	f6 e0       	ldi	r31, 0x06	; 6
    1d50:	ff 12       	cpse	r15, r31
    1d52:	ed cf       	rjmp	.-38     	; 0x1d2e <changeButtonState+0x250>
			// Send the no-keys-pressed event:
			sendBTHexPair(0);
		}
	
	}
	sendBTChar('\r');
    1d54:	8d e0       	ldi	r24, 0x0D	; 13
    1d56:	0e 94 02 20 	call	0x4004	; 0x4004 <sendBTChar>
	sendBTChar('\n');
    1d5a:	8a e0       	ldi	r24, 0x0A	; 10
    1d5c:	0e 94 02 20 	call	0x4004	; 0x4004 <sendBTChar>
    1d60:	50 c0       	rjmp	.+160    	; 0x1e02 <changeButtonState+0x324>
	}

	// Find all the pressed buttons (max 6):
	for (i = 0, count = 0; i < NUM_BUTTONS && count < MAX_SCANCODES; i++) {
		// Is this button pressed?
		if (pressed_buttons & (1ul<<i)) {
    1d62:	40 90 b1 2b 	lds	r4, 0x2BB1
    1d66:	50 90 b2 2b 	lds	r5, 0x2BB2
    1d6a:	60 90 b3 2b 	lds	r6, 0x2BB3
    1d6e:	70 90 b4 2b 	lds	r7, 0x2BB4
			// Get information about this button:
			this_button = &(my_cc->button_configs[i]);
    1d72:	c0 90 9f 2b 	lds	r12, 0x2B9F
    1d76:	d0 90 a0 2b 	lds	r13, 0x2BA0
    1d7a:	00 e0       	ldi	r16, 0x00	; 0
    1d7c:	10 e0       	ldi	r17, 0x00	; 0
    1d7e:	91 2c       	mov	r9, r1
    1d80:	81 2c       	mov	r8, r1
    1d82:	15 cf       	rjmp	.-470    	; 0x1bae <changeButtonState+0xd0>
			}				
		}
	}
	
	// Find all the "pressed" joystick directions:
	for (i = NUM_BUTTONS; i < NUM_ALL_BUTTONS && count < MAX_SCANCODES; i++) {
    1d84:	05 e0       	ldi	r16, 0x05	; 5
    1d86:	09 15       	cp	r16, r9
    1d88:	08 f4       	brcc	.+2      	; 0x1d8c <changeButtonState+0x2ae>
    1d8a:	af cf       	rjmp	.-162    	; 0x1cea <changeButtonState+0x20c>
		// Is this joystick direction pressed?
		if (pressed_buttons & (1ul<<i)) {
    1d8c:	40 90 b1 2b 	lds	r4, 0x2BB1
    1d90:	50 90 b2 2b 	lds	r5, 0x2BB2
    1d94:	60 90 b3 2b 	lds	r6, 0x2BB3
    1d98:	70 90 b4 2b 	lds	r7, 0x2BB4
			// Get information about this joystick direction:
			switch (i) {
				case B_JOYSTICK_LEFT_UP:
					this_joystick_button = &(my_cc->joystick_configs[JOYSTICK_LEFT].button_up);
    1d9c:	80 91 9f 2b 	lds	r24, 0x2B9F
    1da0:	90 91 a0 2b 	lds	r25, 0x2BA0
					break;
				case B_JOYSTICK_RIGHT_LEFT:
					this_joystick_button = &(my_cc->joystick_configs[JOYSTICK_RIGHT].button_left);
					break;
				case B_JOYSTICK_RIGHT_RIGHT:
					this_joystick_button = &(my_cc->joystick_configs[JOYSTICK_RIGHT].button_right);
    1da4:	0e e0       	ldi	r16, 0x0E	; 14
    1da6:	10 e0       	ldi	r17, 0x00	; 0
					break;
				case B_JOYSTICK_LEFT_LEFT:
					this_joystick_button = &(my_cc->joystick_configs[JOYSTICK_LEFT].button_left);
					break;
				case B_JOYSTICK_LEFT_RIGHT:
					this_joystick_button = &(my_cc->joystick_configs[JOYSTICK_LEFT].button_right);
    1da8:	0f 2e       	mov	r0, r31
    1daa:	f7 e8       	ldi	r31, 0x87	; 135
    1dac:	af 2e       	mov	r10, r31
    1dae:	b1 2c       	mov	r11, r1
    1db0:	f0 2d       	mov	r31, r0
    1db2:	a8 0e       	add	r10, r24
    1db4:	b9 1e       	adc	r11, r25
					break;
				case B_JOYSTICK_RIGHT_UP:
					this_joystick_button = &(my_cc->joystick_configs[JOYSTICK_RIGHT].button_up);
					break;
				case B_JOYSTICK_RIGHT_DOWN:
					this_joystick_button = &(my_cc->joystick_configs[JOYSTICK_RIGHT].button_down);
    1db6:	0f 2e       	mov	r0, r31
    1db8:	f9 e9       	ldi	r31, 0x99	; 153
    1dba:	cf 2e       	mov	r12, r31
    1dbc:	d1 2c       	mov	r13, r1
    1dbe:	f0 2d       	mov	r31, r0
    1dc0:	c8 0e       	add	r12, r24
    1dc2:	d9 1e       	adc	r13, r25
					break;
				case B_JOYSTICK_LEFT_RIGHT:
					this_joystick_button = &(my_cc->joystick_configs[JOYSTICK_LEFT].button_right);
					break;
				case B_JOYSTICK_RIGHT_UP:
					this_joystick_button = &(my_cc->joystick_configs[JOYSTICK_RIGHT].button_up);
    1dc4:	9c 01       	movw	r18, r24
    1dc6:	29 56       	subi	r18, 0x69	; 105
    1dc8:	3f 4f       	sbci	r19, 0xFF	; 255
    1dca:	2f 83       	std	Y+7, r18	; 0x07
    1dcc:	38 87       	std	Y+8, r19	; 0x08
					break;
				case B_JOYSTICK_RIGHT_DOWN:
					this_joystick_button = &(my_cc->joystick_configs[JOYSTICK_RIGHT].button_down);
					break;
				case B_JOYSTICK_RIGHT_LEFT:
					this_joystick_button = &(my_cc->joystick_configs[JOYSTICK_RIGHT].button_left);
    1dce:	fc 01       	movw	r30, r24
    1dd0:	e5 56       	subi	r30, 0x65	; 101
    1dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd4:	e9 87       	std	Y+9, r30	; 0x09
    1dd6:	fa 87       	std	Y+10, r31	; 0x0a
					break;
				case B_JOYSTICK_RIGHT_RIGHT:
					this_joystick_button = &(my_cc->joystick_configs[JOYSTICK_RIGHT].button_right);
    1dd8:	9c 01       	movw	r18, r24
    1dda:	23 56       	subi	r18, 0x63	; 99
    1ddc:	3f 4f       	sbci	r19, 0xFF	; 255
    1dde:	2b 87       	std	Y+11, r18	; 0x0b
    1de0:	3c 87       	std	Y+12, r19	; 0x0c
			switch (i) {
				case B_JOYSTICK_LEFT_UP:
					this_joystick_button = &(my_cc->joystick_configs[JOYSTICK_LEFT].button_up);
					break;
				case B_JOYSTICK_LEFT_DOWN:
					this_joystick_button = &(my_cc->joystick_configs[JOYSTICK_LEFT].button_down);
    1de2:	fc 01       	movw	r30, r24
    1de4:	ed 57       	subi	r30, 0x7D	; 125
    1de6:	ff 4f       	sbci	r31, 0xFF	; 255
    1de8:	ed 87       	std	Y+13, r30	; 0x0d
    1dea:	fe 87       	std	Y+14, r31	; 0x0e
					break;
				case B_JOYSTICK_LEFT_LEFT:
					this_joystick_button = &(my_cc->joystick_configs[JOYSTICK_LEFT].button_left);
    1dec:	9c 01       	movw	r18, r24
    1dee:	2b 57       	subi	r18, 0x7B	; 123
    1df0:	3f 4f       	sbci	r19, 0xFF	; 255
    1df2:	2f 87       	std	Y+15, r18	; 0x0f
    1df4:	38 8b       	std	Y+16, r19	; 0x10
		// Is this joystick direction pressed?
		if (pressed_buttons & (1ul<<i)) {
			// Get information about this joystick direction:
			switch (i) {
				case B_JOYSTICK_LEFT_UP:
					this_joystick_button = &(my_cc->joystick_configs[JOYSTICK_LEFT].button_up);
    1df6:	fc 01       	movw	r30, r24
    1df8:	ef 57       	subi	r30, 0x7F	; 127
    1dfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfc:	e9 8b       	std	Y+17, r30	; 0x11
    1dfe:	fa 8b       	std	Y+18, r31	; 0x12
    1e00:	20 cf       	rjmp	.-448    	; 0x1c42 <changeButtonState+0x164>
	
	}
	sendBTChar('\r');
	sendBTChar('\n');
#endif	
}
    1e02:	62 96       	adiw	r28, 0x12	; 18
    1e04:	cd bf       	out	0x3d, r28	; 61
    1e06:	de bf       	out	0x3e, r29	; 62
    1e08:	df 91       	pop	r29
    1e0a:	cf 91       	pop	r28
    1e0c:	1f 91       	pop	r17
    1e0e:	0f 91       	pop	r16
    1e10:	ff 90       	pop	r15
    1e12:	ef 90       	pop	r14
    1e14:	df 90       	pop	r13
    1e16:	cf 90       	pop	r12
    1e18:	bf 90       	pop	r11
    1e1a:	af 90       	pop	r10
    1e1c:	9f 90       	pop	r9
    1e1e:	8f 90       	pop	r8
    1e20:	7f 90       	pop	r7
    1e22:	6f 90       	pop	r6
    1e24:	5f 90       	pop	r5
    1e26:	4f 90       	pop	r4
    1e28:	3f 90       	pop	r3
    1e2a:	08 95       	ret

00001e2c <keyboardMouseJoystickHandler>:

void keyboadMouseButtonHandler(enum ButtonName name, enum ButtonState state) {
	changeButtonState((uint8_t)name, state);
}

void keyboardMouseJoystickHandler(enum JoystickName name, int16_t x, int16_t y) {
    1e2c:	df 92       	push	r13
    1e2e:	ef 92       	push	r14
    1e30:	ff 92       	push	r15
    1e32:	0f 93       	push	r16
    1e34:	1f 93       	push	r17
    1e36:	cf 93       	push	r28
    1e38:	df 93       	push	r29
    1e3a:	7a 01       	movw	r14, r20
	uint8_t joystick_button_base;
	int16_t x_center, y_center;
	uint8_t mouseTmp;

	// Get information about this joystick:
	this_joystick = &(my_cc->joystick_configs[name]);
    1e3c:	08 2f       	mov	r16, r24
    1e3e:	10 e0       	ldi	r17, 0x00	; 0
    1e40:	36 e1       	ldi	r19, 0x16	; 22
    1e42:	83 9f       	mul	r24, r19
    1e44:	e0 01       	movw	r28, r0
    1e46:	11 24       	eor	r1, r1
    1e48:	c1 58       	subi	r28, 0x81	; 129
    1e4a:	df 4f       	sbci	r29, 0xFF	; 255
    1e4c:	20 91 9f 2b 	lds	r18, 0x2B9F
    1e50:	30 91 a0 2b 	lds	r19, 0x2BA0
    1e54:	c2 0f       	add	r28, r18
    1e56:	d3 1f       	adc	r29, r19

	// Get the base index for these joystick buttons:	
	joystick_button_base = NUM_BUTTONS + 4 * name;
	
	// Find the center locations of the joysticks:
	x_center = joysticks[name].center_x;
    1e58:	98 01       	movw	r18, r16
    1e5a:	22 0f       	add	r18, r18
    1e5c:	33 1f       	adc	r19, r19
    1e5e:	f9 01       	movw	r30, r18
    1e60:	ee 0f       	add	r30, r30
    1e62:	ff 1f       	adc	r31, r31
    1e64:	ee 0f       	add	r30, r30
    1e66:	ff 1f       	adc	r31, r31
    1e68:	ee 0f       	add	r30, r30
    1e6a:	ff 1f       	adc	r31, r31
    1e6c:	e2 1b       	sub	r30, r18
    1e6e:	f3 0b       	sbc	r31, r19
    1e70:	e8 5c       	subi	r30, 0xC8	; 200
    1e72:	ff 4d       	sbci	r31, 0xDF	; 223
    1e74:	32 81       	ldd	r19, Z+2	; 0x02
    1e76:	23 81       	ldd	r18, Z+3	; 0x03
	y_center = joysticks[name].center_y;
    1e78:	a4 81       	ldd	r26, Z+4	; 0x04
    1e7a:	e5 81       	ldd	r30, Z+5	; 0x05
	}
*/
#endif

	// Is this joystick analog?
	if (this_joystick->config.button_type == BUTTON_TYPE_ANALOG) {
    1e7c:	98 81       	ld	r25, Y
    1e7e:	96 fd       	sbrc	r25, 6
    1e80:	52 c0       	rjmp	.+164    	; 0x1f26 <keyboardMouseJoystickHandler+0xfa>

	// Get the base index for these joystick buttons:	
	joystick_button_base = NUM_BUTTONS + 4 * name;
	
	// Find the center locations of the joysticks:
	x_center = joysticks[name].center_x;
    1e82:	83 2f       	mov	r24, r19
    1e84:	92 2f       	mov	r25, r18
#endif

	// Is this joystick analog?
	if (this_joystick->config.button_type == BUTTON_TYPE_ANALOG) {
		// Check the X axis:
		if (x < (x_center - this_joystick->x_deadzone)) { // Left
    1e86:	2a 89       	ldd	r18, Y+18	; 0x12
    1e88:	3b 89       	ldd	r19, Y+19	; 0x13
    1e8a:	ac 01       	movw	r20, r24
    1e8c:	42 1b       	sub	r20, r18
    1e8e:	53 0b       	sbc	r21, r19
    1e90:	64 17       	cp	r22, r20
    1e92:	75 07       	cpc	r23, r21
    1e94:	74 f4       	brge	.+28     	; 0x1eb2 <keyboardMouseJoystickHandler+0x86>
			mouse_x += (x - (x_center - this_joystick->x_deadzone)) / MOUSE_RESOLUTION;
    1e96:	28 1b       	sub	r18, r24
    1e98:	39 0b       	sbc	r19, r25
    1e9a:	62 0f       	add	r22, r18
    1e9c:	73 1f       	adc	r23, r19
    1e9e:	77 23       	and	r23, r23
    1ea0:	14 f4       	brge	.+4      	; 0x1ea6 <keyboardMouseJoystickHandler+0x7a>
    1ea2:	61 50       	subi	r22, 0x01	; 1
    1ea4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ea6:	80 91 a9 2b 	lds	r24, 0x2BA9
    1eaa:	87 0f       	add	r24, r23
    1eac:	80 93 a9 2b 	sts	0x2BA9, r24
    1eb0:	0f c0       	rjmp	.+30     	; 0x1ed0 <keyboardMouseJoystickHandler+0xa4>
		}
		else if (x > (x_center + this_joystick->x_deadzone)) { // Right
    1eb2:	82 0f       	add	r24, r18
    1eb4:	93 1f       	adc	r25, r19
    1eb6:	86 17       	cp	r24, r22
    1eb8:	97 07       	cpc	r25, r23
    1eba:	54 f4       	brge	.+20     	; 0x1ed0 <keyboardMouseJoystickHandler+0xa4>
			mouse_x += (x - (x_center + this_joystick->x_deadzone)) / MOUSE_RESOLUTION;
    1ebc:	68 1b       	sub	r22, r24
    1ebe:	79 0b       	sbc	r23, r25
    1ec0:	12 f4       	brpl	.+4      	; 0x1ec6 <keyboardMouseJoystickHandler+0x9a>
    1ec2:	61 50       	subi	r22, 0x01	; 1
    1ec4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ec6:	80 91 a9 2b 	lds	r24, 0x2BA9
    1eca:	87 0f       	add	r24, r23
    1ecc:	80 93 a9 2b 	sts	0x2BA9, r24
	// Get the base index for these joystick buttons:	
	joystick_button_base = NUM_BUTTONS + 4 * name;
	
	// Find the center locations of the joysticks:
	x_center = joysticks[name].center_x;
	y_center = joysticks[name].center_y;
    1ed0:	8a 2f       	mov	r24, r26
    1ed2:	9e 2f       	mov	r25, r30
		else if (x > (x_center + this_joystick->x_deadzone)) { // Right
			mouse_x += (x - (x_center + this_joystick->x_deadzone)) / MOUSE_RESOLUTION;
		}
		
		// Check the Y axis:
		if (y < (y_center - this_joystick->y_deadzone)) { // Up
    1ed4:	2c 89       	ldd	r18, Y+20	; 0x14
    1ed6:	3d 89       	ldd	r19, Y+21	; 0x15
    1ed8:	ac 01       	movw	r20, r24
    1eda:	42 1b       	sub	r20, r18
    1edc:	53 0b       	sbc	r21, r19
    1ede:	e4 16       	cp	r14, r20
    1ee0:	f5 06       	cpc	r15, r21
    1ee2:	7c f4       	brge	.+30     	; 0x1f02 <keyboardMouseJoystickHandler+0xd6>
			mouse_y += (y - (y_center - this_joystick->y_deadzone)) / MOUSE_RESOLUTION;
    1ee4:	28 1b       	sub	r18, r24
    1ee6:	39 0b       	sbc	r19, r25
    1ee8:	e2 0e       	add	r14, r18
    1eea:	f3 1e       	adc	r15, r19
    1eec:	ff 20       	and	r15, r15
    1eee:	1c f4       	brge	.+6      	; 0x1ef6 <keyboardMouseJoystickHandler+0xca>
    1ef0:	8f ef       	ldi	r24, 0xFF	; 255
    1ef2:	e8 0e       	add	r14, r24
    1ef4:	f1 1c       	adc	r15, r1
    1ef6:	80 91 aa 2b 	lds	r24, 0x2BAA
    1efa:	8f 0d       	add	r24, r15
    1efc:	80 93 aa 2b 	sts	0x2BAA, r24
    1f00:	a9 c0       	rjmp	.+338    	; 0x2054 <keyboardMouseJoystickHandler+0x228>
		}
		else if (y > (y_center + this_joystick->y_deadzone)) { // Down
    1f02:	82 0f       	add	r24, r18
    1f04:	93 1f       	adc	r25, r19
    1f06:	8e 15       	cp	r24, r14
    1f08:	9f 05       	cpc	r25, r15
    1f0a:	0c f0       	brlt	.+2      	; 0x1f0e <keyboardMouseJoystickHandler+0xe2>
    1f0c:	a3 c0       	rjmp	.+326    	; 0x2054 <keyboardMouseJoystickHandler+0x228>
			mouse_y += (y - (y_center + this_joystick->y_deadzone)) / MOUSE_RESOLUTION;
    1f0e:	e8 1a       	sub	r14, r24
    1f10:	f9 0a       	sbc	r15, r25
    1f12:	1a f4       	brpl	.+6      	; 0x1f1a <keyboardMouseJoystickHandler+0xee>
    1f14:	9f ef       	ldi	r25, 0xFF	; 255
    1f16:	e9 0e       	add	r14, r25
    1f18:	f1 1c       	adc	r15, r1
    1f1a:	80 91 aa 2b 	lds	r24, 0x2BAA
    1f1e:	8f 0d       	add	r24, r15
    1f20:	80 93 aa 2b 	sts	0x2BAA, r24
    1f24:	97 c0       	rjmp	.+302    	; 0x2054 <keyboardMouseJoystickHandler+0x228>

	// Get information about this joystick:
	this_joystick = &(my_cc->joystick_configs[name]);

	// Get the base index for these joystick buttons:	
	joystick_button_base = NUM_BUTTONS + 4 * name;
    1f26:	d8 2e       	mov	r13, r24
    1f28:	dd 0c       	add	r13, r13
    1f2a:	dd 0c       	add	r13, r13
		}
	}
	// Otherwise it must be a digital joystick.
	else {
		// Check the X axis:
		switch (state_x[name]) {
    1f2c:	f8 01       	movw	r30, r16
    1f2e:	e5 55       	subi	r30, 0x55	; 85
    1f30:	f4 4d       	sbci	r31, 0xD4	; 212
    1f32:	80 81       	ld	r24, Z
    1f34:	83 30       	cpi	r24, 0x03	; 3
    1f36:	99 f1       	breq	.+102    	; 0x1f9e <keyboardMouseJoystickHandler+0x172>
    1f38:	84 30       	cpi	r24, 0x04	; 4
    1f3a:	21 f0       	breq	.+8      	; 0x1f44 <keyboardMouseJoystickHandler+0x118>
    1f3c:	82 30       	cpi	r24, 0x02	; 2
    1f3e:	09 f0       	breq	.+2      	; 0x1f42 <keyboardMouseJoystickHandler+0x116>
    1f40:	3d c0       	rjmp	.+122    	; 0x1fbc <keyboardMouseJoystickHandler+0x190>
    1f42:	1e c0       	rjmp	.+60     	; 0x1f80 <keyboardMouseJoystickHandler+0x154>
			case JBSTATE_IDLE:
				// Do we need to enter the left state?
				if (x < this_joystick->x_min) {
    1f44:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f46:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f48:	68 17       	cp	r22, r24
    1f4a:	79 07       	cpc	r23, r25
    1f4c:	54 f4       	brge	.+20     	; 0x1f62 <keyboardMouseJoystickHandler+0x136>
					state_x[name] = JBSTATE_LEFT;
    1f4e:	f8 01       	movw	r30, r16
    1f50:	e5 55       	subi	r30, 0x55	; 85
    1f52:	f4 4d       	sbci	r31, 0xD4	; 212
    1f54:	82 e0       	ldi	r24, 0x02	; 2
    1f56:	80 83       	st	Z, r24
					changeButtonState(joystick_button_base + JBSTATE_LEFT, BUTTON_PRESSED);
    1f58:	61 e0       	ldi	r22, 0x01	; 1
    1f5a:	8d 2d       	mov	r24, r13
    1f5c:	80 5f       	subi	r24, 0xF0	; 240
    1f5e:	bf dd       	rcall	.-1154   	; 0x1ade <changeButtonState>
    1f60:	32 c0       	rjmp	.+100    	; 0x1fc6 <keyboardMouseJoystickHandler+0x19a>
				}
				// Do we need to enter the right state?
				else if (x > this_joystick->x_max) {
    1f62:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f64:	9d 85       	ldd	r25, Y+13	; 0x0d
    1f66:	86 17       	cp	r24, r22
    1f68:	97 07       	cpc	r25, r23
    1f6a:	6c f5       	brge	.+90     	; 0x1fc6 <keyboardMouseJoystickHandler+0x19a>
					state_x[name] = JBSTATE_RIGHT;
    1f6c:	f8 01       	movw	r30, r16
    1f6e:	e5 55       	subi	r30, 0x55	; 85
    1f70:	f4 4d       	sbci	r31, 0xD4	; 212
    1f72:	83 e0       	ldi	r24, 0x03	; 3
    1f74:	80 83       	st	Z, r24
					changeButtonState(joystick_button_base + JBSTATE_RIGHT, BUTTON_PRESSED);
    1f76:	61 e0       	ldi	r22, 0x01	; 1
    1f78:	8d 2d       	mov	r24, r13
    1f7a:	8f 5e       	subi	r24, 0xEF	; 239
    1f7c:	b0 dd       	rcall	.-1184   	; 0x1ade <changeButtonState>
    1f7e:	23 c0       	rjmp	.+70     	; 0x1fc6 <keyboardMouseJoystickHandler+0x19a>
				}
				break;
			case JBSTATE_LEFT:
				// Do we need to leave the left state?
				if (x > this_joystick->x_min) {
    1f80:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f82:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f84:	86 17       	cp	r24, r22
    1f86:	97 07       	cpc	r25, r23
    1f88:	f4 f4       	brge	.+60     	; 0x1fc6 <keyboardMouseJoystickHandler+0x19a>
					state_x[name] = JBSTATE_IDLE;
    1f8a:	f8 01       	movw	r30, r16
    1f8c:	e5 55       	subi	r30, 0x55	; 85
    1f8e:	f4 4d       	sbci	r31, 0xD4	; 212
    1f90:	84 e0       	ldi	r24, 0x04	; 4
    1f92:	80 83       	st	Z, r24
					changeButtonState(joystick_button_base + JBSTATE_LEFT, BUTTON_RELEASED);
    1f94:	60 e0       	ldi	r22, 0x00	; 0
    1f96:	8d 2d       	mov	r24, r13
    1f98:	80 5f       	subi	r24, 0xF0	; 240
    1f9a:	a1 dd       	rcall	.-1214   	; 0x1ade <changeButtonState>
    1f9c:	14 c0       	rjmp	.+40     	; 0x1fc6 <keyboardMouseJoystickHandler+0x19a>
				}
				break;
			case JBSTATE_RIGHT:
				// Do we need to leave the right state?
				if (x < this_joystick->x_max) {
    1f9e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1fa0:	9d 85       	ldd	r25, Y+13	; 0x0d
    1fa2:	68 17       	cp	r22, r24
    1fa4:	79 07       	cpc	r23, r25
    1fa6:	7c f4       	brge	.+30     	; 0x1fc6 <keyboardMouseJoystickHandler+0x19a>
					state_x[name] = JBSTATE_IDLE;
    1fa8:	f8 01       	movw	r30, r16
    1faa:	e5 55       	subi	r30, 0x55	; 85
    1fac:	f4 4d       	sbci	r31, 0xD4	; 212
    1fae:	84 e0       	ldi	r24, 0x04	; 4
    1fb0:	80 83       	st	Z, r24
					changeButtonState(joystick_button_base + JBSTATE_RIGHT, BUTTON_RELEASED);
    1fb2:	60 e0       	ldi	r22, 0x00	; 0
    1fb4:	8d 2d       	mov	r24, r13
    1fb6:	8f 5e       	subi	r24, 0xEF	; 239
    1fb8:	92 dd       	rcall	.-1244   	; 0x1ade <changeButtonState>
    1fba:	05 c0       	rjmp	.+10     	; 0x1fc6 <keyboardMouseJoystickHandler+0x19a>
				}
				break;
			default:
				state_x[name] = JBSTATE_IDLE;
    1fbc:	f8 01       	movw	r30, r16
    1fbe:	e5 55       	subi	r30, 0x55	; 85
    1fc0:	f4 4d       	sbci	r31, 0xD4	; 212
    1fc2:	84 e0       	ldi	r24, 0x04	; 4
    1fc4:	80 83       	st	Z, r24

	// Get information about this joystick:
	this_joystick = &(my_cc->joystick_configs[name]);

	// Get the base index for these joystick buttons:	
	joystick_button_base = NUM_BUTTONS + 4 * name;
    1fc6:	8d 2d       	mov	r24, r13
    1fc8:	82 5f       	subi	r24, 0xF2	; 242
				state_x[name] = JBSTATE_IDLE;
				break;
		};

		// Check the Y axis:
		switch (state_y[name]) {
    1fca:	f8 01       	movw	r30, r16
    1fcc:	e3 55       	subi	r30, 0x53	; 83
    1fce:	f4 4d       	sbci	r31, 0xD4	; 212
    1fd0:	90 81       	ld	r25, Z
    1fd2:	91 30       	cpi	r25, 0x01	; 1
    1fd4:	59 f1       	breq	.+86     	; 0x202c <keyboardMouseJoystickHandler+0x200>
    1fd6:	e8 f0       	brcs	.+58     	; 0x2012 <keyboardMouseJoystickHandler+0x1e6>
    1fd8:	94 30       	cpi	r25, 0x04	; 4
    1fda:	b9 f5       	brne	.+110    	; 0x204a <keyboardMouseJoystickHandler+0x21e>
			case JBSTATE_IDLE:
				// Do we need to enter the up state?
				if (y < this_joystick->y_min) {
    1fdc:	2e 85       	ldd	r18, Y+14	; 0x0e
    1fde:	3f 85       	ldd	r19, Y+15	; 0x0f
    1fe0:	e2 16       	cp	r14, r18
    1fe2:	f3 06       	cpc	r15, r19
    1fe4:	3c f4       	brge	.+14     	; 0x1ff4 <keyboardMouseJoystickHandler+0x1c8>
					state_y[name] = JBSTATE_UP;
    1fe6:	f8 01       	movw	r30, r16
    1fe8:	e3 55       	subi	r30, 0x53	; 83
    1fea:	f4 4d       	sbci	r31, 0xD4	; 212
    1fec:	10 82       	st	Z, r1
					changeButtonState(joystick_button_base + JBSTATE_UP, BUTTON_PRESSED);
    1fee:	61 e0       	ldi	r22, 0x01	; 1
    1ff0:	76 dd       	rcall	.-1300   	; 0x1ade <changeButtonState>
    1ff2:	30 c0       	rjmp	.+96     	; 0x2054 <keyboardMouseJoystickHandler+0x228>
				}
				// Do we need to enter the down state?
				else if (y > this_joystick->y_max) {
    1ff4:	88 89       	ldd	r24, Y+16	; 0x10
    1ff6:	99 89       	ldd	r25, Y+17	; 0x11
    1ff8:	8e 15       	cp	r24, r14
    1ffa:	9f 05       	cpc	r25, r15
    1ffc:	5c f5       	brge	.+86     	; 0x2054 <keyboardMouseJoystickHandler+0x228>
					state_y[name] = JBSTATE_DOWN;
    1ffe:	f8 01       	movw	r30, r16
    2000:	e3 55       	subi	r30, 0x53	; 83
    2002:	f4 4d       	sbci	r31, 0xD4	; 212
    2004:	81 e0       	ldi	r24, 0x01	; 1
    2006:	80 83       	st	Z, r24
					changeButtonState(joystick_button_base + JBSTATE_DOWN, BUTTON_PRESSED);
    2008:	61 e0       	ldi	r22, 0x01	; 1
    200a:	8d 2d       	mov	r24, r13
    200c:	81 5f       	subi	r24, 0xF1	; 241
    200e:	67 dd       	rcall	.-1330   	; 0x1ade <changeButtonState>
    2010:	21 c0       	rjmp	.+66     	; 0x2054 <keyboardMouseJoystickHandler+0x228>
				}
				break;
			case JBSTATE_UP:
				// Do we need to leave the up state?
				if (y > this_joystick->y_min) {
    2012:	2e 85       	ldd	r18, Y+14	; 0x0e
    2014:	3f 85       	ldd	r19, Y+15	; 0x0f
    2016:	2e 15       	cp	r18, r14
    2018:	3f 05       	cpc	r19, r15
    201a:	e4 f4       	brge	.+56     	; 0x2054 <keyboardMouseJoystickHandler+0x228>
					state_y[name] = JBSTATE_IDLE;
    201c:	f8 01       	movw	r30, r16
    201e:	e3 55       	subi	r30, 0x53	; 83
    2020:	f4 4d       	sbci	r31, 0xD4	; 212
    2022:	94 e0       	ldi	r25, 0x04	; 4
    2024:	90 83       	st	Z, r25
					changeButtonState(joystick_button_base + JBSTATE_UP, BUTTON_RELEASED);
    2026:	60 e0       	ldi	r22, 0x00	; 0
    2028:	5a dd       	rcall	.-1356   	; 0x1ade <changeButtonState>
    202a:	14 c0       	rjmp	.+40     	; 0x2054 <keyboardMouseJoystickHandler+0x228>
				}
				break;
			case JBSTATE_DOWN:
				// Do we need to leave the down state?
				if (y < this_joystick->y_max) {
    202c:	28 89       	ldd	r18, Y+16	; 0x10
    202e:	39 89       	ldd	r19, Y+17	; 0x11
    2030:	e2 16       	cp	r14, r18
    2032:	f3 06       	cpc	r15, r19
    2034:	7c f4       	brge	.+30     	; 0x2054 <keyboardMouseJoystickHandler+0x228>
					state_y[name] = JBSTATE_IDLE;
    2036:	f8 01       	movw	r30, r16
    2038:	e3 55       	subi	r30, 0x53	; 83
    203a:	f4 4d       	sbci	r31, 0xD4	; 212
    203c:	84 e0       	ldi	r24, 0x04	; 4
    203e:	80 83       	st	Z, r24
					changeButtonState(joystick_button_base + JBSTATE_DOWN, BUTTON_RELEASED);
    2040:	60 e0       	ldi	r22, 0x00	; 0
    2042:	8d 2d       	mov	r24, r13
    2044:	81 5f       	subi	r24, 0xF1	; 241
    2046:	4b dd       	rcall	.-1386   	; 0x1ade <changeButtonState>
    2048:	05 c0       	rjmp	.+10     	; 0x2054 <keyboardMouseJoystickHandler+0x228>
				}
				break;
			default:
				state_y[name] = JBSTATE_IDLE;
    204a:	f8 01       	movw	r30, r16
    204c:	e3 55       	subi	r30, 0x53	; 83
    204e:	f4 4d       	sbci	r31, 0xD4	; 212
    2050:	84 e0       	ldi	r24, 0x04	; 4
    2052:	80 83       	st	Z, r24
				break;
		};
	}		

	// Do we need to notify the host of a mouse change?
	if (mouse_x != 0 || mouse_y != 0 || mouse_buttons != last_mouse_buttons) {
    2054:	80 91 a9 2b 	lds	r24, 0x2BA9
    2058:	81 11       	cpse	r24, r1
    205a:	0b c0       	rjmp	.+22     	; 0x2072 <keyboardMouseJoystickHandler+0x246>
    205c:	80 91 aa 2b 	lds	r24, 0x2BAA
    2060:	81 11       	cpse	r24, r1
    2062:	07 c0       	rjmp	.+14     	; 0x2072 <keyboardMouseJoystickHandler+0x246>
    2064:	90 91 af 2b 	lds	r25, 0x2BAF
    2068:	80 91 b0 2b 	lds	r24, 0x2BB0
    206c:	98 17       	cp	r25, r24
    206e:	09 f4       	brne	.+2      	; 0x2072 <keyboardMouseJoystickHandler+0x246>
    2070:	4f c0       	rjmp	.+158    	; 0x2110 <keyboardMouseJoystickHandler+0x2e4>
		// Is it time to send a mouse report?
		if (checkTimeout(&mouse_timeout)) {
    2072:	81 ea       	ldi	r24, 0xA1	; 161
    2074:	9b e2       	ldi	r25, 0x2B	; 43
    2076:	3c d3       	rcall	.+1656   	; 0x26f0 <checkTimeout>
    2078:	88 23       	and	r24, r24
    207a:	09 f4       	brne	.+2      	; 0x207e <keyboardMouseJoystickHandler+0x252>
    207c:	49 c0       	rjmp	.+146    	; 0x2110 <keyboardMouseJoystickHandler+0x2e4>
			// Restart the timeout:
			startTimeout(&mouse_timeout, MOUSE_REPORT_INTERVAL_MS);
    207e:	44 e1       	ldi	r20, 0x14	; 20
    2080:	50 e0       	ldi	r21, 0x00	; 0
    2082:	60 e0       	ldi	r22, 0x00	; 0
    2084:	70 e0       	ldi	r23, 0x00	; 0
    2086:	81 ea       	ldi	r24, 0xA1	; 161
    2088:	9b e2       	ldi	r25, 0x2B	; 43
    208a:	19 d3       	rcall	.+1586   	; 0x26be <startTimeout>
			
			// Record the mouse button presses:
			last_mouse_buttons = mouse_buttons;
    208c:	80 91 af 2b 	lds	r24, 0x2BAF
    2090:	80 93 b0 2b 	sts	0x2BB0, r24
			sendBTChar(mouseTmp);
			sendBTChar(0x00); // Wheel position; unused
#else			
			// Send the report. The format is
			// A1,03,buttons,XmXl,YlXh,YhYm,wheel
			sendBTString("BC:KR=A1,03,");
    2094:	86 e4       	ldi	r24, 0x46	; 70
    2096:	91 e2       	ldi	r25, 0x21	; 33
    2098:	0e 94 0f 20 	call	0x401e	; 0x401e <sendBTString>
			sendBTHexPair(mouse_buttons);
    209c:	80 91 af 2b 	lds	r24, 0x2BAF
    20a0:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <sendBTHexPair>
			sendBTChar(',');			
    20a4:	8c e2       	ldi	r24, 0x2C	; 44
    20a6:	0e 94 02 20 	call	0x4004	; 0x4004 <sendBTChar>
			mouseTmp = mouse_x & 0xFF;
			sendBTHexPair(mouseTmp);
    20aa:	80 91 a9 2b 	lds	r24, 0x2BA9
    20ae:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <sendBTHexPair>
			sendBTChar(',');
    20b2:	8c e2       	ldi	r24, 0x2C	; 44
    20b4:	0e 94 02 20 	call	0x4004	; 0x4004 <sendBTChar>
			mouseTmp = ((mouse_x >> 8) & 0x0F) | ((mouse_y & 0x0F) << 4);
    20b8:	80 91 a9 2b 	lds	r24, 0x2BA9
    20bc:	99 27       	eor	r25, r25
    20be:	87 fd       	sbrc	r24, 7
    20c0:	90 95       	com	r25
    20c2:	29 2f       	mov	r18, r25
    20c4:	22 95       	swap	r18
    20c6:	2f 70       	andi	r18, 0x0F	; 15
    20c8:	80 91 aa 2b 	lds	r24, 0x2BAA
    20cc:	30 e1       	ldi	r19, 0x10	; 16
    20ce:	83 02       	muls	r24, r19
    20d0:	c0 01       	movw	r24, r0
    20d2:	11 24       	eor	r1, r1
			sendBTHexPair(mouseTmp);
    20d4:	82 2b       	or	r24, r18
    20d6:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <sendBTHexPair>
			sendBTChar(',');
    20da:	8c e2       	ldi	r24, 0x2C	; 44
    20dc:	0e 94 02 20 	call	0x4004	; 0x4004 <sendBTChar>
			mouseTmp = (mouse_y >> 4) & 0xFF;
    20e0:	80 91 aa 2b 	lds	r24, 0x2BAA
			sendBTHexPair(mouseTmp);
    20e4:	85 95       	asr	r24
    20e6:	85 95       	asr	r24
    20e8:	85 95       	asr	r24
    20ea:	85 95       	asr	r24
    20ec:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <sendBTHexPair>
			sendBTChar(',');
    20f0:	8c e2       	ldi	r24, 0x2C	; 44
    20f2:	0e 94 02 20 	call	0x4004	; 0x4004 <sendBTChar>
			sendBTHexPair(0x00); // Wheel position; unused
    20f6:	80 e0       	ldi	r24, 0x00	; 0
    20f8:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <sendBTHexPair>
			sendBTChar('\r');
    20fc:	8d e0       	ldi	r24, 0x0D	; 13
    20fe:	0e 94 02 20 	call	0x4004	; 0x4004 <sendBTChar>
			sendBTChar('\n');
    2102:	8a e0       	ldi	r24, 0x0A	; 10
    2104:	0e 94 02 20 	call	0x4004	; 0x4004 <sendBTChar>
#endif
			// Reset mouse x and y:
			mouse_x = 0;
    2108:	10 92 a9 2b 	sts	0x2BA9, r1
			mouse_y = 0;
    210c:	10 92 aa 2b 	sts	0x2BAA, r1
	sendDBGChar((char)(value / 10) + '0');
	value = value % 10;
	sendDBGChar((char)(value) + '0');
	sendDBGLine("");
	*/
}
    2110:	df 91       	pop	r29
    2112:	cf 91       	pop	r28
    2114:	1f 91       	pop	r17
    2116:	0f 91       	pop	r16
    2118:	ff 90       	pop	r15
    211a:	ef 90       	pop	r14
    211c:	df 90       	pop	r13
    211e:	08 95       	ret

00002120 <keyboadMouseButtonHandler>:
	BluetoothComboMode();
	startTimeout(&mouse_timeout, MOUSE_REPORT_INTERVAL_MS);
}

void keyboadMouseButtonHandler(enum ButtonName name, enum ButtonState state) {
	changeButtonState((uint8_t)name, state);
    2120:	de cc       	rjmp	.-1604   	; 0x1ade <changeButtonState>
    2122:	08 95       	ret

00002124 <sendDBGChar>:
};

unsigned char recvDBGChar(void)
{
	return usart_getchar(DBG_SERIAL);
};
    2124:	68 2f       	mov	r22, r24
    2126:	80 ea       	ldi	r24, 0xA0	; 160
    2128:	99 e0       	ldi	r25, 0x09	; 9
    212a:	0c 94 75 1c 	jmp	0x38ea	; 0x38ea <usart_putchar>

0000212e <sendDBGString>:

// write out a simple '\0' terminated string
void sendDBGString(const char *string)
{
    212e:	cf 93       	push	r28
    2130:	df 93       	push	r29
    2132:	ec 01       	movw	r28, r24
	while(*string != 0)
    2134:	88 81       	ld	r24, Y
    2136:	88 23       	and	r24, r24
    2138:	29 f0       	breq	.+10     	; 0x2144 <sendDBGString+0x16>
{
	return usart_getchar(DBG_SERIAL);
};

// write out a simple '\0' terminated string
void sendDBGString(const char *string)
    213a:	21 96       	adiw	r28, 0x01	; 1
{
	while(*string != 0)
	sendDBGChar(*string++);
    213c:	f3 df       	rcall	.-26     	; 0x2124 <sendDBGChar>
};

// write out a simple '\0' terminated string
void sendDBGString(const char *string)
{
	while(*string != 0)
    213e:	89 91       	ld	r24, Y+
    2140:	81 11       	cpse	r24, r1
    2142:	fc cf       	rjmp	.-8      	; 0x213c <sendDBGString+0xe>
	sendDBGChar(*string++);
};
    2144:	df 91       	pop	r29
    2146:	cf 91       	pop	r28
    2148:	08 95       	ret

0000214a <sendDBGLine>:

// write out a simple '\0' terminated string and print "\n\r" at end
void sendDBGLine(const char *string)
{
	sendDBGString(string);
    214a:	f1 df       	rcall	.-30     	; 0x212e <sendDBGString>
	sendDBGChar('\r');
    214c:	8d e0       	ldi	r24, 0x0D	; 13
    214e:	ea df       	rcall	.-44     	; 0x2124 <sendDBGChar>
	sendDBGChar('\n');
    2150:	8a e0       	ldi	r24, 0x0A	; 10
    2152:	e8 cf       	rjmp	.-48     	; 0x2124 <sendDBGChar>

00002154 <setupDbg>:
#define DBG_SERIAL_CHAR_LENGTH         USART_CHSIZE_8BIT_gc
#define DBG_SERIAL_PARITY              USART_PMODE_DISABLED_gc
#define DBG_SERIAL_STOP_BIT            false  // false = 1, true = 2

void setupDbg(void)
{
    2154:	cf 93       	push	r28
    2156:	df 93       	push	r29
    2158:	cd b7       	in	r28, 0x3d	; 61
    215a:	de b7       	in	r29, 0x3e	; 62
    215c:	27 97       	sbiw	r28, 0x07	; 7
    215e:	cd bf       	out	0x3d, r28	; 61
    2160:	de bf       	out	0x3e, r29	; 62
	//sysclk_init();
	const usart_rs232_options_t USART_SERIAL_OPTIONS = {
    2162:	87 e0       	ldi	r24, 0x07	; 7
    2164:	ef e5       	ldi	r30, 0x5F	; 95
    2166:	f0 e2       	ldi	r31, 0x20	; 32
    2168:	de 01       	movw	r26, r28
    216a:	11 96       	adiw	r26, 0x01	; 1
    216c:	01 90       	ld	r0, Z+
    216e:	0d 92       	st	X+, r0
    2170:	8a 95       	dec	r24
    2172:	e1 f7       	brne	.-8      	; 0x216c <setupDbg+0x18>
		.baudrate = DBG_SERIAL_BAUDRATE,
		.charlength = DBG_SERIAL_CHAR_LENGTH,
		.paritytype = DBG_SERIAL_PARITY,
		.stopbits = DBG_SERIAL_STOP_BIT
	};
	sysclk_enable_module(SYSCLK_PORT_D, PR_USART0_bm);
    2174:	60 e1       	ldi	r22, 0x10	; 16
    2176:	84 e0       	ldi	r24, 0x04	; 4
    2178:	5a d4       	rcall	.+2228   	; 0x2a2e <sysclk_enable_module>
	sendDBGString(pgm_read_byte(debuguartinit));
    217a:	e4 ed       	ldi	r30, 0xD4	; 212
    217c:	f1 e0       	ldi	r31, 0x01	; 1
    217e:	84 91       	lpm	r24, Z
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	d5 df       	rcall	.-86     	; 0x212e <sendDBGString>
	WatchdogPet();
    2184:	03 d4       	rcall	.+2054   	; 0x298c <WatchdogPet>
	if (usart_init_rs232(DBG_SERIAL, &USART_SERIAL_OPTIONS)) {
    2186:	be 01       	movw	r22, r28
    2188:	6f 5f       	subi	r22, 0xFF	; 255
    218a:	7f 4f       	sbci	r23, 0xFF	; 255
    218c:	80 ea       	ldi	r24, 0xA0	; 160
    218e:	99 e0       	ldi	r25, 0x09	; 9
    2190:	0e 94 8b 1d 	call	0x3b16	; 0x3b16 <usart_init_rs232>
    2194:	88 23       	and	r24, r24
    2196:	31 f0       	breq	.+12     	; 0x21a4 <setupDbg+0x50>
		//sendDBGLine(pgm_read_byte(good));
		sendDBGLine(pgm_read_byte(good));
    2198:	ea ee       	ldi	r30, 0xEA	; 234
    219a:	f1 e0       	ldi	r31, 0x01	; 1
    219c:	84 91       	lpm	r24, Z
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	d4 df       	rcall	.-88     	; 0x214a <sendDBGLine>
    21a2:	05 c0       	rjmp	.+10     	; 0x21ae <setupDbg+0x5a>
	}
	else
	{		
		//sendDBGLine(pgm_read_byte(bad));
		sendDBGLine(pgm_read_byte(bad));
    21a4:	e6 ee       	ldi	r30, 0xE6	; 230
    21a6:	f1 e0       	ldi	r31, 0x01	; 1
    21a8:	84 91       	lpm	r24, Z
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	ce df       	rcall	.-100    	; 0x214a <sendDBGLine>
	}
}
    21ae:	27 96       	adiw	r28, 0x07	; 7
    21b0:	cd bf       	out	0x3d, r28	; 61
    21b2:	de bf       	out	0x3e, r29	; 62
    21b4:	df 91       	pop	r29
    21b6:	cf 91       	pop	r28
    21b8:	08 95       	ret

000021ba <IsTestMode>:
	printf(buffer);
	turnBTOn();
	setLEDValue(LED_OFF, LED_OFF, LED_ON);
	sprintf(buffer,pgm_read_byte(testText),'/', 1111, pgm_read_byte(resultsExternal));
	//sendDBGLine("/Test0001: Results External");
	printf(buffer);
    21ba:	e0 e6       	ldi	r30, 0x60	; 96
    21bc:	f6 e0       	ldi	r31, 0x06	; 6
    21be:	80 85       	ldd	r24, Z+8	; 0x08
    21c0:	88 1f       	adc	r24, r24
    21c2:	88 27       	eor	r24, r24
    21c4:	88 1f       	adc	r24, r24
    21c6:	08 95       	ret

000021c8 <RunHandTestProcedure>:
    21c8:	cf 92       	push	r12
    21ca:	df 92       	push	r13
    21cc:	ef 92       	push	r14
    21ce:	ff 92       	push	r15
    21d0:	cf 93       	push	r28
    21d2:	df 93       	push	r29
    21d4:	40 e0       	ldi	r20, 0x00	; 0
    21d6:	60 e0       	ldi	r22, 0x00	; 0
    21d8:	80 e0       	ldi	r24, 0x00	; 0
    21da:	3a d2       	rcall	.+1140   	; 0x2650 <setLEDValue>
    21dc:	82 e3       	ldi	r24, 0x32	; 50
    21de:	bc d1       	rcall	.+888    	; 0x2558 <setBlueLEDValue>
    21e0:	80 e0       	ldi	r24, 0x00	; 0
    21e2:	9c e7       	ldi	r25, 0x7C	; 124
    21e4:	a2 e9       	ldi	r26, 0x92	; 146
    21e6:	b0 e0       	ldi	r27, 0x00	; 0
    21e8:	01 97       	sbiw	r24, 0x01	; 1
    21ea:	a1 09       	sbc	r26, r1
    21ec:	b1 09       	sbc	r27, r1
    21ee:	e1 f7       	brne	.-8      	; 0x21e8 <RunHandTestProcedure+0x20>
    21f0:	88 e8       	ldi	r24, 0x88	; 136
    21f2:	98 e2       	ldi	r25, 0x28	; 40
    21f4:	0e 94 1d 20 	call	0x403a	; 0x403a <sendBTCmd>
    21f8:	84 e9       	ldi	r24, 0x94	; 148
    21fa:	98 e2       	ldi	r25, 0x28	; 40
    21fc:	0e 94 1d 20 	call	0x403a	; 0x403a <sendBTCmd>
    2200:	c0 e4       	ldi	r28, 0x40	; 64
    2202:	d6 e0       	ldi	r29, 0x06	; 6
    2204:	0f 2e       	mov	r0, r31
    2206:	fa ea       	ldi	r31, 0xAA	; 170
    2208:	cf 2e       	mov	r12, r31
    220a:	f6 e4       	ldi	r31, 0x46	; 70
    220c:	df 2e       	mov	r13, r31
    220e:	f0 e1       	ldi	r31, 0x10	; 16
    2210:	ef 2e       	mov	r14, r31
    2212:	f1 2c       	mov	r15, r1
    2214:	f0 2d       	mov	r31, r0
    2216:	1e c0       	rjmp	.+60     	; 0x2254 <RunHandTestProcedure+0x8c>
    2218:	40 e0       	ldi	r20, 0x00	; 0
    221a:	60 e0       	ldi	r22, 0x00	; 0
    221c:	82 e3       	ldi	r24, 0x32	; 50
    221e:	18 d2       	rcall	.+1072   	; 0x2650 <setLEDValue>
    2220:	d7 01       	movw	r26, r14
    2222:	c6 01       	movw	r24, r12
    2224:	01 97       	sbiw	r24, 0x01	; 1
    2226:	a1 09       	sbc	r26, r1
    2228:	b1 09       	sbc	r27, r1
    222a:	e1 f7       	brne	.-8      	; 0x2224 <RunHandTestProcedure+0x5c>
    222c:	40 e0       	ldi	r20, 0x00	; 0
    222e:	62 e3       	ldi	r22, 0x32	; 50
    2230:	80 e0       	ldi	r24, 0x00	; 0
    2232:	0e d2       	rcall	.+1052   	; 0x2650 <setLEDValue>
    2234:	d7 01       	movw	r26, r14
    2236:	c6 01       	movw	r24, r12
    2238:	01 97       	sbiw	r24, 0x01	; 1
    223a:	a1 09       	sbc	r26, r1
    223c:	b1 09       	sbc	r27, r1
    223e:	e1 f7       	brne	.-8      	; 0x2238 <RunHandTestProcedure+0x70>
    2240:	42 e3       	ldi	r20, 0x32	; 50
    2242:	60 e0       	ldi	r22, 0x00	; 0
    2244:	80 e0       	ldi	r24, 0x00	; 0
    2246:	04 d2       	rcall	.+1032   	; 0x2650 <setLEDValue>
    2248:	d7 01       	movw	r26, r14
    224a:	c6 01       	movw	r24, r12
    224c:	01 97       	sbiw	r24, 0x01	; 1
    224e:	a1 09       	sbc	r26, r1
    2250:	b1 09       	sbc	r27, r1
    2252:	e1 f7       	brne	.-8      	; 0x224c <RunHandTestProcedure+0x84>
    2254:	88 85       	ldd	r24, Y+8	; 0x08
    2256:	88 23       	and	r24, r24
    2258:	fc f6       	brge	.-66     	; 0x2218 <RunHandTestProcedure+0x50>
    225a:	df 91       	pop	r29
    225c:	cf 91       	pop	r28
    225e:	ff 90       	pop	r15
    2260:	ef 90       	pop	r14
    2262:	df 90       	pop	r13
    2264:	cf 90       	pop	r12
    2266:	08 95       	ret

00002268 <ExecuteTest>:
	return ioport_get_pin_level(IsManufactureTestMode);
}

void ExecuteTest()
{
	setupDbg();
    2268:	75 df       	rcall	.-278    	; 0x2154 <setupDbg>
	setupLEDs(false);
    226a:	80 e0       	ldi	r24, 0x00	; 0
    226c:	94 d0       	rcall	.+296    	; 0x2396 <setupLEDs>
    226e:	e0 e4       	ldi	r30, 0x40	; 64
    2270:	f6 e0       	ldi	r31, 0x06	; 6
    2272:	80 85       	ldd	r24, Z+8	; 0x08
    2274:	80 85       	ldd	r24, Z+8	; 0x08
    2276:	80 85       	ldd	r24, Z+8	; 0x08
    2278:	80 85       	ldd	r24, Z+8	; 0x08
	SETBITVALUE(testId, 2, ioport_get_pin_level(DRONE_GPIO_2));
	SETBITVALUE(testId, 3, ioport_get_pin_level(DRONE_GPIO_3));
	
	switch(testId)
	{
		case 0:{ RunHandTestProcedure(); } break;
    227a:	a6 cf       	rjmp	.-180    	; 0x21c8 <RunHandTestProcedure>

0000227c <Wakeup>:
	sleep_disable();
	reset_do_soft_reset();
}

bool Wakeup(uint16_t timeout_ms)
{
    227c:	1f 93       	push	r17
    227e:	cf 93       	push	r28
    2280:	df 93       	push	r29
    2282:	cd b7       	in	r28, 0x3d	; 61
    2284:	de b7       	in	r29, 0x3e	; 62
    2286:	28 97       	sbiw	r28, 0x08	; 8
    2288:	cd bf       	out	0x3d, r28	; 61
    228a:	de bf       	out	0x3e, r29	; 62
	
	cfgsel_t which_cfg;
	struct Timeout t;
	startTimeout( &t, timeout_ms );
    228c:	ac 01       	movw	r20, r24
    228e:	60 e0       	ldi	r22, 0x00	; 0
    2290:	70 e0       	ldi	r23, 0x00	; 0
    2292:	ce 01       	movw	r24, r28
    2294:	01 96       	adiw	r24, 0x01	; 1
    2296:	13 d2       	rcall	.+1062   	; 0x26be <startTimeout>
	which_cfg = whichConfiguration();
    2298:	0e 94 a0 07 	call	0xf40	; 0xf40 <whichConfiguration>
    229c:	18 2f       	mov	r17, r24

	while( ! checkTimeout(&t) )
    229e:	05 c0       	rjmp	.+10     	; 0x22aa <Wakeup+0x2e>
	{
		if( ! buttonActivated(B_START) )
    22a0:	88 e0       	ldi	r24, 0x08	; 8
    22a2:	0e 94 ee 03 	call	0x7dc	; 0x7dc <buttonActivated>
    22a6:	88 23       	and	r24, r24
    22a8:	51 f0       	breq	.+20     	; 0x22be <Wakeup+0x42>
	cfgsel_t which_cfg;
	struct Timeout t;
	startTimeout( &t, timeout_ms );
	which_cfg = whichConfiguration();

	while( ! checkTimeout(&t) )
    22aa:	ce 01       	movw	r24, r28
    22ac:	01 96       	adiw	r24, 0x01	; 1
    22ae:	20 d2       	rcall	.+1088   	; 0x26f0 <checkTimeout>
    22b0:	88 23       	and	r24, r24
    22b2:	b1 f3       	breq	.-20     	; 0x22a0 <Wakeup+0x24>
		if( ! buttonActivated(B_START) )
		{
			return false;
		}
	}
	loadConfiguration(which_cfg);
    22b4:	81 2f       	mov	r24, r17
    22b6:	0e 94 45 07 	call	0xe8a	; 0xe8a <loadConfiguration>
	return true;
    22ba:	81 e0       	ldi	r24, 0x01	; 1
    22bc:	01 c0       	rjmp	.+2      	; 0x22c0 <Wakeup+0x44>

	while( ! checkTimeout(&t) )
	{
		if( ! buttonActivated(B_START) )
		{
			return false;
    22be:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	loadConfiguration(which_cfg);
	return true;
}
    22c0:	28 96       	adiw	r28, 0x08	; 8
    22c2:	cd bf       	out	0x3d, r28	; 61
    22c4:	de bf       	out	0x3e, r29	; 62
    22c6:	df 91       	pop	r29
    22c8:	cf 91       	pop	r28
    22ca:	1f 91       	pop	r17
    22cc:	08 95       	ret

000022ce <powerOff>:

bool Wakeup(uint16_t timeout_ms);

void powerOff(bool powerOffSoftware) 
{
	WatchdogPet();
    22ce:	5e d3       	rcall	.+1724   	; 0x298c <WatchdogPet>
	WatchDogEnable(false);
    22d0:	80 e0       	ldi	r24, 0x00	; 0
    22d2:	6d d3       	rcall	.+1754   	; 0x29ae <WatchDogEnable>
	turnBTOff();
    22d4:	0e 94 80 20 	call	0x4100	; 0x4100 <turnBTOff>
    22d8:	8a ea       	ldi	r24, 0xAA	; 170
    22da:	90 ea       	ldi	r25, 0xA0	; 160
    22dc:	a1 e0       	ldi	r26, 0x01	; 1
    22de:	b0 e0       	ldi	r27, 0x00	; 0
    22e0:	01 97       	sbiw	r24, 0x01	; 1
    22e2:	a1 09       	sbc	r26, r1
    22e4:	b1 09       	sbc	r27, r1
    22e6:	e1 f7       	brne	.-8      	; 0x22e0 <powerOff+0x12>
	
	delay_ms(20);
	cpu_irq_enable();	
    22e8:	78 94       	sei
 *
 * \param mode Sleep mode, from the device IO header file.
 */
static inline void sleep_set_mode(enum SLEEP_SMODE_enum mode)
{
	SLEEP.CTRL = mode | (SLEEP.CTRL & ~SLEEP_SMODE_gm);
    22ea:	e8 e4       	ldi	r30, 0x48	; 72
    22ec:	f0 e0       	ldi	r31, 0x00	; 0
    22ee:	80 81       	ld	r24, Z
    22f0:	81 7f       	andi	r24, 0xF1	; 241
    22f2:	84 60       	ori	r24, 0x04	; 4
    22f4:	80 83       	st	Z, r24

	sleep_set_mode(SLEEP_MODE_PWR_DOWN);
	sleep_enable();
    22f6:	80 81       	ld	r24, Z
    22f8:	81 60       	ori	r24, 0x01	; 1
    22fa:	80 83       	st	Z, r24
	
	while(1)
	{
			sleep_enter();
    22fc:	88 95       	sleep
			
			//EXECUTION STARTS HERE AFTER START_PIN EXTERNAL INTERRUPT ISR
			
			if( Wakeup(STARTUP_HOLD_TIME_MS) )
    22fe:	80 ed       	ldi	r24, 0xD0	; 208
    2300:	97 e0       	ldi	r25, 0x07	; 7
    2302:	bc df       	rcall	.-136    	; 0x227c <Wakeup>
    2304:	88 23       	and	r24, r24
    2306:	d1 f3       	breq	.-12     	; 0x22fc <powerOff+0x2e>
			{
				break; //don't reenter sleep
			}
	}
	
	sleep_disable();
    2308:	e8 e4       	ldi	r30, 0x48	; 72
    230a:	f0 e0       	ldi	r31, 0x00	; 0
    230c:	80 81       	ld	r24, Z
    230e:	8e 7f       	andi	r24, 0xFE	; 254
    2310:	80 83       	st	Z, r24
    2312:	61 e0       	ldi	r22, 0x01	; 1
    2314:	89 e7       	ldi	r24, 0x79	; 121
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	63 d4       	rcall	.+2246   	; 0x2be0 <ccp_write_io>
    231a:	ff cf       	rjmp	.-2      	; 0x231a <powerOff+0x4c>

0000231c <checkForStartUp>:
}

// Start Button must be held down for timeout_ms
// Returns True for Startup
// Returns False for PowerOff
bool checkForStartUp(uint16_t timeout_ms) {
    231c:	cf 92       	push	r12
    231e:	df 92       	push	r13
    2320:	ef 92       	push	r14
    2322:	ff 92       	push	r15
    2324:	cf 93       	push	r28
    2326:	7c 01       	movw	r14, r24
	// Loop and Monitor START_PIN to make sure it's pressed.
	// Return value when timeout has been reached. 
	WatchdogPet();	
    2328:	31 d3       	rcall	.+1634   	; 0x298c <WatchdogPet>
	WatchDogEnable(false);
    232a:	80 e0       	ldi	r24, 0x00	; 0
    232c:	40 d3       	rcall	.+1664   	; 0x29ae <WatchDogEnable>
	uint32_t count = getSystemTime();
    232e:	9c d1       	rcall	.+824    	; 0x2668 <getSystemTime>
    2330:	e0 ea       	ldi	r30, 0xA0	; 160
    2332:	f6 e0       	ldi	r31, 0x06	; 6
    2334:	20 85       	ldd	r18, Z+8	; 0x08

	while (ioport_get_pin_level(START_PIN)); 
    2336:	22 fd       	sbrc	r18, 2
    2338:	fd cf       	rjmp	.-6      	; 0x2334 <checkForStartUp+0x18>
    233a:	20 e0       	ldi	r18, 0x00	; 0
    233c:	30 e0       	ldi	r19, 0x00	; 0
    233e:	2f 5f       	subi	r18, 0xFF	; 255
    2340:	3f 4f       	sbci	r19, 0xFF	; 255
    2342:	25 35       	cpi	r18, 0x55	; 85
    2344:	40 ed       	ldi	r20, 0xD0	; 208
    2346:	34 07       	cpc	r19, r20
    2348:	d1 f7       	brne	.-12     	; 0x233e <checkForStartUp+0x22>
	{
		delay_ms(10);		
	} 
	
	bool turn_on = (count + timeout_ms) > getSystemTime();
    234a:	9b 01       	movw	r18, r22
    234c:	ac 01       	movw	r20, r24
    234e:	2e 0d       	add	r18, r14
    2350:	3f 1d       	adc	r19, r15
    2352:	41 1d       	adc	r20, r1
    2354:	51 1d       	adc	r21, r1
    2356:	69 01       	movw	r12, r18
    2358:	7a 01       	movw	r14, r20
    235a:	86 d1       	rcall	.+780    	; 0x2668 <getSystemTime>
    235c:	c1 e0       	ldi	r28, 0x01	; 1
    235e:	6c 15       	cp	r22, r12
    2360:	7d 05       	cpc	r23, r13
    2362:	8e 05       	cpc	r24, r14
    2364:	9f 05       	cpc	r25, r15
    2366:	08 f0       	brcs	.+2      	; 0x236a <checkForStartUp+0x4e>
    2368:	c0 e0       	ldi	r28, 0x00	; 0

	WatchDogEnable(true); 
    236a:	81 e0       	ldi	r24, 0x01	; 1
    236c:	20 d3       	rcall	.+1600   	; 0x29ae <WatchDogEnable>
	WatchdogPet();
    236e:	0e d3       	rcall	.+1564   	; 0x298c <WatchdogPet>
	return turn_on;
}
    2370:	8c 2f       	mov	r24, r28
    2372:	cf 91       	pop	r28
    2374:	ff 90       	pop	r15
    2376:	ef 90       	pop	r14
    2378:	df 90       	pop	r13
    237a:	cf 90       	pop	r12
    237c:	08 95       	ret

0000237e <powerOn>:

// Parameter is taken from the Global EEPROM Header
// Returns when Start button held long enough
// Else puts the Controller to sleep
bool powerOn(bool powerOffSoftware) {
    237e:	cf 93       	push	r28
    2380:	c8 2f       	mov	r28, r24
	
	// Otherwise we go to sleep
	if (!checkForStartUp(STARTUP_HOLD_TIME_MS))
    2382:	80 ed       	ldi	r24, 0xD0	; 208
    2384:	97 e0       	ldi	r25, 0x07	; 7
    2386:	ca df       	rcall	.-108    	; 0x231c <checkForStartUp>
    2388:	81 11       	cpse	r24, r1
    238a:	02 c0       	rjmp	.+4      	; 0x2390 <powerOn+0x12>
	{
		// Startup is NOT going to happen
		// Go back to sleep
		powerOff(powerOffSoftware);
    238c:	8c 2f       	mov	r24, r28
    238e:	9f df       	rcall	.-194    	; 0x22ce <powerOff>
		
	}
	return true;
}
    2390:	81 e0       	ldi	r24, 0x01	; 1
    2392:	cf 91       	pop	r28
    2394:	08 95       	ret

00002396 <setupLEDs>:

static bool swapBlueGreen = false;  // Default = 0/false behavior is Green on D0 and Blue on D1, 

void setupLEDs(bool swapBlueForGreen)
{
	swapBlueGreen = swapBlueForGreen;
    2396:	80 93 b5 2b 	sts	0x2BB5, r24
	/* Set up all 3 PWM channels with 500 Hz frequency. */
	pwm_init(&pwm_cfg[RED_CFG],   RED_PWM_PORT,   RED_PWM_CHANNEL,   500);
    239a:	24 ef       	ldi	r18, 0xF4	; 244
    239c:	31 e0       	ldi	r19, 0x01	; 1
    239e:	42 e0       	ldi	r20, 0x02	; 2
    23a0:	66 e0       	ldi	r22, 0x06	; 6
    23a2:	86 eb       	ldi	r24, 0xB6	; 182
    23a4:	9b e2       	ldi	r25, 0x2B	; 43
    23a6:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <pwm_init>
	pwm_init(&pwm_cfg[GREEN_CFG], GREEN_PWM_PORT, GREEN_PWM_CHANNEL, 500);
    23aa:	24 ef       	ldi	r18, 0xF4	; 244
    23ac:	31 e0       	ldi	r19, 0x01	; 1
    23ae:	41 e0       	ldi	r20, 0x01	; 1
    23b0:	62 e0       	ldi	r22, 0x02	; 2
    23b2:	8d eb       	ldi	r24, 0xBD	; 189
    23b4:	9b e2       	ldi	r25, 0x2B	; 43
    23b6:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <pwm_init>
	pwm_init(&pwm_cfg[BLUE_CFG],  BLUE_PWM_PORT,  BLUE_PWM_CHANNEL,  500);
    23ba:	24 ef       	ldi	r18, 0xF4	; 244
    23bc:	31 e0       	ldi	r19, 0x01	; 1
    23be:	42 e0       	ldi	r20, 0x02	; 2
    23c0:	62 e0       	ldi	r22, 0x02	; 2
    23c2:	84 ec       	ldi	r24, 0xC4	; 196
    23c4:	9b e2       	ldi	r25, 0x2B	; 43
    23c6:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <pwm_init>

	/* Start all 3 PWM channels with initial value of off.
	This is the only location that will need to reference them
	as active low (100% == off) */
	pwm_start(&pwm_cfg[RED_CFG], 100);
    23ca:	64 e6       	ldi	r22, 0x64	; 100
    23cc:	86 eb       	ldi	r24, 0xB6	; 182
    23ce:	9b e2       	ldi	r25, 0x2B	; 43
    23d0:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <pwm_start>
	pwm_start(&pwm_cfg[GREEN_CFG], 100);
    23d4:	64 e6       	ldi	r22, 0x64	; 100
    23d6:	8d eb       	ldi	r24, 0xBD	; 189
    23d8:	9b e2       	ldi	r25, 0x2B	; 43
    23da:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <pwm_start>
	pwm_start(&pwm_cfg[BLUE_CFG], 100);
    23de:	64 e6       	ldi	r22, 0x64	; 100
    23e0:	84 ec       	ldi	r24, 0xC4	; 196
    23e2:	9b e2       	ldi	r25, 0x2B	; 43
    23e4:	0c 94 14 1f 	jmp	0x3e28	; 0x3e28 <pwm_start>

000023e8 <setRedLEDValue>:
void setRedLEDValue(uint8_t percent)
{
	if (percent > 100) {
		percent = 100;
	}
	pwm_set_duty_cycle_percent(&pwm_cfg[RED_CFG], 100 - percent);
    23e8:	85 36       	cpi	r24, 0x65	; 101
    23ea:	08 f0       	brcs	.+2      	; 0x23ee <setRedLEDValue+0x6>
    23ec:	84 e6       	ldi	r24, 0x64	; 100
    23ee:	24 e6       	ldi	r18, 0x64	; 100
    23f0:	28 1b       	sub	r18, r24
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, config->channel,
			(uint16_t)(((uint32_t)config->period *
    23f2:	a0 91 bb 2b 	lds	r26, 0x2BBB
    23f6:	b0 91 bc 2b 	lds	r27, 0x2BBC
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <__umulhisi3>
			(uint32_t)duty_cycle_scale) / 100));
    2400:	24 e6       	ldi	r18, 0x64	; 100
    2402:	30 e0       	ldi	r19, 0x00	; 0
    2404:	40 e0       	ldi	r20, 0x00	; 0
    2406:	50 e0       	ldi	r21, 0x00	; 0
    2408:	0e 94 b0 24 	call	0x4960	; 0x4960 <__udivmodsi4>
 */
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, config->channel,
    240c:	80 91 b8 2b 	lds	r24, 0x2BB8
    2410:	e0 91 b6 2b 	lds	r30, 0x2BB6
    2414:	f0 91 b7 2b 	lds	r31, 0x2BB7
 * \param buffer_value Counter Buffer value
 */
static inline void tc_write_cc_buffer(volatile void *tc,
		enum tc_cc_channel_t channel_index, uint16_t buffer_value)
{
	if (tc_is_tc0(void *tc)) {
    2418:	e6 fd       	sbrc	r30, 6
    241a:	17 c0       	rjmp	.+46     	; 0x244a <setRedLEDValue+0x62>
		switch (channel_index) {
    241c:	82 30       	cpi	r24, 0x02	; 2
    241e:	61 f0       	breq	.+24     	; 0x2438 <setRedLEDValue+0x50>
    2420:	18 f4       	brcc	.+6      	; 0x2428 <setRedLEDValue+0x40>
    2422:	81 30       	cpi	r24, 0x01	; 1
    2424:	e1 f4       	brne	.+56     	; 0x245e <setRedLEDValue+0x76>
    2426:	05 c0       	rjmp	.+10     	; 0x2432 <setRedLEDValue+0x4a>
    2428:	83 30       	cpi	r24, 0x03	; 3
    242a:	49 f0       	breq	.+18     	; 0x243e <setRedLEDValue+0x56>
    242c:	84 30       	cpi	r24, 0x04	; 4
    242e:	b9 f4       	brne	.+46     	; 0x245e <setRedLEDValue+0x76>
    2430:	09 c0       	rjmp	.+18     	; 0x2444 <setRedLEDValue+0x5c>
		case TC_CCA:
			((TC0_t *)tc)->CCABUF = buffer_value;
    2432:	20 af       	std	Z+56, r18	; 0x38
    2434:	31 af       	std	Z+57, r19	; 0x39
    2436:	08 95       	ret
			break;
		case TC_CCB:
			((TC0_t *)tc)->CCBBUF = buffer_value;
    2438:	22 af       	std	Z+58, r18	; 0x3a
    243a:	33 af       	std	Z+59, r19	; 0x3b
    243c:	08 95       	ret
			break;
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
    243e:	24 af       	std	Z+60, r18	; 0x3c
    2440:	35 af       	std	Z+61, r19	; 0x3d
    2442:	08 95       	ret
			break;
		case TC_CCD:
			((TC0_t *)tc)->CCDBUF = buffer_value;
    2444:	26 af       	std	Z+62, r18	; 0x3e
    2446:	37 af       	std	Z+63, r19	; 0x3f
    2448:	08 95       	ret
			break;
		}
	} else if (tc_is_tc1(void *tc)) {
			switch (channel_index) {
    244a:	81 30       	cpi	r24, 0x01	; 1
    244c:	19 f0       	breq	.+6      	; 0x2454 <setRedLEDValue+0x6c>
    244e:	82 30       	cpi	r24, 0x02	; 2
    2450:	31 f4       	brne	.+12     	; 0x245e <setRedLEDValue+0x76>
    2452:	03 c0       	rjmp	.+6      	; 0x245a <setRedLEDValue+0x72>
			case TC_CCA:
				((TC1_t *)tc)->CCABUF = buffer_value;
    2454:	20 af       	std	Z+56, r18	; 0x38
    2456:	31 af       	std	Z+57, r19	; 0x39
    2458:	08 95       	ret
				break;
			case TC_CCB:
				((TC1_t *)tc)->CCBBUF = buffer_value;
    245a:	22 af       	std	Z+58, r18	; 0x3a
    245c:	33 af       	std	Z+59, r19	; 0x3b
    245e:	08 95       	ret

00002460 <setGreenLEDValue>:
}

void setGreenLEDValue(uint8_t percent)
{
    2460:	85 36       	cpi	r24, 0x65	; 101
    2462:	08 f0       	brcs	.+2      	; 0x2466 <setGreenLEDValue+0x6>
    2464:	84 e6       	ldi	r24, 0x64	; 100
	if (percent > 100) {
		percent = 100;
	}
	if (swapBlueGreen) // Non-Default
    2466:	90 91 b5 2b 	lds	r25, 0x2BB5
    246a:	99 23       	and	r25, r25
    246c:	e1 f1       	breq	.+120    	; 0x24e6 <setGreenLEDValue+0x86>
		pwm_set_duty_cycle_percent(&pwm_cfg[BLUE_CFG], 100 - percent);
    246e:	24 e6       	ldi	r18, 0x64	; 100
    2470:	28 1b       	sub	r18, r24
			(uint16_t)(((uint32_t)config->period *
    2472:	a0 91 c9 2b 	lds	r26, 0x2BC9
    2476:	b0 91 ca 2b 	lds	r27, 0x2BCA
    247a:	30 e0       	ldi	r19, 0x00	; 0
    247c:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <__umulhisi3>
			(uint32_t)duty_cycle_scale) / 100));
    2480:	24 e6       	ldi	r18, 0x64	; 100
    2482:	30 e0       	ldi	r19, 0x00	; 0
    2484:	40 e0       	ldi	r20, 0x00	; 0
    2486:	50 e0       	ldi	r21, 0x00	; 0
    2488:	0e 94 b0 24 	call	0x4960	; 0x4960 <__udivmodsi4>
 */
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, config->channel,
    248c:	80 91 c6 2b 	lds	r24, 0x2BC6
    2490:	e0 91 c4 2b 	lds	r30, 0x2BC4
    2494:	f0 91 c5 2b 	lds	r31, 0x2BC5
 * \param buffer_value Counter Buffer value
 */
static inline void tc_write_cc_buffer(volatile void *tc,
		enum tc_cc_channel_t channel_index, uint16_t buffer_value)
{
	if (tc_is_tc0(void *tc)) {
    2498:	e6 fd       	sbrc	r30, 6
    249a:	19 c0       	rjmp	.+50     	; 0x24ce <setGreenLEDValue+0x6e>
		switch (channel_index) {
    249c:	82 30       	cpi	r24, 0x02	; 2
    249e:	71 f0       	breq	.+28     	; 0x24bc <setGreenLEDValue+0x5c>
    24a0:	20 f4       	brcc	.+8      	; 0x24aa <setGreenLEDValue+0x4a>
    24a2:	81 30       	cpi	r24, 0x01	; 1
    24a4:	09 f0       	breq	.+2      	; 0x24a8 <setGreenLEDValue+0x48>
    24a6:	57 c0       	rjmp	.+174    	; 0x2556 <setGreenLEDValue+0xf6>
    24a8:	06 c0       	rjmp	.+12     	; 0x24b6 <setGreenLEDValue+0x56>
    24aa:	83 30       	cpi	r24, 0x03	; 3
    24ac:	51 f0       	breq	.+20     	; 0x24c2 <setGreenLEDValue+0x62>
    24ae:	84 30       	cpi	r24, 0x04	; 4
    24b0:	09 f0       	breq	.+2      	; 0x24b4 <setGreenLEDValue+0x54>
    24b2:	51 c0       	rjmp	.+162    	; 0x2556 <setGreenLEDValue+0xf6>
    24b4:	09 c0       	rjmp	.+18     	; 0x24c8 <setGreenLEDValue+0x68>
		case TC_CCA:
			((TC0_t *)tc)->CCABUF = buffer_value;
    24b6:	20 af       	std	Z+56, r18	; 0x38
    24b8:	31 af       	std	Z+57, r19	; 0x39
    24ba:	08 95       	ret
			break;
		case TC_CCB:
			((TC0_t *)tc)->CCBBUF = buffer_value;
    24bc:	22 af       	std	Z+58, r18	; 0x3a
    24be:	33 af       	std	Z+59, r19	; 0x3b
    24c0:	08 95       	ret
			break;
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
    24c2:	24 af       	std	Z+60, r18	; 0x3c
    24c4:	35 af       	std	Z+61, r19	; 0x3d
    24c6:	08 95       	ret
			break;
		case TC_CCD:
			((TC0_t *)tc)->CCDBUF = buffer_value;
    24c8:	26 af       	std	Z+62, r18	; 0x3e
    24ca:	37 af       	std	Z+63, r19	; 0x3f
    24cc:	08 95       	ret
			break;
		}
	} else if (tc_is_tc1(void *tc)) {
			switch (channel_index) {
    24ce:	81 30       	cpi	r24, 0x01	; 1
    24d0:	21 f0       	breq	.+8      	; 0x24da <setGreenLEDValue+0x7a>
    24d2:	82 30       	cpi	r24, 0x02	; 2
    24d4:	09 f0       	breq	.+2      	; 0x24d8 <setGreenLEDValue+0x78>
    24d6:	3f c0       	rjmp	.+126    	; 0x2556 <setGreenLEDValue+0xf6>
    24d8:	03 c0       	rjmp	.+6      	; 0x24e0 <setGreenLEDValue+0x80>
			case TC_CCA:
				((TC1_t *)tc)->CCABUF = buffer_value;
    24da:	20 af       	std	Z+56, r18	; 0x38
    24dc:	31 af       	std	Z+57, r19	; 0x39
    24de:	08 95       	ret
				break;
			case TC_CCB:
				((TC1_t *)tc)->CCBBUF = buffer_value;
    24e0:	22 af       	std	Z+58, r18	; 0x3a
    24e2:	33 af       	std	Z+59, r19	; 0x3b
    24e4:	08 95       	ret
	else // Default
		pwm_set_duty_cycle_percent(&pwm_cfg[GREEN_CFG], 100 - percent);
    24e6:	24 e6       	ldi	r18, 0x64	; 100
    24e8:	28 1b       	sub	r18, r24
			(uint16_t)(((uint32_t)config->period *
    24ea:	a0 91 c2 2b 	lds	r26, 0x2BC2
    24ee:	b0 91 c3 2b 	lds	r27, 0x2BC3
    24f2:	30 e0       	ldi	r19, 0x00	; 0
    24f4:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <__umulhisi3>
			(uint32_t)duty_cycle_scale) / 100));
    24f8:	24 e6       	ldi	r18, 0x64	; 100
    24fa:	30 e0       	ldi	r19, 0x00	; 0
    24fc:	40 e0       	ldi	r20, 0x00	; 0
    24fe:	50 e0       	ldi	r21, 0x00	; 0
    2500:	0e 94 b0 24 	call	0x4960	; 0x4960 <__udivmodsi4>
 */
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, config->channel,
    2504:	80 91 bf 2b 	lds	r24, 0x2BBF
    2508:	e0 91 bd 2b 	lds	r30, 0x2BBD
    250c:	f0 91 be 2b 	lds	r31, 0x2BBE
 * \param buffer_value Counter Buffer value
 */
static inline void tc_write_cc_buffer(volatile void *tc,
		enum tc_cc_channel_t channel_index, uint16_t buffer_value)
{
	if (tc_is_tc0(void *tc)) {
    2510:	e6 fd       	sbrc	r30, 6
    2512:	17 c0       	rjmp	.+46     	; 0x2542 <setGreenLEDValue+0xe2>
		switch (channel_index) {
    2514:	82 30       	cpi	r24, 0x02	; 2
    2516:	61 f0       	breq	.+24     	; 0x2530 <setGreenLEDValue+0xd0>
    2518:	18 f4       	brcc	.+6      	; 0x2520 <setGreenLEDValue+0xc0>
    251a:	81 30       	cpi	r24, 0x01	; 1
    251c:	e1 f4       	brne	.+56     	; 0x2556 <setGreenLEDValue+0xf6>
    251e:	05 c0       	rjmp	.+10     	; 0x252a <setGreenLEDValue+0xca>
    2520:	83 30       	cpi	r24, 0x03	; 3
    2522:	49 f0       	breq	.+18     	; 0x2536 <setGreenLEDValue+0xd6>
    2524:	84 30       	cpi	r24, 0x04	; 4
    2526:	b9 f4       	brne	.+46     	; 0x2556 <setGreenLEDValue+0xf6>
    2528:	09 c0       	rjmp	.+18     	; 0x253c <setGreenLEDValue+0xdc>
		case TC_CCA:
			((TC0_t *)tc)->CCABUF = buffer_value;
    252a:	20 af       	std	Z+56, r18	; 0x38
    252c:	31 af       	std	Z+57, r19	; 0x39
    252e:	08 95       	ret
			break;
		case TC_CCB:
			((TC0_t *)tc)->CCBBUF = buffer_value;
    2530:	22 af       	std	Z+58, r18	; 0x3a
    2532:	33 af       	std	Z+59, r19	; 0x3b
    2534:	08 95       	ret
			break;
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
    2536:	24 af       	std	Z+60, r18	; 0x3c
    2538:	35 af       	std	Z+61, r19	; 0x3d
    253a:	08 95       	ret
			break;
		case TC_CCD:
			((TC0_t *)tc)->CCDBUF = buffer_value;
    253c:	26 af       	std	Z+62, r18	; 0x3e
    253e:	37 af       	std	Z+63, r19	; 0x3f
    2540:	08 95       	ret
			break;
		}
	} else if (tc_is_tc1(void *tc)) {
			switch (channel_index) {
    2542:	81 30       	cpi	r24, 0x01	; 1
    2544:	19 f0       	breq	.+6      	; 0x254c <setGreenLEDValue+0xec>
    2546:	82 30       	cpi	r24, 0x02	; 2
    2548:	31 f4       	brne	.+12     	; 0x2556 <setGreenLEDValue+0xf6>
    254a:	03 c0       	rjmp	.+6      	; 0x2552 <setGreenLEDValue+0xf2>
			case TC_CCA:
				((TC1_t *)tc)->CCABUF = buffer_value;
    254c:	20 af       	std	Z+56, r18	; 0x38
    254e:	31 af       	std	Z+57, r19	; 0x39
    2550:	08 95       	ret
				break;
			case TC_CCB:
				((TC1_t *)tc)->CCBBUF = buffer_value;
    2552:	22 af       	std	Z+58, r18	; 0x3a
    2554:	33 af       	std	Z+59, r19	; 0x3b
    2556:	08 95       	ret

00002558 <setBlueLEDValue>:
}

void setBlueLEDValue(uint8_t percent)
{
    2558:	85 36       	cpi	r24, 0x65	; 101
    255a:	08 f0       	brcs	.+2      	; 0x255e <setBlueLEDValue+0x6>
    255c:	84 e6       	ldi	r24, 0x64	; 100
	if (percent > 100) {
		percent = 100;
	}
	if (swapBlueGreen)
    255e:	90 91 b5 2b 	lds	r25, 0x2BB5
    2562:	99 23       	and	r25, r25
    2564:	e1 f1       	breq	.+120    	; 0x25de <setBlueLEDValue+0x86>
		pwm_set_duty_cycle_percent(&pwm_cfg[GREEN_CFG], 100 - percent);
    2566:	24 e6       	ldi	r18, 0x64	; 100
    2568:	28 1b       	sub	r18, r24
			(uint16_t)(((uint32_t)config->period *
    256a:	a0 91 c2 2b 	lds	r26, 0x2BC2
    256e:	b0 91 c3 2b 	lds	r27, 0x2BC3
    2572:	30 e0       	ldi	r19, 0x00	; 0
    2574:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <__umulhisi3>
			(uint32_t)duty_cycle_scale) / 100));
    2578:	24 e6       	ldi	r18, 0x64	; 100
    257a:	30 e0       	ldi	r19, 0x00	; 0
    257c:	40 e0       	ldi	r20, 0x00	; 0
    257e:	50 e0       	ldi	r21, 0x00	; 0
    2580:	0e 94 b0 24 	call	0x4960	; 0x4960 <__udivmodsi4>
 */
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, config->channel,
    2584:	80 91 bf 2b 	lds	r24, 0x2BBF
    2588:	e0 91 bd 2b 	lds	r30, 0x2BBD
    258c:	f0 91 be 2b 	lds	r31, 0x2BBE
 * \param buffer_value Counter Buffer value
 */
static inline void tc_write_cc_buffer(volatile void *tc,
		enum tc_cc_channel_t channel_index, uint16_t buffer_value)
{
	if (tc_is_tc0(void *tc)) {
    2590:	e6 fd       	sbrc	r30, 6
    2592:	19 c0       	rjmp	.+50     	; 0x25c6 <setBlueLEDValue+0x6e>
		switch (channel_index) {
    2594:	82 30       	cpi	r24, 0x02	; 2
    2596:	71 f0       	breq	.+28     	; 0x25b4 <setBlueLEDValue+0x5c>
    2598:	20 f4       	brcc	.+8      	; 0x25a2 <setBlueLEDValue+0x4a>
    259a:	81 30       	cpi	r24, 0x01	; 1
    259c:	09 f0       	breq	.+2      	; 0x25a0 <setBlueLEDValue+0x48>
    259e:	57 c0       	rjmp	.+174    	; 0x264e <setBlueLEDValue+0xf6>
    25a0:	06 c0       	rjmp	.+12     	; 0x25ae <setBlueLEDValue+0x56>
    25a2:	83 30       	cpi	r24, 0x03	; 3
    25a4:	51 f0       	breq	.+20     	; 0x25ba <setBlueLEDValue+0x62>
    25a6:	84 30       	cpi	r24, 0x04	; 4
    25a8:	09 f0       	breq	.+2      	; 0x25ac <setBlueLEDValue+0x54>
    25aa:	51 c0       	rjmp	.+162    	; 0x264e <setBlueLEDValue+0xf6>
    25ac:	09 c0       	rjmp	.+18     	; 0x25c0 <setBlueLEDValue+0x68>
		case TC_CCA:
			((TC0_t *)tc)->CCABUF = buffer_value;
    25ae:	20 af       	std	Z+56, r18	; 0x38
    25b0:	31 af       	std	Z+57, r19	; 0x39
    25b2:	08 95       	ret
			break;
		case TC_CCB:
			((TC0_t *)tc)->CCBBUF = buffer_value;
    25b4:	22 af       	std	Z+58, r18	; 0x3a
    25b6:	33 af       	std	Z+59, r19	; 0x3b
    25b8:	08 95       	ret
			break;
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
    25ba:	24 af       	std	Z+60, r18	; 0x3c
    25bc:	35 af       	std	Z+61, r19	; 0x3d
    25be:	08 95       	ret
			break;
		case TC_CCD:
			((TC0_t *)tc)->CCDBUF = buffer_value;
    25c0:	26 af       	std	Z+62, r18	; 0x3e
    25c2:	37 af       	std	Z+63, r19	; 0x3f
    25c4:	08 95       	ret
			break;
		}
	} else if (tc_is_tc1(void *tc)) {
			switch (channel_index) {
    25c6:	81 30       	cpi	r24, 0x01	; 1
    25c8:	21 f0       	breq	.+8      	; 0x25d2 <setBlueLEDValue+0x7a>
    25ca:	82 30       	cpi	r24, 0x02	; 2
    25cc:	09 f0       	breq	.+2      	; 0x25d0 <setBlueLEDValue+0x78>
    25ce:	3f c0       	rjmp	.+126    	; 0x264e <setBlueLEDValue+0xf6>
    25d0:	03 c0       	rjmp	.+6      	; 0x25d8 <setBlueLEDValue+0x80>
			case TC_CCA:
				((TC1_t *)tc)->CCABUF = buffer_value;
    25d2:	20 af       	std	Z+56, r18	; 0x38
    25d4:	31 af       	std	Z+57, r19	; 0x39
    25d6:	08 95       	ret
				break;
			case TC_CCB:
				((TC1_t *)tc)->CCBBUF = buffer_value;
    25d8:	22 af       	std	Z+58, r18	; 0x3a
    25da:	33 af       	std	Z+59, r19	; 0x3b
    25dc:	08 95       	ret
	else
		pwm_set_duty_cycle_percent(&pwm_cfg[BLUE_CFG], 100 - percent);
    25de:	24 e6       	ldi	r18, 0x64	; 100
    25e0:	28 1b       	sub	r18, r24
			(uint16_t)(((uint32_t)config->period *
    25e2:	a0 91 c9 2b 	lds	r26, 0x2BC9
    25e6:	b0 91 ca 2b 	lds	r27, 0x2BCA
    25ea:	30 e0       	ldi	r19, 0x00	; 0
    25ec:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <__umulhisi3>
			(uint32_t)duty_cycle_scale) / 100));
    25f0:	24 e6       	ldi	r18, 0x64	; 100
    25f2:	30 e0       	ldi	r19, 0x00	; 0
    25f4:	40 e0       	ldi	r20, 0x00	; 0
    25f6:	50 e0       	ldi	r21, 0x00	; 0
    25f8:	0e 94 b0 24 	call	0x4960	; 0x4960 <__udivmodsi4>
 */
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, config->channel,
    25fc:	80 91 c6 2b 	lds	r24, 0x2BC6
    2600:	e0 91 c4 2b 	lds	r30, 0x2BC4
    2604:	f0 91 c5 2b 	lds	r31, 0x2BC5
 * \param buffer_value Counter Buffer value
 */
static inline void tc_write_cc_buffer(volatile void *tc,
		enum tc_cc_channel_t channel_index, uint16_t buffer_value)
{
	if (tc_is_tc0(void *tc)) {
    2608:	e6 fd       	sbrc	r30, 6
    260a:	17 c0       	rjmp	.+46     	; 0x263a <setBlueLEDValue+0xe2>
		switch (channel_index) {
    260c:	82 30       	cpi	r24, 0x02	; 2
    260e:	61 f0       	breq	.+24     	; 0x2628 <setBlueLEDValue+0xd0>
    2610:	18 f4       	brcc	.+6      	; 0x2618 <setBlueLEDValue+0xc0>
    2612:	81 30       	cpi	r24, 0x01	; 1
    2614:	e1 f4       	brne	.+56     	; 0x264e <setBlueLEDValue+0xf6>
    2616:	05 c0       	rjmp	.+10     	; 0x2622 <setBlueLEDValue+0xca>
    2618:	83 30       	cpi	r24, 0x03	; 3
    261a:	49 f0       	breq	.+18     	; 0x262e <setBlueLEDValue+0xd6>
    261c:	84 30       	cpi	r24, 0x04	; 4
    261e:	b9 f4       	brne	.+46     	; 0x264e <setBlueLEDValue+0xf6>
    2620:	09 c0       	rjmp	.+18     	; 0x2634 <setBlueLEDValue+0xdc>
		case TC_CCA:
			((TC0_t *)tc)->CCABUF = buffer_value;
    2622:	20 af       	std	Z+56, r18	; 0x38
    2624:	31 af       	std	Z+57, r19	; 0x39
    2626:	08 95       	ret
			break;
		case TC_CCB:
			((TC0_t *)tc)->CCBBUF = buffer_value;
    2628:	22 af       	std	Z+58, r18	; 0x3a
    262a:	33 af       	std	Z+59, r19	; 0x3b
    262c:	08 95       	ret
			break;
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
    262e:	24 af       	std	Z+60, r18	; 0x3c
    2630:	35 af       	std	Z+61, r19	; 0x3d
    2632:	08 95       	ret
			break;
		case TC_CCD:
			((TC0_t *)tc)->CCDBUF = buffer_value;
    2634:	26 af       	std	Z+62, r18	; 0x3e
    2636:	37 af       	std	Z+63, r19	; 0x3f
    2638:	08 95       	ret
			break;
		}
	} else if (tc_is_tc1(void *tc)) {
			switch (channel_index) {
    263a:	81 30       	cpi	r24, 0x01	; 1
    263c:	19 f0       	breq	.+6      	; 0x2644 <setBlueLEDValue+0xec>
    263e:	82 30       	cpi	r24, 0x02	; 2
    2640:	31 f4       	brne	.+12     	; 0x264e <setBlueLEDValue+0xf6>
    2642:	03 c0       	rjmp	.+6      	; 0x264a <setBlueLEDValue+0xf2>
			case TC_CCA:
				((TC1_t *)tc)->CCABUF = buffer_value;
    2644:	20 af       	std	Z+56, r18	; 0x38
    2646:	31 af       	std	Z+57, r19	; 0x39
    2648:	08 95       	ret
				break;
			case TC_CCB:
				((TC1_t *)tc)->CCBBUF = buffer_value;
    264a:	22 af       	std	Z+58, r18	; 0x3a
    264c:	33 af       	std	Z+59, r19	; 0x3b
    264e:	08 95       	ret

00002650 <setLEDValue>:
}

void setLEDValue(uint8_t r, uint8_t g, uint8_t b)
{
    2650:	cf 93       	push	r28
    2652:	df 93       	push	r29
    2654:	d6 2f       	mov	r29, r22
    2656:	c4 2f       	mov	r28, r20
	setRedLEDValue(r);
    2658:	c7 de       	rcall	.-626    	; 0x23e8 <setRedLEDValue>
	setGreenLEDValue(g);
    265a:	8d 2f       	mov	r24, r29
    265c:	01 df       	rcall	.-510    	; 0x2460 <setGreenLEDValue>
	setBlueLEDValue(b);
    265e:	8c 2f       	mov	r24, r28
    2660:	7b df       	rcall	.-266    	; 0x2558 <setBlueLEDValue>
    2662:	df 91       	pop	r29
    2664:	cf 91       	pop	r28
    2666:	08 95       	ret

00002668 <getSystemTime>:
    2668:	0f 93       	push	r16
    266a:	1f 93       	push	r17
    266c:	8f b7       	in	r24, 0x3f	; 63
    266e:	f8 94       	cli
    2670:	00 91 cb 2b 	lds	r16, 0x2BCB
    2674:	10 91 cc 2b 	lds	r17, 0x2BCC
    2678:	20 91 cd 2b 	lds	r18, 0x2BCD
    267c:	30 91 ce 2b 	lds	r19, 0x2BCE
    2680:	8f bf       	out	0x3f, r24	; 63
    2682:	60 2f       	mov	r22, r16
    2684:	71 2f       	mov	r23, r17
    2686:	82 2f       	mov	r24, r18
    2688:	93 2f       	mov	r25, r19
    268a:	1f 91       	pop	r17
    268c:	0f 91       	pop	r16
    268e:	08 95       	ret

00002690 <tickSystemTime>:
    2690:	2f b7       	in	r18, 0x3f	; 63
    2692:	f8 94       	cli
    2694:	80 91 cb 2b 	lds	r24, 0x2BCB
    2698:	90 91 cc 2b 	lds	r25, 0x2BCC
    269c:	a0 91 cd 2b 	lds	r26, 0x2BCD
    26a0:	b0 91 ce 2b 	lds	r27, 0x2BCE
    26a4:	01 96       	adiw	r24, 0x01	; 1
    26a6:	a1 1d       	adc	r26, r1
    26a8:	b1 1d       	adc	r27, r1
    26aa:	80 93 cb 2b 	sts	0x2BCB, r24
    26ae:	90 93 cc 2b 	sts	0x2BCC, r25
    26b2:	a0 93 cd 2b 	sts	0x2BCD, r26
    26b6:	b0 93 ce 2b 	sts	0x2BCE, r27
    26ba:	2f bf       	out	0x3f, r18	; 63
    26bc:	08 95       	ret

000026be <startTimeout>:
	// Restore the state of the interrupts:
	cpu_irq_restore(irq_state);
}

// Initialize the Timeout Struct with the current System Tick Count and the Milliseconds delay
void startTimeout(struct Timeout* to, uint32_t ms) {
    26be:	cf 92       	push	r12
    26c0:	df 92       	push	r13
    26c2:	ef 92       	push	r14
    26c4:	ff 92       	push	r15
    26c6:	cf 93       	push	r28
    26c8:	df 93       	push	r29
    26ca:	ec 01       	movw	r28, r24
    26cc:	6a 01       	movw	r12, r20
    26ce:	7b 01       	movw	r14, r22
	to->start = getSystemTime();
    26d0:	cb df       	rcall	.-106    	; 0x2668 <getSystemTime>
    26d2:	68 83       	st	Y, r22
    26d4:	79 83       	std	Y+1, r23	; 0x01
    26d6:	8a 83       	std	Y+2, r24	; 0x02
    26d8:	9b 83       	std	Y+3, r25	; 0x03
	to->delay = ms;
    26da:	cc 82       	std	Y+4, r12	; 0x04
    26dc:	dd 82       	std	Y+5, r13	; 0x05
    26de:	ee 82       	std	Y+6, r14	; 0x06
    26e0:	ff 82       	std	Y+7, r15	; 0x07
}
    26e2:	df 91       	pop	r29
    26e4:	cf 91       	pop	r28
    26e6:	ff 90       	pop	r15
    26e8:	ef 90       	pop	r14
    26ea:	df 90       	pop	r13
    26ec:	cf 90       	pop	r12
    26ee:	08 95       	ret

000026f0 <checkTimeout>:

// True if not Cancelled AND Current System Tick Count >= Delay Count
// False if Cancelled OR Current System Tick Count < Delay
bool checkTimeout(struct Timeout* to) {
    26f0:	cf 92       	push	r12
    26f2:	df 92       	push	r13
    26f4:	ef 92       	push	r14
    26f6:	ff 92       	push	r15
    26f8:	0f 93       	push	r16
    26fa:	1f 93       	push	r17
    26fc:	cf 93       	push	r28
    26fe:	df 93       	push	r29
    2700:	ec 01       	movw	r28, r24
	return (to->delay != 0) && ((getSystemTime() - to->start) >= to->delay);
    2702:	4c 81       	ldd	r20, Y+4	; 0x04
    2704:	5d 81       	ldd	r21, Y+5	; 0x05
    2706:	6e 81       	ldd	r22, Y+6	; 0x06
    2708:	7f 81       	ldd	r23, Y+7	; 0x07
    270a:	45 2b       	or	r20, r21
    270c:	46 2b       	or	r20, r22
    270e:	47 2b       	or	r20, r23
    2710:	d1 f0       	breq	.+52     	; 0x2746 <checkTimeout+0x56>
    2712:	aa df       	rcall	.-172    	; 0x2668 <getSystemTime>
    2714:	08 81       	ld	r16, Y
    2716:	19 81       	ldd	r17, Y+1	; 0x01
    2718:	2a 81       	ldd	r18, Y+2	; 0x02
    271a:	3b 81       	ldd	r19, Y+3	; 0x03
    271c:	6b 01       	movw	r12, r22
    271e:	7c 01       	movw	r14, r24
    2720:	c0 1a       	sub	r12, r16
    2722:	d1 0a       	sbc	r13, r17
    2724:	e2 0a       	sbc	r14, r18
    2726:	f3 0a       	sbc	r15, r19
    2728:	41 e0       	ldi	r20, 0x01	; 1
    272a:	50 e0       	ldi	r21, 0x00	; 0
    272c:	8c 81       	ldd	r24, Y+4	; 0x04
    272e:	9d 81       	ldd	r25, Y+5	; 0x05
    2730:	ae 81       	ldd	r26, Y+6	; 0x06
    2732:	bf 81       	ldd	r27, Y+7	; 0x07
    2734:	c8 16       	cp	r12, r24
    2736:	d9 06       	cpc	r13, r25
    2738:	ea 06       	cpc	r14, r26
    273a:	fb 06       	cpc	r15, r27
    273c:	10 f4       	brcc	.+4      	; 0x2742 <checkTimeout+0x52>
    273e:	40 e0       	ldi	r20, 0x00	; 0
    2740:	50 e0       	ldi	r21, 0x00	; 0
    2742:	ca 01       	movw	r24, r20
    2744:	02 c0       	rjmp	.+4      	; 0x274a <checkTimeout+0x5a>
    2746:	80 e0       	ldi	r24, 0x00	; 0
    2748:	90 e0       	ldi	r25, 0x00	; 0
}
    274a:	81 70       	andi	r24, 0x01	; 1
    274c:	df 91       	pop	r29
    274e:	cf 91       	pop	r28
    2750:	1f 91       	pop	r17
    2752:	0f 91       	pop	r16
    2754:	ff 90       	pop	r15
    2756:	ef 90       	pop	r14
    2758:	df 90       	pop	r13
    275a:	cf 90       	pop	r12
    275c:	08 95       	ret

0000275e <cancelTimeout>:

// Set the Delay to 0 to cancel the timeout.
void cancelTimeout(struct Timeout* to) {
	to->delay = 0;
    275e:	fc 01       	movw	r30, r24
    2760:	14 82       	std	Z+4, r1	; 0x04
    2762:	15 82       	std	Z+5, r1	; 0x05
    2764:	16 82       	std	Z+6, r1	; 0x06
    2766:	17 82       	std	Z+7, r1	; 0x07
    2768:	08 95       	ret

0000276a <enableSysTick>:
	// Leave it to be enabled later:
	disableSysTick();
}

void enableSysTick(void) {
	tc_enable(SYSTICK_TIMER);
    276a:	80 e4       	ldi	r24, 0x40	; 64
    276c:	98 e0       	ldi	r25, 0x08	; 8
    276e:	0c 94 bd 1b 	jmp	0x377a	; 0x377a <tc_enable>

00002772 <disableSysTick>:
}

void disableSysTick(void) {
	tc_disable(SYSTICK_TIMER);
    2772:	80 e4       	ldi	r24, 0x40	; 64
    2774:	98 e0       	ldi	r25, 0x08	; 8
    2776:	0c 94 03 1c 	jmp	0x3806	; 0x3806 <tc_disable>

0000277a <clearSysTickFlag>:
 * \param tc Pointer to TC module.
 * \note  OVFIF is cleared
 */
static inline void tc_clear_overflow(volatile void *tc)
{
	((TC0_t *)tc)->INTFLAGS |= TC0_OVFIF_bm;
    277a:	e0 e4       	ldi	r30, 0x40	; 64
    277c:	f8 e0       	ldi	r31, 0x08	; 8
    277e:	84 85       	ldd	r24, Z+12	; 0x0c
    2780:	81 60       	ori	r24, 0x01	; 1
    2782:	84 87       	std	Z+12, r24	; 0x0c
    2784:	08 95       	ret

00002786 <setupSysTick>:
 */

#include <asf.h>
#include "systick.h"

void setupSysTick(tc_callback_t tick) {
    2786:	0f 93       	push	r16
    2788:	1f 93       	push	r17
    278a:	cf 93       	push	r28
    278c:	df 93       	push	r29
    278e:	8c 01       	movw	r16, r24
	
	// Make sure systick is enabled before trying to making changes:
	enableSysTick();
    2790:	ec df       	rcall	.-40     	; 0x276a <enableSysTick>
 * \param dir Timer direction :
 */
static inline void tc_set_direction(volatile void *tc, enum tc_dir_t dir)
{
	if (dir == TC_UP) {
		((TC0_t *)tc)->CTRLFCLR |= ~TC0_DIR_bm;
    2792:	c0 e4       	ldi	r28, 0x40	; 64
    2794:	d8 e0       	ldi	r29, 0x08	; 8
    2796:	88 85       	ldd	r24, Y+8	; 0x08
    2798:	8e 6f       	ori	r24, 0xFE	; 254
    279a:	88 87       	std	Y+8, r24	; 0x08
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    279c:	89 81       	ldd	r24, Y+1	; 0x01
    279e:	88 7f       	andi	r24, 0xF8	; 248
    27a0:	89 83       	std	Y+1, r24	; 0x01
 * \param tc Pointer to TC module.
 * \param cnt_value Counter value :
 */
static inline void tc_write_count(volatile void *tc, uint16_t cnt_value)
{
	((TC0_t *)tc)->CNT = cnt_value;
    27a2:	18 a2       	std	Y+32, r1	; 0x20
    27a4:	19 a2       	std	Y+33, r1	; 0x21
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    27a6:	80 e0       	ldi	r24, 0x00	; 0
    27a8:	9d e7       	ldi	r25, 0x7D	; 125
    27aa:	8e a3       	std	Y+38, r24	; 0x26
    27ac:	9f a3       	std	Y+39, r25	; 0x27
	
	// Set the period:
	tc_write_period(SYSTICK_TIMER, F_CPU/SYSTICK_FREQUENCY);

	// Clear the overflow flag:
	clearSysTickFlag();
    27ae:	e5 df       	rcall	.-54     	; 0x277a <clearSysTickFlag>
	
	// Set the callback:
	tc_set_overflow_interrupt_callback(SYSTICK_TIMER, tick);
    27b0:	b8 01       	movw	r22, r16
    27b2:	80 e4       	ldi	r24, 0x40	; 64
    27b4:	98 e0       	ldi	r25, 0x08	; 8
    27b6:	0e 94 49 1c 	call	0x3892	; 0x3892 <tc_set_overflow_interrupt_callback>
 * \note  Configures OVFINTLVL in INTCTRLA
 */
static inline void tc_set_overflow_interrupt_level(volatile void *tc,
		enum TC_INT_LEVEL_t level)
{
	((TC0_t *)tc)->INTCTRLA = ((TC0_t *)tc)->INTCTRLA & ~TC0_OVFINTLVL_gm;
    27ba:	8e 81       	ldd	r24, Y+6	; 0x06
    27bc:	8c 7f       	andi	r24, 0xFC	; 252
    27be:	8e 83       	std	Y+6, r24	; 0x06
	((TC0_t *)tc)->INTCTRLA =
			((TC0_t *)tc)->INTCTRLA | (level << TC0_OVFINTLVL_gp);
    27c0:	8e 81       	ldd	r24, Y+6	; 0x06
 */
static inline void tc_set_overflow_interrupt_level(volatile void *tc,
		enum TC_INT_LEVEL_t level)
{
	((TC0_t *)tc)->INTCTRLA = ((TC0_t *)tc)->INTCTRLA & ~TC0_OVFINTLVL_gm;
	((TC0_t *)tc)->INTCTRLA =
    27c2:	81 60       	ori	r24, 0x01	; 1
    27c4:	8e 83       	std	Y+6, r24	; 0x06
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    27c6:	88 81       	ld	r24, Y
 * \note Configuring the clock starts alos the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    27c8:	80 7f       	andi	r24, 0xF0	; 240
    27ca:	81 60       	ori	r24, 0x01	; 1
    27cc:	88 83       	st	Y, r24

	// Select the clock source (starts counting):
	tc_write_clock_source(SYSTICK_TIMER, TC_CLKSEL_DIV1_gc);

	// Leave it to be enabled later:
	disableSysTick();
    27ce:	d1 df       	rcall	.-94     	; 0x2772 <disableSysTick>
}
    27d0:	df 91       	pop	r29
    27d2:	cf 91       	pop	r28
    27d4:	1f 91       	pop	r17
    27d6:	0f 91       	pop	r16
    27d8:	08 95       	ret

000027da <setupUsb>:
}

bool USBPluggedIn(void)
{
	return ioport_get_pin_level(USB_5V_PIN);
}
    27da:	60 e1       	ldi	r22, 0x10	; 16
    27dc:	83 e0       	ldi	r24, 0x03	; 3
    27de:	27 d1       	rcall	.+590    	; 0x2a2e <sysclk_enable_module>
    27e0:	80 ea       	ldi	r24, 0xA0	; 160
    27e2:	98 e2       	ldi	r25, 0x28	; 40
    27e4:	a4 dc       	rcall	.-1720   	; 0x212e <sendDBGString>
    27e6:	d2 d0       	rcall	.+420    	; 0x298c <WatchdogPet>
    27e8:	64 e5       	ldi	r22, 0x54	; 84
    27ea:	70 e2       	ldi	r23, 0x20	; 32
    27ec:	80 ea       	ldi	r24, 0xA0	; 160
    27ee:	98 e0       	ldi	r25, 0x08	; 8
    27f0:	0e 94 8b 1d 	call	0x3b16	; 0x3b16 <usart_init_rs232>
    27f4:	88 23       	and	r24, r24
    27f6:	21 f0       	breq	.+8      	; 0x2800 <setupUsb+0x26>
    27f8:	80 eb       	ldi	r24, 0xB0	; 176
    27fa:	98 e2       	ldi	r25, 0x28	; 40
    27fc:	a6 dc       	rcall	.-1716   	; 0x214a <sendDBGLine>
    27fe:	03 c0       	rjmp	.+6      	; 0x2806 <setupUsb+0x2c>
    2800:	85 eb       	ldi	r24, 0xB5	; 181
    2802:	98 e2       	ldi	r25, 0x28	; 40
    2804:	a2 dc       	rcall	.-1724   	; 0x214a <sendDBGLine>
    2806:	40 e4       	ldi	r20, 0x40	; 64
    2808:	65 ed       	ldi	r22, 0xD5	; 213
    280a:	7b e2       	ldi	r23, 0x2B	; 43
    280c:	8f ec       	ldi	r24, 0xCF	; 207
    280e:	9b e2       	ldi	r25, 0x2B	; 43
    2810:	0e 94 8b 04 	call	0x916	; 0x916 <initCB>
    2814:	40 e2       	ldi	r20, 0x20	; 32
    2816:	6b e1       	ldi	r22, 0x1B	; 27
    2818:	7c e2       	ldi	r23, 0x2C	; 44
    281a:	85 e1       	ldi	r24, 0x15	; 21
    281c:	9c e2       	ldi	r25, 0x2C	; 44
    281e:	0e 94 8b 04 	call	0x916	; 0x916 <initCB>
    2822:	e0 ea       	ldi	r30, 0xA0	; 160
    2824:	f8 e0       	ldi	r31, 0x08	; 8
    2826:	83 81       	ldd	r24, Z+3	; 0x03
    2828:	8f 7c       	andi	r24, 0xCF	; 207
    282a:	80 61       	ori	r24, 0x10	; 16
    282c:	83 83       	std	Z+3, r24	; 0x03
    282e:	08 95       	ret

00002830 <sendUSBChar>:
    2830:	cf 93       	push	r28
    2832:	c8 2f       	mov	r28, r24
    2834:	6c 2f       	mov	r22, r28
    2836:	85 e1       	ldi	r24, 0x15	; 21
    2838:	9c e2       	ldi	r25, 0x2C	; 44
    283a:	0e 94 94 04 	call	0x928	; 0x928 <addByteToCB>
    283e:	88 23       	and	r24, r24
    2840:	c9 f3       	breq	.-14     	; 0x2834 <sendUSBChar+0x4>
    2842:	e0 ea       	ldi	r30, 0xA0	; 160
    2844:	f8 e0       	ldi	r31, 0x08	; 8
    2846:	83 81       	ldd	r24, Z+3	; 0x03
    2848:	8c 7f       	andi	r24, 0xFC	; 252
    284a:	81 60       	ori	r24, 0x01	; 1
    284c:	83 83       	std	Z+3, r24	; 0x03
    284e:	cf 91       	pop	r28
    2850:	08 95       	ret

00002852 <sendUSBString>:
    2852:	1f 93       	push	r17
    2854:	cf 93       	push	r28
    2856:	df 93       	push	r29
    2858:	ec 01       	movw	r28, r24
    285a:	16 2f       	mov	r17, r22
    285c:	88 81       	ld	r24, Y
    285e:	88 23       	and	r24, r24
    2860:	29 f0       	breq	.+10     	; 0x286c <sendUSBString+0x1a>
    2862:	21 96       	adiw	r28, 0x01	; 1
    2864:	e5 df       	rcall	.-54     	; 0x2830 <sendUSBChar>
    2866:	89 91       	ld	r24, Y+
    2868:	81 11       	cpse	r24, r1
    286a:	fc cf       	rjmp	.-8      	; 0x2864 <sendUSBString+0x12>
    286c:	11 23       	and	r17, r17
    286e:	11 f0       	breq	.+4      	; 0x2874 <sendUSBString+0x22>
    2870:	80 e0       	ldi	r24, 0x00	; 0
    2872:	de df       	rcall	.-68     	; 0x2830 <sendUSBChar>
    2874:	df 91       	pop	r29
    2876:	cf 91       	pop	r28
    2878:	1f 91       	pop	r17
    287a:	08 95       	ret

0000287c <sendUSBLine>:
    287c:	60 e0       	ldi	r22, 0x00	; 0
    287e:	e9 df       	rcall	.-46     	; 0x2852 <sendUSBString>
    2880:	8d e0       	ldi	r24, 0x0D	; 13
    2882:	d6 df       	rcall	.-84     	; 0x2830 <sendUSBChar>
    2884:	8a e0       	ldi	r24, 0x0A	; 10
    2886:	d4 cf       	rjmp	.-88     	; 0x2830 <sendUSBChar>

00002888 <recvUSBString>:
    2888:	46 2f       	mov	r20, r22
    288a:	bc 01       	movw	r22, r24
    288c:	8f ec       	ldi	r24, 0xCF	; 207
    288e:	9b e2       	ldi	r25, 0x2B	; 43
    2890:	0c 94 f2 04 	jmp	0x9e4	; 0x9e4 <readStringFromCB>

00002894 <__vector_25>:

ISR(USB_SERIAL_RX_INT) {
    2894:	1f 92       	push	r1
    2896:	0f 92       	push	r0
    2898:	0f b6       	in	r0, 0x3f	; 63
    289a:	0f 92       	push	r0
    289c:	11 24       	eor	r1, r1
    289e:	0b b6       	in	r0, 0x3b	; 59
    28a0:	0f 92       	push	r0
    28a2:	2f 93       	push	r18
    28a4:	3f 93       	push	r19
    28a6:	4f 93       	push	r20
    28a8:	5f 93       	push	r21
    28aa:	6f 93       	push	r22
    28ac:	7f 93       	push	r23
    28ae:	8f 93       	push	r24
    28b0:	9f 93       	push	r25
    28b2:	af 93       	push	r26
    28b4:	bf 93       	push	r27
    28b6:	ef 93       	push	r30
    28b8:	ff 93       	push	r31
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    28ba:	60 91 a0 08 	lds	r22, 0x08A0
	char temp = usart_get(USB_SERIAL);
	
	// Insta-reset if this is the break character for
	// entering the bootloader: (Really shouldn't be
	// in the usb code, but it's the quickest)
	if (temp == 0x1B) {
    28be:	6b 31       	cpi	r22, 0x1B	; 27
    28c0:	29 f4       	brne	.+10     	; 0x28cc <__vector_25+0x38>
    28c2:	61 e0       	ldi	r22, 0x01	; 1
    28c4:	89 e7       	ldi	r24, 0x79	; 121
    28c6:	90 e0       	ldi	r25, 0x00	; 0
    28c8:	8b d1       	rcall	.+790    	; 0x2be0 <ccp_write_io>
    28ca:	ff cf       	rjmp	.-2      	; 0x28ca <__vector_25+0x36>
		reset_do_soft_reset();
	}
	
	// Add the byte to the buffer. (If it is not full):
	addByteToCB(&rxCB, temp);
    28cc:	8f ec       	ldi	r24, 0xCF	; 207
    28ce:	9b e2       	ldi	r25, 0x2B	; 43
    28d0:	0e 94 94 04 	call	0x928	; 0x928 <addByteToCB>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_rx_complete(USART_t *usart)
{
	(usart)->STATUS = USART_RXCIF_bm;
    28d4:	80 e8       	ldi	r24, 0x80	; 128
    28d6:	e0 ea       	ldi	r30, 0xA0	; 160
    28d8:	f8 e0       	ldi	r31, 0x08	; 8
    28da:	81 83       	std	Z+1, r24	; 0x01
	
	// Clear the interrupt flag:
	usart_clear_rx_complete(USB_SERIAL);
}
    28dc:	ff 91       	pop	r31
    28de:	ef 91       	pop	r30
    28e0:	bf 91       	pop	r27
    28e2:	af 91       	pop	r26
    28e4:	9f 91       	pop	r25
    28e6:	8f 91       	pop	r24
    28e8:	7f 91       	pop	r23
    28ea:	6f 91       	pop	r22
    28ec:	5f 91       	pop	r21
    28ee:	4f 91       	pop	r20
    28f0:	3f 91       	pop	r19
    28f2:	2f 91       	pop	r18
    28f4:	0f 90       	pop	r0
    28f6:	0b be       	out	0x3b, r0	; 59
    28f8:	0f 90       	pop	r0
    28fa:	0f be       	out	0x3f, r0	; 63
    28fc:	0f 90       	pop	r0
    28fe:	1f 90       	pop	r1
    2900:	18 95       	reti

00002902 <__vector_26>:

ISR(USB_SERIAL_DRE_INT) {
    2902:	1f 92       	push	r1
    2904:	0f 92       	push	r0
    2906:	0f b6       	in	r0, 0x3f	; 63
    2908:	0f 92       	push	r0
    290a:	11 24       	eor	r1, r1
    290c:	0b b6       	in	r0, 0x3b	; 59
    290e:	0f 92       	push	r0
    2910:	2f 93       	push	r18
    2912:	3f 93       	push	r19
    2914:	4f 93       	push	r20
    2916:	5f 93       	push	r21
    2918:	6f 93       	push	r22
    291a:	7f 93       	push	r23
    291c:	8f 93       	push	r24
    291e:	9f 93       	push	r25
    2920:	af 93       	push	r26
    2922:	bf 93       	push	r27
    2924:	ef 93       	push	r30
    2926:	ff 93       	push	r31
    2928:	cf 93       	push	r28
    292a:	df 93       	push	r29
    292c:	1f 92       	push	r1
    292e:	cd b7       	in	r28, 0x3d	; 61
    2930:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp;
	
	// Is there any data to send out?
	if (readByteFromCB(&txCB, &temp)) {
    2932:	be 01       	movw	r22, r28
    2934:	6f 5f       	subi	r22, 0xFF	; 255
    2936:	7f 4f       	sbci	r23, 0xFF	; 255
    2938:	85 e1       	ldi	r24, 0x15	; 21
    293a:	9c e2       	ldi	r25, 0x2C	; 44
    293c:	0e 94 b2 04 	call	0x964	; 0x964 <readByteFromCB>
    2940:	88 23       	and	r24, r24
    2942:	21 f0       	breq	.+8      	; 0x294c <__vector_26+0x4a>
		// Then send it:
		usart_put(USB_SERIAL, temp);
    2944:	89 81       	ldd	r24, Y+1	; 0x01
 * \param usart The USART module.
 * \param txdata The data to be transmited.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    2946:	80 93 a0 08 	sts	0x08A0, r24
    294a:	05 c0       	rjmp	.+10     	; 0x2956 <__vector_26+0x54>
 *              Use USART_DREINTLVL_t type.
 */
static inline void usart_set_dre_interrupt_level(USART_t *usart,
		enum usart_int_level_t level)
{
	(usart)->CTRLA = ((usart)->CTRLA & ~USART_DREINTLVL_gm) |
    294c:	e0 ea       	ldi	r30, 0xA0	; 160
    294e:	f8 e0       	ldi	r31, 0x08	; 8
    2950:	83 81       	ldd	r24, Z+3	; 0x03
    2952:	8c 7f       	andi	r24, 0xFC	; 252
    2954:	83 83       	std	Z+3, r24	; 0x03
	}
	else {
		// Disable the interrupt if there is no more data:
		usart_set_dre_interrupt_level(USB_SERIAL, USART_INT_LVL_OFF);
	}
    2956:	0f 90       	pop	r0
    2958:	df 91       	pop	r29
    295a:	cf 91       	pop	r28
    295c:	ff 91       	pop	r31
    295e:	ef 91       	pop	r30
    2960:	bf 91       	pop	r27
    2962:	af 91       	pop	r26
    2964:	9f 91       	pop	r25
    2966:	8f 91       	pop	r24
    2968:	7f 91       	pop	r23
    296a:	6f 91       	pop	r22
    296c:	5f 91       	pop	r21
    296e:	4f 91       	pop	r20
    2970:	3f 91       	pop	r19
    2972:	2f 91       	pop	r18
    2974:	0f 90       	pop	r0
    2976:	0b be       	out	0x3b, r0	; 59
    2978:	0f 90       	pop	r0
    297a:	0f be       	out	0x3f, r0	; 63
    297c:	0f 90       	pop	r0
    297e:	1f 90       	pop	r1
    2980:	18 95       	reti

00002982 <WatchdogInit>:
* subsystems for continuing operation.
*/
void WatchdogInit(void)
{
	// Setup prescaler
	wdt_set_timeout_period(WDT_TIMEOUT_PERIOD_8KCLK);
    2982:	8a e0       	ldi	r24, 0x0A	; 10
    2984:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <wdt_set_timeout_period>
	#if NO_WATCHDOG != 1
	/* Now enable the watchdog */
	wdt_enable();
    2988:	0c 94 eb 1d 	jmp	0x3bd6	; 0x3bd6 <wdt_enable>

0000298c <WatchdogPet>:
* Reset the hardware watchdog so it does not timeout and restart the
* processor.
*/
void WatchdogPet(void)
{
	sendDBGString(".");
    298c:	89 eb       	ldi	r24, 0xB9	; 185
    298e:	98 e2       	ldi	r25, 0x28	; 40
    2990:	ce db       	rcall	.-2148   	; 0x212e <sendDBGString>
	wdt_reset();
    2992:	a8 95       	wdr
    2994:	08 95       	ret

00002996 <WatchdogValidate>:
void WatchdogValidate(void)
{
	bool systemStalled = false;

	/* Main loop still running? */
	if (mainLoopWatchdog == 0)
    2996:	80 91 5b 20 	lds	r24, 0x205B
    299a:	90 91 5c 20 	lds	r25, 0x205C
    299e:	00 97       	sbiw	r24, 0x00	; 0
    29a0:	29 f0       	breq	.+10     	; 0x29ac <WatchdogValidate+0x16>
		// sendDBGLine("TASK_MAIN watchdog task timeout");
		// systemStalled = true;
	}
	else
	{
		mainLoopWatchdog--;
    29a2:	01 97       	sbiw	r24, 0x01	; 1
    29a4:	80 93 5b 20 	sts	0x205B, r24
    29a8:	90 93 5c 20 	sts	0x205C, r25
	}

	if (!systemStalled)
	{
		WatchdogPet();
    29ac:	ef cf       	rjmp	.-34     	; 0x298c <WatchdogPet>

000029ae <WatchDogEnable>:
	}
}

void WatchDogEnable(bool enable)
{
	if (enable)
    29ae:	88 23       	and	r24, r24
    29b0:	11 f0       	breq	.+4      	; 0x29b6 <WatchDogEnable+0x8>
	{
		wdt_enable();
    29b2:	0c 94 eb 1d 	jmp	0x3bd6	; 0x3bd6 <wdt_enable>
	}		
	else
	{
		wdt_disable();
    29b6:	0c 94 e4 1d 	jmp	0x3bc8	; 0x3bc8 <wdt_disable>

000029ba <WatchdogTaskRunning>:
* fail independently.
* @param task The task that is calling to confirm that it is still running.
*/
void WatchdogTaskRunning(taskDef task)
{
	switch (task)
    29ba:	88 23       	and	r24, r24
    29bc:	19 f0       	breq	.+6      	; 0x29c4 <WatchdogTaskRunning+0xa>
    29be:	82 30       	cpi	r24, 0x02	; 2
    29c0:	71 f4       	brne	.+28     	; 0x29de <WatchdogTaskRunning+0x24>
    29c2:	07 c0       	rjmp	.+14     	; 0x29d2 <WatchdogTaskRunning+0x18>
	{
		case TASK_MAIN:
		mainLoopWatchdog = MAIN_LOOP_WATCHDOG_RESET;
    29c4:	84 e6       	ldi	r24, 0x64	; 100
    29c6:	90 e0       	ldi	r25, 0x00	; 0
    29c8:	80 93 5b 20 	sts	0x205B, r24
    29cc:	90 93 5c 20 	sts	0x205C, r25
		break;
    29d0:	08 95       	ret
		case TASK_MODEM:
		modemResponseWatchdog = MODEM_RESPONSE_WATCHDOG_RESET;
    29d2:	84 e6       	ldi	r24, 0x64	; 100
    29d4:	90 e0       	ldi	r25, 0x00	; 0
    29d6:	80 93 5d 20 	sts	0x205D, r24
    29da:	90 93 5e 20 	sts	0x205E, r25
    29de:	08 95       	ret

000029e0 <sysclk_init>:
#ifdef CONFIG_OSC_RC32_CAL
	uint16_t cal;
#endif
	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    29e0:	8f ef       	ldi	r24, 0xFF	; 255
    29e2:	80 93 70 00 	sts	0x0070, r24
    29e6:	80 93 71 00 	sts	0x0071, r24
    29ea:	80 93 72 00 	sts	0x0072, r24
    29ee:	80 93 73 00 	sts	0x0073, r24
    29f2:	80 93 74 00 	sts	0x0074, r24
    29f6:	80 93 75 00 	sts	0x0075, r24
    29fa:	80 93 76 00 	sts	0x0076, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    29fe:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    2a00:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    2a02:	e0 e5       	ldi	r30, 0x50	; 80
    2a04:	f0 e0       	ldi	r31, 0x00	; 0
    2a06:	90 81       	ld	r25, Z
    2a08:	92 60       	ori	r25, 0x02	; 2
    2a0a:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2a0c:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    2a0e:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    2a10:	81 ff       	sbrs	r24, 1
    2a12:	fd cf       	rjmp	.-6      	; 0x2a0e <sysclk_init+0x2e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    2a14:	61 e0       	ldi	r22, 0x01	; 1
    2a16:	80 e4       	ldi	r24, 0x40	; 64
    2a18:	90 e0       	ldi	r25, 0x00	; 0
    2a1a:	e2 d0       	rcall	.+452    	; 0x2be0 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2a1c:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    2a1e:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    2a20:	e0 e5       	ldi	r30, 0x50	; 80
    2a22:	f0 e0       	ldi	r31, 0x00	; 0
    2a24:	90 81       	ld	r25, Z
    2a26:	9e 7f       	andi	r25, 0xFE	; 254
    2a28:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2a2a:	8f bf       	out	0x3f, r24	; 63
    2a2c:	08 95       	ret

00002a2e <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2a2e:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    2a30:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    2a32:	e8 2f       	mov	r30, r24
    2a34:	f0 e0       	ldi	r31, 0x00	; 0
    2a36:	e0 59       	subi	r30, 0x90	; 144
    2a38:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3a:	60 95       	com	r22
    2a3c:	80 81       	ld	r24, Z
    2a3e:	68 23       	and	r22, r24
    2a40:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2a42:	9f bf       	out	0x3f, r25	; 63
    2a44:	08 95       	ret

00002a46 <sysclk_disable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2a46:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    2a48:	f8 94       	cli

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
    2a4a:	e8 2f       	mov	r30, r24
    2a4c:	f0 e0       	ldi	r31, 0x00	; 0
    2a4e:	e0 59       	subi	r30, 0x90	; 144
    2a50:	ff 4f       	sbci	r31, 0xFF	; 255
    2a52:	80 81       	ld	r24, Z
    2a54:	68 2b       	or	r22, r24
    2a56:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2a58:	9f bf       	out	0x3f, r25	; 63
    2a5a:	08 95       	ret

00002a5c <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    2a5c:	81 15       	cp	r24, r1
    2a5e:	92 40       	sbci	r25, 0x02	; 2
    2a60:	59 f4       	brne	.+22     	; 0x2a78 <adc_enable_clock+0x1c>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
    2a62:	80 91 3b 2c 	lds	r24, 0x2C3B
    2a66:	98 2f       	mov	r25, r24
    2a68:	9f 5f       	subi	r25, 0xFF	; 255
    2a6a:	90 93 3b 2c 	sts	0x2C3B, r25
    2a6e:	81 11       	cpse	r24, r1
    2a70:	03 c0       	rjmp	.+6      	; 0x2a78 <adc_enable_clock+0x1c>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    2a72:	62 e0       	ldi	r22, 0x02	; 2
    2a74:	81 e0       	ldi	r24, 0x01	; 1
    2a76:	db cf       	rjmp	.-74     	; 0x2a2e <sysclk_enable_module>
    2a78:	08 95       	ret

00002a7a <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    2a7a:	81 15       	cp	r24, r1
    2a7c:	92 40       	sbci	r25, 0x02	; 2
    2a7e:	51 f4       	brne	.+20     	; 0x2a94 <adc_disable_clock+0x1a>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
    2a80:	80 91 3b 2c 	lds	r24, 0x2C3B
    2a84:	81 50       	subi	r24, 0x01	; 1
    2a86:	80 93 3b 2c 	sts	0x2C3B, r24
    2a8a:	81 11       	cpse	r24, r1
    2a8c:	03 c0       	rjmp	.+6      	; 0x2a94 <adc_disable_clock+0x1a>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    2a8e:	62 e0       	ldi	r22, 0x02	; 2
    2a90:	81 e0       	ldi	r24, 0x01	; 1
    2a92:	d9 cf       	rjmp	.-78     	; 0x2a46 <sysclk_disable_module>
    2a94:	08 95       	ret

00002a96 <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
    2a96:	1f 93       	push	r17
    2a98:	cf 93       	push	r28
    2a9a:	df 93       	push	r29
    2a9c:	ec 01       	movw	r28, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2a9e:	1f b7       	in	r17, 0x3f	; 63
	cpu_irq_disable();
    2aa0:	f8 94       	cli
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
    2aa2:	dc df       	rcall	.-72     	; 0x2a5c <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
    2aa4:	88 81       	ld	r24, Y
    2aa6:	81 60       	ori	r24, 0x01	; 1
    2aa8:	88 83       	st	Y, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2aaa:	1f bf       	out	0x3f, r17	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2aac:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    2aae:	f8 94       	cli
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    2ab0:	ee e7       	ldi	r30, 0x7E	; 126
    2ab2:	fc e2       	ldi	r31, 0x2C	; 44
    2ab4:	90 81       	ld	r25, Z
    2ab6:	9f 5f       	subi	r25, 0xFF	; 255
    2ab8:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2aba:	8f bf       	out	0x3f, r24	; 63
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
    2abc:	df 91       	pop	r29
    2abe:	cf 91       	pop	r28
    2ac0:	1f 91       	pop	r17
    2ac2:	08 95       	ret

00002ac4 <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
    2ac4:	ff 92       	push	r15
    2ac6:	0f 93       	push	r16
    2ac8:	1f 93       	push	r17
    2aca:	cf 93       	push	r28
    2acc:	df 93       	push	r29
    2ace:	eb 01       	movw	r28, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    2ad0:	81 15       	cp	r24, r1
    2ad2:	92 40       	sbci	r25, 0x02	; 2
    2ad4:	59 f5       	brne	.+86     	; 0x2b2c <adc_write_configuration+0x68>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    2ad6:	61 e2       	ldi	r22, 0x21	; 33
    2ad8:	70 e0       	ldi	r23, 0x00	; 0
    2ada:	82 e0       	ldi	r24, 0x02	; 2
    2adc:	58 d1       	rcall	.+688    	; 0x2d8e <nvm_read_byte>
    2ade:	18 2f       	mov	r17, r24
    2ae0:	60 e2       	ldi	r22, 0x20	; 32
    2ae2:	70 e0       	ldi	r23, 0x00	; 0
    2ae4:	82 e0       	ldi	r24, 0x02	; 2
    2ae6:	53 d1       	rcall	.+678    	; 0x2d8e <nvm_read_byte>

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
		data <<= 8;
    2ae8:	31 2f       	mov	r19, r17
    2aea:	20 e0       	ldi	r18, 0x00	; 0
		data |= nvm_read_production_signature_row(ADCACAL0);
    2aec:	89 01       	movw	r16, r18
    2aee:	08 2b       	or	r16, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2af0:	ff b6       	in	r15, 0x3f	; 63
	cpu_irq_disable();
    2af2:	f8 94       	cli
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
    2af4:	80 e0       	ldi	r24, 0x00	; 0
    2af6:	92 e0       	ldi	r25, 0x02	; 2
    2af8:	b1 df       	rcall	.-158    	; 0x2a5c <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
    2afa:	e0 e0       	ldi	r30, 0x00	; 0
    2afc:	f2 e0       	ldi	r31, 0x02	; 2
    2afe:	20 81       	ld	r18, Z
    2b00:	21 70       	andi	r18, 0x01	; 1

	adc->CTRLA = ADC_FLUSH_bm;
    2b02:	82 e0       	ldi	r24, 0x02	; 2
    2b04:	80 83       	st	Z, r24
	adc->CAL = cal;
    2b06:	04 87       	std	Z+12, r16	; 0x0c
    2b08:	15 87       	std	Z+13, r17	; 0x0d
	adc->CMP = conf->cmp;
    2b0a:	8c 81       	ldd	r24, Y+4	; 0x04
    2b0c:	9d 81       	ldd	r25, Y+5	; 0x05
    2b0e:	80 8f       	std	Z+24, r24	; 0x18
    2b10:	91 8f       	std	Z+25, r25	; 0x19
	adc->REFCTRL = conf->refctrl;
    2b12:	89 81       	ldd	r24, Y+1	; 0x01
    2b14:	82 83       	std	Z+2, r24	; 0x02
	adc->PRESCALER = conf->prescaler;
    2b16:	8b 81       	ldd	r24, Y+3	; 0x03
    2b18:	84 83       	std	Z+4, r24	; 0x04
	adc->EVCTRL = conf->evctrl;
    2b1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b1c:	83 83       	std	Z+3, r24	; 0x03
	adc->CTRLB = conf->ctrlb;
    2b1e:	88 81       	ld	r24, Y
    2b20:	81 83       	std	Z+1, r24	; 0x01

	adc->CTRLA = enable;
    2b22:	20 83       	st	Z, r18

	adc_disable_clock(adc);
    2b24:	80 e0       	ldi	r24, 0x00	; 0
    2b26:	92 e0       	ldi	r25, 0x02	; 2
    2b28:	a8 df       	rcall	.-176    	; 0x2a7a <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2b2a:	ff be       	out	0x3f, r15	; 63

	cpu_irq_restore(flags);
}
    2b2c:	df 91       	pop	r29
    2b2e:	cf 91       	pop	r28
    2b30:	1f 91       	pop	r17
    2b32:	0f 91       	pop	r16
    2b34:	ff 90       	pop	r15
    2b36:	08 95       	ret

00002b38 <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
    2b38:	ff 92       	push	r15
    2b3a:	0f 93       	push	r16
    2b3c:	1f 93       	push	r17
    2b3e:	cf 93       	push	r28
    2b40:	df 93       	push	r29
    2b42:	ec 01       	movw	r28, r24
    2b44:	8b 01       	movw	r16, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2b46:	ff b6       	in	r15, 0x3f	; 63
	cpu_irq_disable();
    2b48:	f8 94       	cli
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
    2b4a:	88 df       	rcall	.-240    	; 0x2a5c <adc_enable_clock>

	conf->cmp = adc->CMP;
    2b4c:	88 8d       	ldd	r24, Y+24	; 0x18
    2b4e:	99 8d       	ldd	r25, Y+25	; 0x19
    2b50:	f8 01       	movw	r30, r16
    2b52:	84 83       	std	Z+4, r24	; 0x04
    2b54:	95 83       	std	Z+5, r25	; 0x05
	conf->refctrl = adc->REFCTRL;
    2b56:	8a 81       	ldd	r24, Y+2	; 0x02
    2b58:	81 83       	std	Z+1, r24	; 0x01
	conf->prescaler = adc->PRESCALER;
    2b5a:	8c 81       	ldd	r24, Y+4	; 0x04
    2b5c:	83 83       	std	Z+3, r24	; 0x03
	conf->evctrl = adc->EVCTRL;
    2b5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b60:	82 83       	std	Z+2, r24	; 0x02
	conf->ctrlb = adc->CTRLB;
    2b62:	89 81       	ldd	r24, Y+1	; 0x01
    2b64:	80 83       	st	Z, r24

	adc_disable_clock(adc);
    2b66:	ce 01       	movw	r24, r28
    2b68:	88 df       	rcall	.-240    	; 0x2a7a <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2b6a:	ff be       	out	0x3f, r15	; 63

	cpu_irq_restore(flags);
}
    2b6c:	df 91       	pop	r29
    2b6e:	cf 91       	pop	r28
    2b70:	1f 91       	pop	r17
    2b72:	0f 91       	pop	r16
    2b74:	ff 90       	pop	r15
    2b76:	08 95       	ret

00002b78 <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
    2b78:	ff 92       	push	r15
    2b7a:	0f 93       	push	r16
    2b7c:	1f 93       	push	r17
    2b7e:	cf 93       	push	r28
    2b80:	df 93       	push	r29
    2b82:	ec 01       	movw	r28, r24
    2b84:	8a 01       	movw	r16, r20

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2b86:	ff b6       	in	r15, 0x3f	; 63
	cpu_irq_disable();
    2b88:	f8 94       	cli
			return;
		}
	}
#endif

	adc_enable_clock(adc);
    2b8a:	68 df       	rcall	.-304    	; 0x2a5c <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
    2b8c:	f8 01       	movw	r30, r16
    2b8e:	80 81       	ld	r24, Z
    2b90:	88 a3       	std	Y+32, r24	; 0x20
	adc_ch->INTCTRL = ch_conf->intctrl;
    2b92:	82 81       	ldd	r24, Z+2	; 0x02
    2b94:	8a a3       	std	Y+34, r24	; 0x22
	adc_ch->MUXCTRL = ch_conf->muxctrl;
    2b96:	81 81       	ldd	r24, Z+1	; 0x01
    2b98:	89 a3       	std	Y+33, r24	; 0x21
	adc_disable_clock(adc);
    2b9a:	ce 01       	movw	r24, r28
    2b9c:	6e df       	rcall	.-292    	; 0x2a7a <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2b9e:	ff be       	out	0x3f, r15	; 63

	cpu_irq_restore(flags);
}
    2ba0:	df 91       	pop	r29
    2ba2:	cf 91       	pop	r28
    2ba4:	1f 91       	pop	r17
    2ba6:	0f 91       	pop	r16
    2ba8:	ff 90       	pop	r15
    2baa:	08 95       	ret

00002bac <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
    2bac:	ff 92       	push	r15
    2bae:	0f 93       	push	r16
    2bb0:	1f 93       	push	r17
    2bb2:	cf 93       	push	r28
    2bb4:	df 93       	push	r29
    2bb6:	ec 01       	movw	r28, r24
    2bb8:	8a 01       	movw	r16, r20

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2bba:	ff b6       	in	r15, 0x3f	; 63
	cpu_irq_disable();
    2bbc:	f8 94       	cli

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
    2bbe:	4e df       	rcall	.-356    	; 0x2a5c <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
    2bc0:	88 a1       	ldd	r24, Y+32	; 0x20
    2bc2:	f8 01       	movw	r30, r16
    2bc4:	80 83       	st	Z, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
    2bc6:	8a a1       	ldd	r24, Y+34	; 0x22
    2bc8:	82 83       	std	Z+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
    2bca:	89 a1       	ldd	r24, Y+33	; 0x21
    2bcc:	81 83       	std	Z+1, r24	; 0x01
	adc_disable_clock(adc);
    2bce:	ce 01       	movw	r24, r28
    2bd0:	54 df       	rcall	.-344    	; 0x2a7a <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2bd2:	ff be       	out	0x3f, r15	; 63

	cpu_irq_restore(flags);
}
    2bd4:	df 91       	pop	r29
    2bd6:	cf 91       	pop	r28
    2bd8:	1f 91       	pop	r17
    2bda:	0f 91       	pop	r16
    2bdc:	ff 90       	pop	r15
    2bde:	08 95       	ret

00002be0 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    2be0:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    2be2:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    2be4:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    2be6:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    2be8:	60 83       	st	Z, r22
	ret                             // Return to caller
    2bea:	08 95       	ret

00002bec <nvm_eeprom_read_buffer>:
	NVM.ADDR0 = byte_addr & 0xFF;

	// Set data, which triggers loading of EEPROM page buffer
	NVM.DATA0 = value;

	NVM.CMD = old_cmd;
    2bec:	cf 93       	push	r28
    2bee:	df 93       	push	r29
    2bf0:	9c 01       	movw	r18, r24
    2bf2:	86 2f       	mov	r24, r22
    2bf4:	97 2f       	mov	r25, r23
    2bf6:	e0 ec       	ldi	r30, 0xC0	; 192
    2bf8:	f1 e0       	ldi	r31, 0x01	; 1
    2bfa:	a7 85       	ldd	r26, Z+15	; 0x0f
    2bfc:	aa 23       	and	r26, r26
    2bfe:	ec f3       	brlt	.-6      	; 0x2bfa <nvm_eeprom_read_buffer+0xe>
    2c00:	cc ec       	ldi	r28, 0xCC	; 204
    2c02:	d1 e0       	ldi	r29, 0x01	; 1
    2c04:	68 81       	ld	r22, Y
    2c06:	68 60       	ori	r22, 0x08	; 8
    2c08:	68 83       	st	Y, r22
    2c0a:	30 5f       	subi	r19, 0xF0	; 240
    2c0c:	62 2f       	mov	r22, r18
    2c0e:	73 2f       	mov	r23, r19
    2c10:	0e 94 ff 24 	call	0x49fe	; 0x49fe <memcpy>
    2c14:	88 81       	ld	r24, Y
    2c16:	87 7f       	andi	r24, 0xF7	; 247
    2c18:	88 83       	st	Y, r24
    2c1a:	df 91       	pop	r29
    2c1c:	cf 91       	pop	r28
    2c1e:	08 95       	ret

00002c20 <nvm_eeprom_flush_buffer>:
    2c20:	e0 ec       	ldi	r30, 0xC0	; 192
    2c22:	f1 e0       	ldi	r31, 0x01	; 1
    2c24:	87 85       	ldd	r24, Z+15	; 0x0f
    2c26:	88 23       	and	r24, r24
    2c28:	ec f3       	brlt	.-6      	; 0x2c24 <nvm_eeprom_flush_buffer+0x4>
    2c2a:	e0 ec       	ldi	r30, 0xC0	; 192
    2c2c:	f1 e0       	ldi	r31, 0x01	; 1
    2c2e:	87 85       	ldd	r24, Z+15	; 0x0f
    2c30:	81 ff       	sbrs	r24, 1
    2c32:	06 c0       	rjmp	.+12     	; 0x2c40 <nvm_eeprom_flush_buffer+0x20>
    2c34:	86 e3       	ldi	r24, 0x36	; 54
    2c36:	82 87       	std	Z+10, r24	; 0x0a
    2c38:	61 e0       	ldi	r22, 0x01	; 1
    2c3a:	8b ec       	ldi	r24, 0xCB	; 203
    2c3c:	91 e0       	ldi	r25, 0x01	; 1
    2c3e:	d0 cf       	rjmp	.-96     	; 0x2be0 <ccp_write_io>
    2c40:	08 95       	ret

00002c42 <nvm_eeprom_write_byte>:
    2c42:	ef 92       	push	r14
    2c44:	ff 92       	push	r15
    2c46:	0f 93       	push	r16
    2c48:	1f 93       	push	r17
    2c4a:	cf 93       	push	r28
    2c4c:	df 93       	push	r29
    2c4e:	f8 2e       	mov	r15, r24
    2c50:	e9 2e       	mov	r14, r25
    2c52:	06 2f       	mov	r16, r22
    2c54:	e0 ec       	ldi	r30, 0xC0	; 192
    2c56:	f1 e0       	ldi	r31, 0x01	; 1
    2c58:	12 85       	ldd	r17, Z+10	; 0x0a
    2c5a:	e2 df       	rcall	.-60     	; 0x2c20 <nvm_eeprom_flush_buffer>
    2c5c:	e0 ec       	ldi	r30, 0xC0	; 192
    2c5e:	f1 e0       	ldi	r31, 0x01	; 1
    2c60:	27 85       	ldd	r18, Z+15	; 0x0f
    2c62:	22 23       	and	r18, r18
    2c64:	ec f3       	brlt	.-6      	; 0x2c60 <nvm_eeprom_write_byte+0x1e>
    2c66:	c0 ec       	ldi	r28, 0xC0	; 192
    2c68:	d1 e0       	ldi	r29, 0x01	; 1
    2c6a:	83 e3       	ldi	r24, 0x33	; 51
    2c6c:	8a 87       	std	Y+10, r24	; 0x0a
    2c6e:	1a 82       	std	Y+2, r1	; 0x02
    2c70:	e9 82       	std	Y+1, r14	; 0x01
    2c72:	f8 82       	st	Y, r15
    2c74:	0c 83       	std	Y+4, r16	; 0x04
    2c76:	85 e3       	ldi	r24, 0x35	; 53
    2c78:	8a 87       	std	Y+10, r24	; 0x0a
    2c7a:	61 e0       	ldi	r22, 0x01	; 1
    2c7c:	8b ec       	ldi	r24, 0xCB	; 203
    2c7e:	91 e0       	ldi	r25, 0x01	; 1
    2c80:	af df       	rcall	.-162    	; 0x2be0 <ccp_write_io>
    2c82:	1a 87       	std	Y+10, r17	; 0x0a
    2c84:	df 91       	pop	r29
    2c86:	cf 91       	pop	r28
    2c88:	1f 91       	pop	r17
    2c8a:	0f 91       	pop	r16
    2c8c:	ff 90       	pop	r15
    2c8e:	ef 90       	pop	r14
    2c90:	08 95       	ret

00002c92 <nvm_eeprom_load_page_to_buffer>:
 * \param  values   Pointer to SRAM buffer containing an entire page.
 */
void nvm_eeprom_load_page_to_buffer(const uint8_t *values)
{
	uint8_t old_cmd;
	old_cmd = NVM.CMD;
    2c92:	e0 ec       	ldi	r30, 0xC0	; 192
    2c94:	f1 e0       	ldi	r31, 0x01	; 1
    2c96:	52 85       	ldd	r21, Z+10	; 0x0a
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    2c98:	27 85       	ldd	r18, Z+15	; 0x0f
    2c9a:	22 23       	and	r18, r18
    2c9c:	ec f3       	brlt	.-6      	; 0x2c98 <nvm_eeprom_load_page_to_buffer+0x6>

	// Wait until NVM is ready
	nvm_wait_until_ready();

	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    2c9e:	e0 ec       	ldi	r30, 0xC0	; 192
    2ca0:	f1 e0       	ldi	r31, 0x01	; 1
    2ca2:	23 e3       	ldi	r18, 0x33	; 51
    2ca4:	22 87       	std	Z+10, r18	; 0x0a

	/*  Set address to zero, as only the lower bits matters. ADDR0 is
	 *  maintained inside the loop below.
	 */
	NVM.ADDR2 = 0x00;
    2ca6:	12 82       	std	Z+2, r1	; 0x02
	NVM.ADDR1 = 0x00;
    2ca8:	11 82       	std	Z+1, r1	; 0x01
 *       is written to the EEPROM page given by the address parameter to the
 *       EEPROM write page operation.
 *
 * \param  values   Pointer to SRAM buffer containing an entire page.
 */
void nvm_eeprom_load_page_to_buffer(const uint8_t *values)
    2caa:	9c 01       	movw	r18, r24
    2cac:	20 5e       	subi	r18, 0xE0	; 224
    2cae:	3f 4f       	sbci	r19, 0xFF	; 255
    2cb0:	fc 01       	movw	r30, r24
	NVM.ADDR1 = 0x00;

	// Load multible bytes into page buffer
	uint8_t i;
	for (i = 0; i < EEPROM_PAGE_SIZE; ++i) {
		NVM.ADDR0 = i;
    2cb2:	a0 ec       	ldi	r26, 0xC0	; 192
    2cb4:	b1 e0       	ldi	r27, 0x01	; 1
 *       is written to the EEPROM page given by the address parameter to the
 *       EEPROM write page operation.
 *
 * \param  values   Pointer to SRAM buffer containing an entire page.
 */
void nvm_eeprom_load_page_to_buffer(const uint8_t *values)
    2cb6:	4e 2f       	mov	r20, r30
    2cb8:	48 1b       	sub	r20, r24
	NVM.ADDR1 = 0x00;

	// Load multible bytes into page buffer
	uint8_t i;
	for (i = 0; i < EEPROM_PAGE_SIZE; ++i) {
		NVM.ADDR0 = i;
    2cba:	4c 93       	st	X, r20
		NVM.DATA0 = *values;
    2cbc:	41 91       	ld	r20, Z+
    2cbe:	14 96       	adiw	r26, 0x04	; 4
    2cc0:	4c 93       	st	X, r20
    2cc2:	14 97       	sbiw	r26, 0x04	; 4
	NVM.ADDR2 = 0x00;
	NVM.ADDR1 = 0x00;

	// Load multible bytes into page buffer
	uint8_t i;
	for (i = 0; i < EEPROM_PAGE_SIZE; ++i) {
    2cc4:	e2 17       	cp	r30, r18
    2cc6:	f3 07       	cpc	r31, r19
    2cc8:	b1 f7       	brne	.-20     	; 0x2cb6 <nvm_eeprom_load_page_to_buffer+0x24>
		NVM.ADDR0 = i;
		NVM.DATA0 = *values;
		++values;
	}
	NVM.CMD = old_cmd;
    2cca:	e0 ec       	ldi	r30, 0xC0	; 192
    2ccc:	f1 e0       	ldi	r31, 0x01	; 1
    2cce:	52 87       	std	Z+10, r21	; 0x0a
    2cd0:	08 95       	ret

00002cd2 <nvm_eeprom_atomic_write_page>:
 * locations that have not been loaded will be left untouched in EEPROM.
 *
 * \param  page_addr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGE_SIZE
 */
void nvm_eeprom_atomic_write_page(uint8_t page_addr)
{
    2cd2:	1f 93       	push	r17
    2cd4:	cf 93       	push	r28
    2cd6:	df 93       	push	r29
    2cd8:	e0 ec       	ldi	r30, 0xC0	; 192
    2cda:	f1 e0       	ldi	r31, 0x01	; 1
    2cdc:	97 85       	ldd	r25, Z+15	; 0x0f
    2cde:	99 23       	and	r25, r25
    2ce0:	ec f3       	brlt	.-6      	; 0x2cdc <nvm_eeprom_atomic_write_page+0xa>
	// Wait until NVM is ready
	nvm_wait_until_ready();

	// Calculate page address
	uint16_t address = (uint16_t)(page_addr * EEPROM_PAGE_SIZE);
    2ce2:	20 e2       	ldi	r18, 0x20	; 32
    2ce4:	82 9f       	mul	r24, r18
    2ce6:	c0 01       	movw	r24, r0
    2ce8:	11 24       	eor	r1, r1

	Assert(address <= EEPROM_SIZE);

	// Set address
	NVM.ADDR2 = 0x00;
    2cea:	c0 ec       	ldi	r28, 0xC0	; 192
    2cec:	d1 e0       	ldi	r29, 0x01	; 1
    2cee:	1a 82       	std	Y+2, r1	; 0x02
	NVM.ADDR1 = (address >> 8) & 0xFF;
    2cf0:	99 83       	std	Y+1, r25	; 0x01
	NVM.ADDR0 = address & 0xFF;
    2cf2:	88 83       	st	Y, r24
 */
static inline void nvm_issue_command(NVM_CMD_t nvm_command)
{
	uint8_t old_cmd;

	old_cmd = NVM.CMD;
    2cf4:	1a 85       	ldd	r17, Y+10	; 0x0a
	NVM.CMD = nvm_command;
    2cf6:	85 e3       	ldi	r24, 0x35	; 53
    2cf8:	8a 87       	std	Y+10, r24	; 0x0a
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    2cfa:	61 e0       	ldi	r22, 0x01	; 1
    2cfc:	8b ec       	ldi	r24, 0xCB	; 203
    2cfe:	91 e0       	ldi	r25, 0x01	; 1
    2d00:	6f df       	rcall	.-290    	; 0x2be0 <ccp_write_io>
	NVM.CMD = old_cmd;
    2d02:	1a 87       	std	Y+10, r17	; 0x0a

	// Issue EEPROM Atomic Write (Erase&Write) command
	nvm_issue_command(NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc);
}
    2d04:	df 91       	pop	r29
    2d06:	cf 91       	pop	r28
    2d08:	1f 91       	pop	r17
    2d0a:	08 95       	ret

00002d0c <nvm_eeprom_erase_and_write_buffer>:
 * \param address   the address to where to write
 * \param buf       pointer to the data
 * \param len       the number of bytes to write
 */
void nvm_eeprom_erase_and_write_buffer(eeprom_addr_t address, const void *buf, uint16_t len)
{
    2d0c:	cf 92       	push	r12
    2d0e:	df 92       	push	r13
    2d10:	ef 92       	push	r14
    2d12:	ff 92       	push	r15
    2d14:	0f 93       	push	r16
    2d16:	1f 93       	push	r17
    2d18:	cf 93       	push	r28
    2d1a:	df 93       	push	r29
    2d1c:	ec 01       	movw	r28, r24
    2d1e:	7b 01       	movw	r14, r22
    2d20:	8a 01       	movw	r16, r20
	while (len) {
    2d22:	41 15       	cp	r20, r1
    2d24:	51 05       	cpc	r21, r1
    2d26:	51 f1       	breq	.+84     	; 0x2d7c <nvm_eeprom_erase_and_write_buffer+0x70>
		if (((address%EEPROM_PAGE_SIZE)==0) && (len>=EEPROM_PAGE_SIZE)) {
    2d28:	ce 01       	movw	r24, r28
    2d2a:	8f 71       	andi	r24, 0x1F	; 31
    2d2c:	99 27       	eor	r25, r25
    2d2e:	89 2b       	or	r24, r25
    2d30:	b1 f4       	brne	.+44     	; 0x2d5e <nvm_eeprom_erase_and_write_buffer+0x52>
    2d32:	00 32       	cpi	r16, 0x20	; 32
    2d34:	11 05       	cpc	r17, r1
    2d36:	98 f0       	brcs	.+38     	; 0x2d5e <nvm_eeprom_erase_and_write_buffer+0x52>
			// A full page can be written
			nvm_eeprom_load_page_to_buffer((uint8_t*)buf);
    2d38:	c7 01       	movw	r24, r14
    2d3a:	ab df       	rcall	.-170    	; 0x2c92 <nvm_eeprom_load_page_to_buffer>
			nvm_eeprom_atomic_write_page(address/EEPROM_PAGE_SIZE);
    2d3c:	ce 01       	movw	r24, r28
    2d3e:	96 95       	lsr	r25
    2d40:	87 95       	ror	r24
    2d42:	92 95       	swap	r25
    2d44:	82 95       	swap	r24
    2d46:	8f 70       	andi	r24, 0x0F	; 15
    2d48:	89 27       	eor	r24, r25
    2d4a:	9f 70       	andi	r25, 0x0F	; 15
    2d4c:	89 27       	eor	r24, r25
    2d4e:	c1 df       	rcall	.-126    	; 0x2cd2 <nvm_eeprom_atomic_write_page>
			address += EEPROM_PAGE_SIZE;
    2d50:	a0 96       	adiw	r28, 0x20	; 32
			buf = (uint8_t*)buf + EEPROM_PAGE_SIZE;
    2d52:	80 e2       	ldi	r24, 0x20	; 32
    2d54:	e8 0e       	add	r14, r24
    2d56:	f1 1c       	adc	r15, r1
			len -= EEPROM_PAGE_SIZE;
    2d58:	00 52       	subi	r16, 0x20	; 32
    2d5a:	11 09       	sbc	r17, r1
    2d5c:	0c c0       	rjmp	.+24     	; 0x2d76 <nvm_eeprom_erase_and_write_buffer+0x6a>
		} else {
			nvm_eeprom_write_byte(address++, *(uint8_t*)buf);
    2d5e:	6e 01       	movw	r12, r28
    2d60:	ef ef       	ldi	r30, 0xFF	; 255
    2d62:	ce 1a       	sub	r12, r30
    2d64:	de 0a       	sbc	r13, r30
    2d66:	f7 01       	movw	r30, r14
    2d68:	61 91       	ld	r22, Z+
    2d6a:	7f 01       	movw	r14, r30
    2d6c:	ce 01       	movw	r24, r28
    2d6e:	69 df       	rcall	.-302    	; 0x2c42 <nvm_eeprom_write_byte>
			buf = (uint8_t*)buf + 1;
			len--;
    2d70:	01 50       	subi	r16, 0x01	; 1
    2d72:	11 09       	sbc	r17, r1
			nvm_eeprom_atomic_write_page(address/EEPROM_PAGE_SIZE);
			address += EEPROM_PAGE_SIZE;
			buf = (uint8_t*)buf + EEPROM_PAGE_SIZE;
			len -= EEPROM_PAGE_SIZE;
		} else {
			nvm_eeprom_write_byte(address++, *(uint8_t*)buf);
    2d74:	e6 01       	movw	r28, r12
 * \param buf       pointer to the data
 * \param len       the number of bytes to write
 */
void nvm_eeprom_erase_and_write_buffer(eeprom_addr_t address, const void *buf, uint16_t len)
{
	while (len) {
    2d76:	01 15       	cp	r16, r1
    2d78:	11 05       	cpc	r17, r1
    2d7a:	b1 f6       	brne	.-84     	; 0x2d28 <nvm_eeprom_erase_and_write_buffer+0x1c>
			nvm_eeprom_write_byte(address++, *(uint8_t*)buf);
			buf = (uint8_t*)buf + 1;
			len--;
		}
	}
}
    2d7c:	df 91       	pop	r29
    2d7e:	cf 91       	pop	r28
    2d80:	1f 91       	pop	r17
    2d82:	0f 91       	pop	r16
    2d84:	ff 90       	pop	r15
    2d86:	ef 90       	pop	r14
    2d88:	df 90       	pop	r13
    2d8a:	cf 90       	pop	r12
    2d8c:	08 95       	ret

00002d8e <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    2d8e:	40 91 ca 01 	lds	r20, 0x01CA
	mov ZL, r22               ; Load byte index into low byte of Z.
    2d92:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    2d94:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    2d96:	80 93 ca 01 	sts	0x01CA, r24
	lpm r24, Z                ; Perform an LPM to read out byte
    2d9a:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    2d9c:	40 93 ca 01 	sts	0x01CA, r20
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    2da0:	08 95       	ret

00002da2 <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
    2da2:	1f 92       	push	r1
    2da4:	0f 92       	push	r0
    2da6:	0f b6       	in	r0, 0x3f	; 63
    2da8:	0f 92       	push	r0
    2daa:	11 24       	eor	r1, r1
    2dac:	0b b6       	in	r0, 0x3b	; 59
    2dae:	0f 92       	push	r0
    2db0:	2f 93       	push	r18
    2db2:	3f 93       	push	r19
    2db4:	4f 93       	push	r20
    2db6:	5f 93       	push	r21
    2db8:	6f 93       	push	r22
    2dba:	7f 93       	push	r23
    2dbc:	8f 93       	push	r24
    2dbe:	9f 93       	push	r25
    2dc0:	af 93       	push	r26
    2dc2:	bf 93       	push	r27
    2dc4:	ef 93       	push	r30
    2dc6:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
    2dc8:	e0 91 3c 2c 	lds	r30, 0x2C3C
    2dcc:	f0 91 3d 2c 	lds	r31, 0x2C3D
    2dd0:	30 97       	sbiw	r30, 0x00	; 0
    2dd2:	09 f0       	breq	.+2      	; 0x2dd6 <__vector_14+0x34>
		tc_tcc0_ovf_callback();
    2dd4:	09 95       	icall
	}
}
    2dd6:	ff 91       	pop	r31
    2dd8:	ef 91       	pop	r30
    2dda:	bf 91       	pop	r27
    2ddc:	af 91       	pop	r26
    2dde:	9f 91       	pop	r25
    2de0:	8f 91       	pop	r24
    2de2:	7f 91       	pop	r23
    2de4:	6f 91       	pop	r22
    2de6:	5f 91       	pop	r21
    2de8:	4f 91       	pop	r20
    2dea:	3f 91       	pop	r19
    2dec:	2f 91       	pop	r18
    2dee:	0f 90       	pop	r0
    2df0:	0b be       	out	0x3b, r0	; 59
    2df2:	0f 90       	pop	r0
    2df4:	0f be       	out	0x3f, r0	; 63
    2df6:	0f 90       	pop	r0
    2df8:	1f 90       	pop	r1
    2dfa:	18 95       	reti

00002dfc <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
    2dfc:	1f 92       	push	r1
    2dfe:	0f 92       	push	r0
    2e00:	0f b6       	in	r0, 0x3f	; 63
    2e02:	0f 92       	push	r0
    2e04:	11 24       	eor	r1, r1
    2e06:	0b b6       	in	r0, 0x3b	; 59
    2e08:	0f 92       	push	r0
    2e0a:	2f 93       	push	r18
    2e0c:	3f 93       	push	r19
    2e0e:	4f 93       	push	r20
    2e10:	5f 93       	push	r21
    2e12:	6f 93       	push	r22
    2e14:	7f 93       	push	r23
    2e16:	8f 93       	push	r24
    2e18:	9f 93       	push	r25
    2e1a:	af 93       	push	r26
    2e1c:	bf 93       	push	r27
    2e1e:	ef 93       	push	r30
    2e20:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
    2e22:	e0 91 3e 2c 	lds	r30, 0x2C3E
    2e26:	f0 91 3f 2c 	lds	r31, 0x2C3F
    2e2a:	30 97       	sbiw	r30, 0x00	; 0
    2e2c:	09 f0       	breq	.+2      	; 0x2e30 <__vector_15+0x34>
		tc_tcc0_err_callback();
    2e2e:	09 95       	icall
	}
}
    2e30:	ff 91       	pop	r31
    2e32:	ef 91       	pop	r30
    2e34:	bf 91       	pop	r27
    2e36:	af 91       	pop	r26
    2e38:	9f 91       	pop	r25
    2e3a:	8f 91       	pop	r24
    2e3c:	7f 91       	pop	r23
    2e3e:	6f 91       	pop	r22
    2e40:	5f 91       	pop	r21
    2e42:	4f 91       	pop	r20
    2e44:	3f 91       	pop	r19
    2e46:	2f 91       	pop	r18
    2e48:	0f 90       	pop	r0
    2e4a:	0b be       	out	0x3b, r0	; 59
    2e4c:	0f 90       	pop	r0
    2e4e:	0f be       	out	0x3f, r0	; 63
    2e50:	0f 90       	pop	r0
    2e52:	1f 90       	pop	r1
    2e54:	18 95       	reti

00002e56 <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
    2e56:	1f 92       	push	r1
    2e58:	0f 92       	push	r0
    2e5a:	0f b6       	in	r0, 0x3f	; 63
    2e5c:	0f 92       	push	r0
    2e5e:	11 24       	eor	r1, r1
    2e60:	0b b6       	in	r0, 0x3b	; 59
    2e62:	0f 92       	push	r0
    2e64:	2f 93       	push	r18
    2e66:	3f 93       	push	r19
    2e68:	4f 93       	push	r20
    2e6a:	5f 93       	push	r21
    2e6c:	6f 93       	push	r22
    2e6e:	7f 93       	push	r23
    2e70:	8f 93       	push	r24
    2e72:	9f 93       	push	r25
    2e74:	af 93       	push	r26
    2e76:	bf 93       	push	r27
    2e78:	ef 93       	push	r30
    2e7a:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
    2e7c:	e0 91 40 2c 	lds	r30, 0x2C40
    2e80:	f0 91 41 2c 	lds	r31, 0x2C41
    2e84:	30 97       	sbiw	r30, 0x00	; 0
    2e86:	09 f0       	breq	.+2      	; 0x2e8a <__vector_16+0x34>
		tc_tcc0_cca_callback();
    2e88:	09 95       	icall
	}
}
    2e8a:	ff 91       	pop	r31
    2e8c:	ef 91       	pop	r30
    2e8e:	bf 91       	pop	r27
    2e90:	af 91       	pop	r26
    2e92:	9f 91       	pop	r25
    2e94:	8f 91       	pop	r24
    2e96:	7f 91       	pop	r23
    2e98:	6f 91       	pop	r22
    2e9a:	5f 91       	pop	r21
    2e9c:	4f 91       	pop	r20
    2e9e:	3f 91       	pop	r19
    2ea0:	2f 91       	pop	r18
    2ea2:	0f 90       	pop	r0
    2ea4:	0b be       	out	0x3b, r0	; 59
    2ea6:	0f 90       	pop	r0
    2ea8:	0f be       	out	0x3f, r0	; 63
    2eaa:	0f 90       	pop	r0
    2eac:	1f 90       	pop	r1
    2eae:	18 95       	reti

00002eb0 <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
    2eb0:	1f 92       	push	r1
    2eb2:	0f 92       	push	r0
    2eb4:	0f b6       	in	r0, 0x3f	; 63
    2eb6:	0f 92       	push	r0
    2eb8:	11 24       	eor	r1, r1
    2eba:	0b b6       	in	r0, 0x3b	; 59
    2ebc:	0f 92       	push	r0
    2ebe:	2f 93       	push	r18
    2ec0:	3f 93       	push	r19
    2ec2:	4f 93       	push	r20
    2ec4:	5f 93       	push	r21
    2ec6:	6f 93       	push	r22
    2ec8:	7f 93       	push	r23
    2eca:	8f 93       	push	r24
    2ecc:	9f 93       	push	r25
    2ece:	af 93       	push	r26
    2ed0:	bf 93       	push	r27
    2ed2:	ef 93       	push	r30
    2ed4:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
    2ed6:	e0 91 42 2c 	lds	r30, 0x2C42
    2eda:	f0 91 43 2c 	lds	r31, 0x2C43
    2ede:	30 97       	sbiw	r30, 0x00	; 0
    2ee0:	09 f0       	breq	.+2      	; 0x2ee4 <__vector_17+0x34>
		tc_tcc0_ccb_callback();
    2ee2:	09 95       	icall
	}
}
    2ee4:	ff 91       	pop	r31
    2ee6:	ef 91       	pop	r30
    2ee8:	bf 91       	pop	r27
    2eea:	af 91       	pop	r26
    2eec:	9f 91       	pop	r25
    2eee:	8f 91       	pop	r24
    2ef0:	7f 91       	pop	r23
    2ef2:	6f 91       	pop	r22
    2ef4:	5f 91       	pop	r21
    2ef6:	4f 91       	pop	r20
    2ef8:	3f 91       	pop	r19
    2efa:	2f 91       	pop	r18
    2efc:	0f 90       	pop	r0
    2efe:	0b be       	out	0x3b, r0	; 59
    2f00:	0f 90       	pop	r0
    2f02:	0f be       	out	0x3f, r0	; 63
    2f04:	0f 90       	pop	r0
    2f06:	1f 90       	pop	r1
    2f08:	18 95       	reti

00002f0a <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
    2f0a:	1f 92       	push	r1
    2f0c:	0f 92       	push	r0
    2f0e:	0f b6       	in	r0, 0x3f	; 63
    2f10:	0f 92       	push	r0
    2f12:	11 24       	eor	r1, r1
    2f14:	0b b6       	in	r0, 0x3b	; 59
    2f16:	0f 92       	push	r0
    2f18:	2f 93       	push	r18
    2f1a:	3f 93       	push	r19
    2f1c:	4f 93       	push	r20
    2f1e:	5f 93       	push	r21
    2f20:	6f 93       	push	r22
    2f22:	7f 93       	push	r23
    2f24:	8f 93       	push	r24
    2f26:	9f 93       	push	r25
    2f28:	af 93       	push	r26
    2f2a:	bf 93       	push	r27
    2f2c:	ef 93       	push	r30
    2f2e:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
    2f30:	e0 91 44 2c 	lds	r30, 0x2C44
    2f34:	f0 91 45 2c 	lds	r31, 0x2C45
    2f38:	30 97       	sbiw	r30, 0x00	; 0
    2f3a:	09 f0       	breq	.+2      	; 0x2f3e <__vector_18+0x34>
		tc_tcc0_ccc_callback();
    2f3c:	09 95       	icall
	}
}
    2f3e:	ff 91       	pop	r31
    2f40:	ef 91       	pop	r30
    2f42:	bf 91       	pop	r27
    2f44:	af 91       	pop	r26
    2f46:	9f 91       	pop	r25
    2f48:	8f 91       	pop	r24
    2f4a:	7f 91       	pop	r23
    2f4c:	6f 91       	pop	r22
    2f4e:	5f 91       	pop	r21
    2f50:	4f 91       	pop	r20
    2f52:	3f 91       	pop	r19
    2f54:	2f 91       	pop	r18
    2f56:	0f 90       	pop	r0
    2f58:	0b be       	out	0x3b, r0	; 59
    2f5a:	0f 90       	pop	r0
    2f5c:	0f be       	out	0x3f, r0	; 63
    2f5e:	0f 90       	pop	r0
    2f60:	1f 90       	pop	r1
    2f62:	18 95       	reti

00002f64 <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
    2f64:	1f 92       	push	r1
    2f66:	0f 92       	push	r0
    2f68:	0f b6       	in	r0, 0x3f	; 63
    2f6a:	0f 92       	push	r0
    2f6c:	11 24       	eor	r1, r1
    2f6e:	0b b6       	in	r0, 0x3b	; 59
    2f70:	0f 92       	push	r0
    2f72:	2f 93       	push	r18
    2f74:	3f 93       	push	r19
    2f76:	4f 93       	push	r20
    2f78:	5f 93       	push	r21
    2f7a:	6f 93       	push	r22
    2f7c:	7f 93       	push	r23
    2f7e:	8f 93       	push	r24
    2f80:	9f 93       	push	r25
    2f82:	af 93       	push	r26
    2f84:	bf 93       	push	r27
    2f86:	ef 93       	push	r30
    2f88:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
    2f8a:	e0 91 46 2c 	lds	r30, 0x2C46
    2f8e:	f0 91 47 2c 	lds	r31, 0x2C47
    2f92:	30 97       	sbiw	r30, 0x00	; 0
    2f94:	09 f0       	breq	.+2      	; 0x2f98 <__vector_19+0x34>
		tc_tcc0_ccd_callback();
    2f96:	09 95       	icall
	}
}
    2f98:	ff 91       	pop	r31
    2f9a:	ef 91       	pop	r30
    2f9c:	bf 91       	pop	r27
    2f9e:	af 91       	pop	r26
    2fa0:	9f 91       	pop	r25
    2fa2:	8f 91       	pop	r24
    2fa4:	7f 91       	pop	r23
    2fa6:	6f 91       	pop	r22
    2fa8:	5f 91       	pop	r21
    2faa:	4f 91       	pop	r20
    2fac:	3f 91       	pop	r19
    2fae:	2f 91       	pop	r18
    2fb0:	0f 90       	pop	r0
    2fb2:	0b be       	out	0x3b, r0	; 59
    2fb4:	0f 90       	pop	r0
    2fb6:	0f be       	out	0x3f, r0	; 63
    2fb8:	0f 90       	pop	r0
    2fba:	1f 90       	pop	r1
    2fbc:	18 95       	reti

00002fbe <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
    2fbe:	1f 92       	push	r1
    2fc0:	0f 92       	push	r0
    2fc2:	0f b6       	in	r0, 0x3f	; 63
    2fc4:	0f 92       	push	r0
    2fc6:	11 24       	eor	r1, r1
    2fc8:	0b b6       	in	r0, 0x3b	; 59
    2fca:	0f 92       	push	r0
    2fcc:	2f 93       	push	r18
    2fce:	3f 93       	push	r19
    2fd0:	4f 93       	push	r20
    2fd2:	5f 93       	push	r21
    2fd4:	6f 93       	push	r22
    2fd6:	7f 93       	push	r23
    2fd8:	8f 93       	push	r24
    2fda:	9f 93       	push	r25
    2fdc:	af 93       	push	r26
    2fde:	bf 93       	push	r27
    2fe0:	ef 93       	push	r30
    2fe2:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
    2fe4:	e0 91 48 2c 	lds	r30, 0x2C48
    2fe8:	f0 91 49 2c 	lds	r31, 0x2C49
    2fec:	30 97       	sbiw	r30, 0x00	; 0
    2fee:	09 f0       	breq	.+2      	; 0x2ff2 <__vector_20+0x34>
		tc_tcc1_ovf_callback();
    2ff0:	09 95       	icall
	}
}
    2ff2:	ff 91       	pop	r31
    2ff4:	ef 91       	pop	r30
    2ff6:	bf 91       	pop	r27
    2ff8:	af 91       	pop	r26
    2ffa:	9f 91       	pop	r25
    2ffc:	8f 91       	pop	r24
    2ffe:	7f 91       	pop	r23
    3000:	6f 91       	pop	r22
    3002:	5f 91       	pop	r21
    3004:	4f 91       	pop	r20
    3006:	3f 91       	pop	r19
    3008:	2f 91       	pop	r18
    300a:	0f 90       	pop	r0
    300c:	0b be       	out	0x3b, r0	; 59
    300e:	0f 90       	pop	r0
    3010:	0f be       	out	0x3f, r0	; 63
    3012:	0f 90       	pop	r0
    3014:	1f 90       	pop	r1
    3016:	18 95       	reti

00003018 <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
    3018:	1f 92       	push	r1
    301a:	0f 92       	push	r0
    301c:	0f b6       	in	r0, 0x3f	; 63
    301e:	0f 92       	push	r0
    3020:	11 24       	eor	r1, r1
    3022:	0b b6       	in	r0, 0x3b	; 59
    3024:	0f 92       	push	r0
    3026:	2f 93       	push	r18
    3028:	3f 93       	push	r19
    302a:	4f 93       	push	r20
    302c:	5f 93       	push	r21
    302e:	6f 93       	push	r22
    3030:	7f 93       	push	r23
    3032:	8f 93       	push	r24
    3034:	9f 93       	push	r25
    3036:	af 93       	push	r26
    3038:	bf 93       	push	r27
    303a:	ef 93       	push	r30
    303c:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
    303e:	e0 91 4a 2c 	lds	r30, 0x2C4A
    3042:	f0 91 4b 2c 	lds	r31, 0x2C4B
    3046:	30 97       	sbiw	r30, 0x00	; 0
    3048:	09 f0       	breq	.+2      	; 0x304c <__vector_21+0x34>
		tc_tcc1_err_callback();
    304a:	09 95       	icall
	}
}
    304c:	ff 91       	pop	r31
    304e:	ef 91       	pop	r30
    3050:	bf 91       	pop	r27
    3052:	af 91       	pop	r26
    3054:	9f 91       	pop	r25
    3056:	8f 91       	pop	r24
    3058:	7f 91       	pop	r23
    305a:	6f 91       	pop	r22
    305c:	5f 91       	pop	r21
    305e:	4f 91       	pop	r20
    3060:	3f 91       	pop	r19
    3062:	2f 91       	pop	r18
    3064:	0f 90       	pop	r0
    3066:	0b be       	out	0x3b, r0	; 59
    3068:	0f 90       	pop	r0
    306a:	0f be       	out	0x3f, r0	; 63
    306c:	0f 90       	pop	r0
    306e:	1f 90       	pop	r1
    3070:	18 95       	reti

00003072 <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
    3072:	1f 92       	push	r1
    3074:	0f 92       	push	r0
    3076:	0f b6       	in	r0, 0x3f	; 63
    3078:	0f 92       	push	r0
    307a:	11 24       	eor	r1, r1
    307c:	0b b6       	in	r0, 0x3b	; 59
    307e:	0f 92       	push	r0
    3080:	2f 93       	push	r18
    3082:	3f 93       	push	r19
    3084:	4f 93       	push	r20
    3086:	5f 93       	push	r21
    3088:	6f 93       	push	r22
    308a:	7f 93       	push	r23
    308c:	8f 93       	push	r24
    308e:	9f 93       	push	r25
    3090:	af 93       	push	r26
    3092:	bf 93       	push	r27
    3094:	ef 93       	push	r30
    3096:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
    3098:	e0 91 4c 2c 	lds	r30, 0x2C4C
    309c:	f0 91 4d 2c 	lds	r31, 0x2C4D
    30a0:	30 97       	sbiw	r30, 0x00	; 0
    30a2:	09 f0       	breq	.+2      	; 0x30a6 <__vector_22+0x34>
		tc_tcc1_cca_callback();
    30a4:	09 95       	icall
	}
}
    30a6:	ff 91       	pop	r31
    30a8:	ef 91       	pop	r30
    30aa:	bf 91       	pop	r27
    30ac:	af 91       	pop	r26
    30ae:	9f 91       	pop	r25
    30b0:	8f 91       	pop	r24
    30b2:	7f 91       	pop	r23
    30b4:	6f 91       	pop	r22
    30b6:	5f 91       	pop	r21
    30b8:	4f 91       	pop	r20
    30ba:	3f 91       	pop	r19
    30bc:	2f 91       	pop	r18
    30be:	0f 90       	pop	r0
    30c0:	0b be       	out	0x3b, r0	; 59
    30c2:	0f 90       	pop	r0
    30c4:	0f be       	out	0x3f, r0	; 63
    30c6:	0f 90       	pop	r0
    30c8:	1f 90       	pop	r1
    30ca:	18 95       	reti

000030cc <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
    30cc:	1f 92       	push	r1
    30ce:	0f 92       	push	r0
    30d0:	0f b6       	in	r0, 0x3f	; 63
    30d2:	0f 92       	push	r0
    30d4:	11 24       	eor	r1, r1
    30d6:	0b b6       	in	r0, 0x3b	; 59
    30d8:	0f 92       	push	r0
    30da:	2f 93       	push	r18
    30dc:	3f 93       	push	r19
    30de:	4f 93       	push	r20
    30e0:	5f 93       	push	r21
    30e2:	6f 93       	push	r22
    30e4:	7f 93       	push	r23
    30e6:	8f 93       	push	r24
    30e8:	9f 93       	push	r25
    30ea:	af 93       	push	r26
    30ec:	bf 93       	push	r27
    30ee:	ef 93       	push	r30
    30f0:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
    30f2:	e0 91 4e 2c 	lds	r30, 0x2C4E
    30f6:	f0 91 4f 2c 	lds	r31, 0x2C4F
    30fa:	30 97       	sbiw	r30, 0x00	; 0
    30fc:	09 f0       	breq	.+2      	; 0x3100 <__vector_23+0x34>
		tc_tcc1_ccb_callback();
    30fe:	09 95       	icall
	}
}
    3100:	ff 91       	pop	r31
    3102:	ef 91       	pop	r30
    3104:	bf 91       	pop	r27
    3106:	af 91       	pop	r26
    3108:	9f 91       	pop	r25
    310a:	8f 91       	pop	r24
    310c:	7f 91       	pop	r23
    310e:	6f 91       	pop	r22
    3110:	5f 91       	pop	r21
    3112:	4f 91       	pop	r20
    3114:	3f 91       	pop	r19
    3116:	2f 91       	pop	r18
    3118:	0f 90       	pop	r0
    311a:	0b be       	out	0x3b, r0	; 59
    311c:	0f 90       	pop	r0
    311e:	0f be       	out	0x3f, r0	; 63
    3120:	0f 90       	pop	r0
    3122:	1f 90       	pop	r1
    3124:	18 95       	reti

00003126 <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
    3126:	1f 92       	push	r1
    3128:	0f 92       	push	r0
    312a:	0f b6       	in	r0, 0x3f	; 63
    312c:	0f 92       	push	r0
    312e:	11 24       	eor	r1, r1
    3130:	0b b6       	in	r0, 0x3b	; 59
    3132:	0f 92       	push	r0
    3134:	2f 93       	push	r18
    3136:	3f 93       	push	r19
    3138:	4f 93       	push	r20
    313a:	5f 93       	push	r21
    313c:	6f 93       	push	r22
    313e:	7f 93       	push	r23
    3140:	8f 93       	push	r24
    3142:	9f 93       	push	r25
    3144:	af 93       	push	r26
    3146:	bf 93       	push	r27
    3148:	ef 93       	push	r30
    314a:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
    314c:	e0 91 50 2c 	lds	r30, 0x2C50
    3150:	f0 91 51 2c 	lds	r31, 0x2C51
    3154:	30 97       	sbiw	r30, 0x00	; 0
    3156:	09 f0       	breq	.+2      	; 0x315a <__vector_77+0x34>
		tc_tcd0_ovf_callback();
    3158:	09 95       	icall
	}
}
    315a:	ff 91       	pop	r31
    315c:	ef 91       	pop	r30
    315e:	bf 91       	pop	r27
    3160:	af 91       	pop	r26
    3162:	9f 91       	pop	r25
    3164:	8f 91       	pop	r24
    3166:	7f 91       	pop	r23
    3168:	6f 91       	pop	r22
    316a:	5f 91       	pop	r21
    316c:	4f 91       	pop	r20
    316e:	3f 91       	pop	r19
    3170:	2f 91       	pop	r18
    3172:	0f 90       	pop	r0
    3174:	0b be       	out	0x3b, r0	; 59
    3176:	0f 90       	pop	r0
    3178:	0f be       	out	0x3f, r0	; 63
    317a:	0f 90       	pop	r0
    317c:	1f 90       	pop	r1
    317e:	18 95       	reti

00003180 <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
    3180:	1f 92       	push	r1
    3182:	0f 92       	push	r0
    3184:	0f b6       	in	r0, 0x3f	; 63
    3186:	0f 92       	push	r0
    3188:	11 24       	eor	r1, r1
    318a:	0b b6       	in	r0, 0x3b	; 59
    318c:	0f 92       	push	r0
    318e:	2f 93       	push	r18
    3190:	3f 93       	push	r19
    3192:	4f 93       	push	r20
    3194:	5f 93       	push	r21
    3196:	6f 93       	push	r22
    3198:	7f 93       	push	r23
    319a:	8f 93       	push	r24
    319c:	9f 93       	push	r25
    319e:	af 93       	push	r26
    31a0:	bf 93       	push	r27
    31a2:	ef 93       	push	r30
    31a4:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
    31a6:	e0 91 52 2c 	lds	r30, 0x2C52
    31aa:	f0 91 53 2c 	lds	r31, 0x2C53
    31ae:	30 97       	sbiw	r30, 0x00	; 0
    31b0:	09 f0       	breq	.+2      	; 0x31b4 <__vector_78+0x34>
		tc_tcd0_err_callback();
    31b2:	09 95       	icall
	}
}
    31b4:	ff 91       	pop	r31
    31b6:	ef 91       	pop	r30
    31b8:	bf 91       	pop	r27
    31ba:	af 91       	pop	r26
    31bc:	9f 91       	pop	r25
    31be:	8f 91       	pop	r24
    31c0:	7f 91       	pop	r23
    31c2:	6f 91       	pop	r22
    31c4:	5f 91       	pop	r21
    31c6:	4f 91       	pop	r20
    31c8:	3f 91       	pop	r19
    31ca:	2f 91       	pop	r18
    31cc:	0f 90       	pop	r0
    31ce:	0b be       	out	0x3b, r0	; 59
    31d0:	0f 90       	pop	r0
    31d2:	0f be       	out	0x3f, r0	; 63
    31d4:	0f 90       	pop	r0
    31d6:	1f 90       	pop	r1
    31d8:	18 95       	reti

000031da <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
    31da:	1f 92       	push	r1
    31dc:	0f 92       	push	r0
    31de:	0f b6       	in	r0, 0x3f	; 63
    31e0:	0f 92       	push	r0
    31e2:	11 24       	eor	r1, r1
    31e4:	0b b6       	in	r0, 0x3b	; 59
    31e6:	0f 92       	push	r0
    31e8:	2f 93       	push	r18
    31ea:	3f 93       	push	r19
    31ec:	4f 93       	push	r20
    31ee:	5f 93       	push	r21
    31f0:	6f 93       	push	r22
    31f2:	7f 93       	push	r23
    31f4:	8f 93       	push	r24
    31f6:	9f 93       	push	r25
    31f8:	af 93       	push	r26
    31fa:	bf 93       	push	r27
    31fc:	ef 93       	push	r30
    31fe:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
    3200:	e0 91 54 2c 	lds	r30, 0x2C54
    3204:	f0 91 55 2c 	lds	r31, 0x2C55
    3208:	30 97       	sbiw	r30, 0x00	; 0
    320a:	09 f0       	breq	.+2      	; 0x320e <__vector_79+0x34>
		tc_tcd0_cca_callback();
    320c:	09 95       	icall
	}
}
    320e:	ff 91       	pop	r31
    3210:	ef 91       	pop	r30
    3212:	bf 91       	pop	r27
    3214:	af 91       	pop	r26
    3216:	9f 91       	pop	r25
    3218:	8f 91       	pop	r24
    321a:	7f 91       	pop	r23
    321c:	6f 91       	pop	r22
    321e:	5f 91       	pop	r21
    3220:	4f 91       	pop	r20
    3222:	3f 91       	pop	r19
    3224:	2f 91       	pop	r18
    3226:	0f 90       	pop	r0
    3228:	0b be       	out	0x3b, r0	; 59
    322a:	0f 90       	pop	r0
    322c:	0f be       	out	0x3f, r0	; 63
    322e:	0f 90       	pop	r0
    3230:	1f 90       	pop	r1
    3232:	18 95       	reti

00003234 <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
    3234:	1f 92       	push	r1
    3236:	0f 92       	push	r0
    3238:	0f b6       	in	r0, 0x3f	; 63
    323a:	0f 92       	push	r0
    323c:	11 24       	eor	r1, r1
    323e:	0b b6       	in	r0, 0x3b	; 59
    3240:	0f 92       	push	r0
    3242:	2f 93       	push	r18
    3244:	3f 93       	push	r19
    3246:	4f 93       	push	r20
    3248:	5f 93       	push	r21
    324a:	6f 93       	push	r22
    324c:	7f 93       	push	r23
    324e:	8f 93       	push	r24
    3250:	9f 93       	push	r25
    3252:	af 93       	push	r26
    3254:	bf 93       	push	r27
    3256:	ef 93       	push	r30
    3258:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
    325a:	e0 91 56 2c 	lds	r30, 0x2C56
    325e:	f0 91 57 2c 	lds	r31, 0x2C57
    3262:	30 97       	sbiw	r30, 0x00	; 0
    3264:	09 f0       	breq	.+2      	; 0x3268 <__vector_80+0x34>
		tc_tcd0_ccb_callback();
    3266:	09 95       	icall
	}
}
    3268:	ff 91       	pop	r31
    326a:	ef 91       	pop	r30
    326c:	bf 91       	pop	r27
    326e:	af 91       	pop	r26
    3270:	9f 91       	pop	r25
    3272:	8f 91       	pop	r24
    3274:	7f 91       	pop	r23
    3276:	6f 91       	pop	r22
    3278:	5f 91       	pop	r21
    327a:	4f 91       	pop	r20
    327c:	3f 91       	pop	r19
    327e:	2f 91       	pop	r18
    3280:	0f 90       	pop	r0
    3282:	0b be       	out	0x3b, r0	; 59
    3284:	0f 90       	pop	r0
    3286:	0f be       	out	0x3f, r0	; 63
    3288:	0f 90       	pop	r0
    328a:	1f 90       	pop	r1
    328c:	18 95       	reti

0000328e <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
    328e:	1f 92       	push	r1
    3290:	0f 92       	push	r0
    3292:	0f b6       	in	r0, 0x3f	; 63
    3294:	0f 92       	push	r0
    3296:	11 24       	eor	r1, r1
    3298:	0b b6       	in	r0, 0x3b	; 59
    329a:	0f 92       	push	r0
    329c:	2f 93       	push	r18
    329e:	3f 93       	push	r19
    32a0:	4f 93       	push	r20
    32a2:	5f 93       	push	r21
    32a4:	6f 93       	push	r22
    32a6:	7f 93       	push	r23
    32a8:	8f 93       	push	r24
    32aa:	9f 93       	push	r25
    32ac:	af 93       	push	r26
    32ae:	bf 93       	push	r27
    32b0:	ef 93       	push	r30
    32b2:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
    32b4:	e0 91 58 2c 	lds	r30, 0x2C58
    32b8:	f0 91 59 2c 	lds	r31, 0x2C59
    32bc:	30 97       	sbiw	r30, 0x00	; 0
    32be:	09 f0       	breq	.+2      	; 0x32c2 <__vector_81+0x34>
		tc_tcd0_ccc_callback();
    32c0:	09 95       	icall
	}
}
    32c2:	ff 91       	pop	r31
    32c4:	ef 91       	pop	r30
    32c6:	bf 91       	pop	r27
    32c8:	af 91       	pop	r26
    32ca:	9f 91       	pop	r25
    32cc:	8f 91       	pop	r24
    32ce:	7f 91       	pop	r23
    32d0:	6f 91       	pop	r22
    32d2:	5f 91       	pop	r21
    32d4:	4f 91       	pop	r20
    32d6:	3f 91       	pop	r19
    32d8:	2f 91       	pop	r18
    32da:	0f 90       	pop	r0
    32dc:	0b be       	out	0x3b, r0	; 59
    32de:	0f 90       	pop	r0
    32e0:	0f be       	out	0x3f, r0	; 63
    32e2:	0f 90       	pop	r0
    32e4:	1f 90       	pop	r1
    32e6:	18 95       	reti

000032e8 <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
    32e8:	1f 92       	push	r1
    32ea:	0f 92       	push	r0
    32ec:	0f b6       	in	r0, 0x3f	; 63
    32ee:	0f 92       	push	r0
    32f0:	11 24       	eor	r1, r1
    32f2:	0b b6       	in	r0, 0x3b	; 59
    32f4:	0f 92       	push	r0
    32f6:	2f 93       	push	r18
    32f8:	3f 93       	push	r19
    32fa:	4f 93       	push	r20
    32fc:	5f 93       	push	r21
    32fe:	6f 93       	push	r22
    3300:	7f 93       	push	r23
    3302:	8f 93       	push	r24
    3304:	9f 93       	push	r25
    3306:	af 93       	push	r26
    3308:	bf 93       	push	r27
    330a:	ef 93       	push	r30
    330c:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
    330e:	e0 91 5a 2c 	lds	r30, 0x2C5A
    3312:	f0 91 5b 2c 	lds	r31, 0x2C5B
    3316:	30 97       	sbiw	r30, 0x00	; 0
    3318:	09 f0       	breq	.+2      	; 0x331c <__vector_82+0x34>
		tc_tcd0_ccd_callback();
    331a:	09 95       	icall
	}
}
    331c:	ff 91       	pop	r31
    331e:	ef 91       	pop	r30
    3320:	bf 91       	pop	r27
    3322:	af 91       	pop	r26
    3324:	9f 91       	pop	r25
    3326:	8f 91       	pop	r24
    3328:	7f 91       	pop	r23
    332a:	6f 91       	pop	r22
    332c:	5f 91       	pop	r21
    332e:	4f 91       	pop	r20
    3330:	3f 91       	pop	r19
    3332:	2f 91       	pop	r18
    3334:	0f 90       	pop	r0
    3336:	0b be       	out	0x3b, r0	; 59
    3338:	0f 90       	pop	r0
    333a:	0f be       	out	0x3f, r0	; 63
    333c:	0f 90       	pop	r0
    333e:	1f 90       	pop	r1
    3340:	18 95       	reti

00003342 <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
    3342:	1f 92       	push	r1
    3344:	0f 92       	push	r0
    3346:	0f b6       	in	r0, 0x3f	; 63
    3348:	0f 92       	push	r0
    334a:	11 24       	eor	r1, r1
    334c:	0b b6       	in	r0, 0x3b	; 59
    334e:	0f 92       	push	r0
    3350:	2f 93       	push	r18
    3352:	3f 93       	push	r19
    3354:	4f 93       	push	r20
    3356:	5f 93       	push	r21
    3358:	6f 93       	push	r22
    335a:	7f 93       	push	r23
    335c:	8f 93       	push	r24
    335e:	9f 93       	push	r25
    3360:	af 93       	push	r26
    3362:	bf 93       	push	r27
    3364:	ef 93       	push	r30
    3366:	ff 93       	push	r31
	if (tc_tce0_ovf_callback) {
    3368:	e0 91 5c 2c 	lds	r30, 0x2C5C
    336c:	f0 91 5d 2c 	lds	r31, 0x2C5D
    3370:	30 97       	sbiw	r30, 0x00	; 0
    3372:	09 f0       	breq	.+2      	; 0x3376 <__vector_47+0x34>
		tc_tce0_ovf_callback();
    3374:	09 95       	icall
	}
}
    3376:	ff 91       	pop	r31
    3378:	ef 91       	pop	r30
    337a:	bf 91       	pop	r27
    337c:	af 91       	pop	r26
    337e:	9f 91       	pop	r25
    3380:	8f 91       	pop	r24
    3382:	7f 91       	pop	r23
    3384:	6f 91       	pop	r22
    3386:	5f 91       	pop	r21
    3388:	4f 91       	pop	r20
    338a:	3f 91       	pop	r19
    338c:	2f 91       	pop	r18
    338e:	0f 90       	pop	r0
    3390:	0b be       	out	0x3b, r0	; 59
    3392:	0f 90       	pop	r0
    3394:	0f be       	out	0x3f, r0	; 63
    3396:	0f 90       	pop	r0
    3398:	1f 90       	pop	r1
    339a:	18 95       	reti

0000339c <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
    339c:	1f 92       	push	r1
    339e:	0f 92       	push	r0
    33a0:	0f b6       	in	r0, 0x3f	; 63
    33a2:	0f 92       	push	r0
    33a4:	11 24       	eor	r1, r1
    33a6:	0b b6       	in	r0, 0x3b	; 59
    33a8:	0f 92       	push	r0
    33aa:	2f 93       	push	r18
    33ac:	3f 93       	push	r19
    33ae:	4f 93       	push	r20
    33b0:	5f 93       	push	r21
    33b2:	6f 93       	push	r22
    33b4:	7f 93       	push	r23
    33b6:	8f 93       	push	r24
    33b8:	9f 93       	push	r25
    33ba:	af 93       	push	r26
    33bc:	bf 93       	push	r27
    33be:	ef 93       	push	r30
    33c0:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
    33c2:	e0 91 5e 2c 	lds	r30, 0x2C5E
    33c6:	f0 91 5f 2c 	lds	r31, 0x2C5F
    33ca:	30 97       	sbiw	r30, 0x00	; 0
    33cc:	09 f0       	breq	.+2      	; 0x33d0 <__vector_48+0x34>
		tc_tce0_err_callback();
    33ce:	09 95       	icall
	}
}
    33d0:	ff 91       	pop	r31
    33d2:	ef 91       	pop	r30
    33d4:	bf 91       	pop	r27
    33d6:	af 91       	pop	r26
    33d8:	9f 91       	pop	r25
    33da:	8f 91       	pop	r24
    33dc:	7f 91       	pop	r23
    33de:	6f 91       	pop	r22
    33e0:	5f 91       	pop	r21
    33e2:	4f 91       	pop	r20
    33e4:	3f 91       	pop	r19
    33e6:	2f 91       	pop	r18
    33e8:	0f 90       	pop	r0
    33ea:	0b be       	out	0x3b, r0	; 59
    33ec:	0f 90       	pop	r0
    33ee:	0f be       	out	0x3f, r0	; 63
    33f0:	0f 90       	pop	r0
    33f2:	1f 90       	pop	r1
    33f4:	18 95       	reti

000033f6 <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
    33f6:	1f 92       	push	r1
    33f8:	0f 92       	push	r0
    33fa:	0f b6       	in	r0, 0x3f	; 63
    33fc:	0f 92       	push	r0
    33fe:	11 24       	eor	r1, r1
    3400:	0b b6       	in	r0, 0x3b	; 59
    3402:	0f 92       	push	r0
    3404:	2f 93       	push	r18
    3406:	3f 93       	push	r19
    3408:	4f 93       	push	r20
    340a:	5f 93       	push	r21
    340c:	6f 93       	push	r22
    340e:	7f 93       	push	r23
    3410:	8f 93       	push	r24
    3412:	9f 93       	push	r25
    3414:	af 93       	push	r26
    3416:	bf 93       	push	r27
    3418:	ef 93       	push	r30
    341a:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
    341c:	e0 91 60 2c 	lds	r30, 0x2C60
    3420:	f0 91 61 2c 	lds	r31, 0x2C61
    3424:	30 97       	sbiw	r30, 0x00	; 0
    3426:	09 f0       	breq	.+2      	; 0x342a <__vector_49+0x34>
		tc_tce0_cca_callback();
    3428:	09 95       	icall
	}
}
    342a:	ff 91       	pop	r31
    342c:	ef 91       	pop	r30
    342e:	bf 91       	pop	r27
    3430:	af 91       	pop	r26
    3432:	9f 91       	pop	r25
    3434:	8f 91       	pop	r24
    3436:	7f 91       	pop	r23
    3438:	6f 91       	pop	r22
    343a:	5f 91       	pop	r21
    343c:	4f 91       	pop	r20
    343e:	3f 91       	pop	r19
    3440:	2f 91       	pop	r18
    3442:	0f 90       	pop	r0
    3444:	0b be       	out	0x3b, r0	; 59
    3446:	0f 90       	pop	r0
    3448:	0f be       	out	0x3f, r0	; 63
    344a:	0f 90       	pop	r0
    344c:	1f 90       	pop	r1
    344e:	18 95       	reti

00003450 <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
    3450:	1f 92       	push	r1
    3452:	0f 92       	push	r0
    3454:	0f b6       	in	r0, 0x3f	; 63
    3456:	0f 92       	push	r0
    3458:	11 24       	eor	r1, r1
    345a:	0b b6       	in	r0, 0x3b	; 59
    345c:	0f 92       	push	r0
    345e:	2f 93       	push	r18
    3460:	3f 93       	push	r19
    3462:	4f 93       	push	r20
    3464:	5f 93       	push	r21
    3466:	6f 93       	push	r22
    3468:	7f 93       	push	r23
    346a:	8f 93       	push	r24
    346c:	9f 93       	push	r25
    346e:	af 93       	push	r26
    3470:	bf 93       	push	r27
    3472:	ef 93       	push	r30
    3474:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
    3476:	e0 91 62 2c 	lds	r30, 0x2C62
    347a:	f0 91 63 2c 	lds	r31, 0x2C63
    347e:	30 97       	sbiw	r30, 0x00	; 0
    3480:	09 f0       	breq	.+2      	; 0x3484 <__vector_50+0x34>
		tc_tce0_ccb_callback();
    3482:	09 95       	icall
	}
}
    3484:	ff 91       	pop	r31
    3486:	ef 91       	pop	r30
    3488:	bf 91       	pop	r27
    348a:	af 91       	pop	r26
    348c:	9f 91       	pop	r25
    348e:	8f 91       	pop	r24
    3490:	7f 91       	pop	r23
    3492:	6f 91       	pop	r22
    3494:	5f 91       	pop	r21
    3496:	4f 91       	pop	r20
    3498:	3f 91       	pop	r19
    349a:	2f 91       	pop	r18
    349c:	0f 90       	pop	r0
    349e:	0b be       	out	0x3b, r0	; 59
    34a0:	0f 90       	pop	r0
    34a2:	0f be       	out	0x3f, r0	; 63
    34a4:	0f 90       	pop	r0
    34a6:	1f 90       	pop	r1
    34a8:	18 95       	reti

000034aa <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
    34aa:	1f 92       	push	r1
    34ac:	0f 92       	push	r0
    34ae:	0f b6       	in	r0, 0x3f	; 63
    34b0:	0f 92       	push	r0
    34b2:	11 24       	eor	r1, r1
    34b4:	0b b6       	in	r0, 0x3b	; 59
    34b6:	0f 92       	push	r0
    34b8:	2f 93       	push	r18
    34ba:	3f 93       	push	r19
    34bc:	4f 93       	push	r20
    34be:	5f 93       	push	r21
    34c0:	6f 93       	push	r22
    34c2:	7f 93       	push	r23
    34c4:	8f 93       	push	r24
    34c6:	9f 93       	push	r25
    34c8:	af 93       	push	r26
    34ca:	bf 93       	push	r27
    34cc:	ef 93       	push	r30
    34ce:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
    34d0:	e0 91 64 2c 	lds	r30, 0x2C64
    34d4:	f0 91 65 2c 	lds	r31, 0x2C65
    34d8:	30 97       	sbiw	r30, 0x00	; 0
    34da:	09 f0       	breq	.+2      	; 0x34de <__vector_51+0x34>
		tc_tce0_ccc_callback();
    34dc:	09 95       	icall
	}
}
    34de:	ff 91       	pop	r31
    34e0:	ef 91       	pop	r30
    34e2:	bf 91       	pop	r27
    34e4:	af 91       	pop	r26
    34e6:	9f 91       	pop	r25
    34e8:	8f 91       	pop	r24
    34ea:	7f 91       	pop	r23
    34ec:	6f 91       	pop	r22
    34ee:	5f 91       	pop	r21
    34f0:	4f 91       	pop	r20
    34f2:	3f 91       	pop	r19
    34f4:	2f 91       	pop	r18
    34f6:	0f 90       	pop	r0
    34f8:	0b be       	out	0x3b, r0	; 59
    34fa:	0f 90       	pop	r0
    34fc:	0f be       	out	0x3f, r0	; 63
    34fe:	0f 90       	pop	r0
    3500:	1f 90       	pop	r1
    3502:	18 95       	reti

00003504 <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
    3504:	1f 92       	push	r1
    3506:	0f 92       	push	r0
    3508:	0f b6       	in	r0, 0x3f	; 63
    350a:	0f 92       	push	r0
    350c:	11 24       	eor	r1, r1
    350e:	0b b6       	in	r0, 0x3b	; 59
    3510:	0f 92       	push	r0
    3512:	2f 93       	push	r18
    3514:	3f 93       	push	r19
    3516:	4f 93       	push	r20
    3518:	5f 93       	push	r21
    351a:	6f 93       	push	r22
    351c:	7f 93       	push	r23
    351e:	8f 93       	push	r24
    3520:	9f 93       	push	r25
    3522:	af 93       	push	r26
    3524:	bf 93       	push	r27
    3526:	ef 93       	push	r30
    3528:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
    352a:	e0 91 66 2c 	lds	r30, 0x2C66
    352e:	f0 91 67 2c 	lds	r31, 0x2C67
    3532:	30 97       	sbiw	r30, 0x00	; 0
    3534:	09 f0       	breq	.+2      	; 0x3538 <__vector_52+0x34>
		tc_tce0_ccd_callback();
    3536:	09 95       	icall
	}
}
    3538:	ff 91       	pop	r31
    353a:	ef 91       	pop	r30
    353c:	bf 91       	pop	r27
    353e:	af 91       	pop	r26
    3540:	9f 91       	pop	r25
    3542:	8f 91       	pop	r24
    3544:	7f 91       	pop	r23
    3546:	6f 91       	pop	r22
    3548:	5f 91       	pop	r21
    354a:	4f 91       	pop	r20
    354c:	3f 91       	pop	r19
    354e:	2f 91       	pop	r18
    3550:	0f 90       	pop	r0
    3552:	0b be       	out	0x3b, r0	; 59
    3554:	0f 90       	pop	r0
    3556:	0f be       	out	0x3f, r0	; 63
    3558:	0f 90       	pop	r0
    355a:	1f 90       	pop	r1
    355c:	18 95       	reti

0000355e <__vector_108>:
 *
 * This function will handle interrupt on Timer Counter F0 overflow and
 * call the callback function.
 */
ISR(TCF0_OVF_vect)
{
    355e:	1f 92       	push	r1
    3560:	0f 92       	push	r0
    3562:	0f b6       	in	r0, 0x3f	; 63
    3564:	0f 92       	push	r0
    3566:	11 24       	eor	r1, r1
    3568:	0b b6       	in	r0, 0x3b	; 59
    356a:	0f 92       	push	r0
    356c:	2f 93       	push	r18
    356e:	3f 93       	push	r19
    3570:	4f 93       	push	r20
    3572:	5f 93       	push	r21
    3574:	6f 93       	push	r22
    3576:	7f 93       	push	r23
    3578:	8f 93       	push	r24
    357a:	9f 93       	push	r25
    357c:	af 93       	push	r26
    357e:	bf 93       	push	r27
    3580:	ef 93       	push	r30
    3582:	ff 93       	push	r31
	if (tc_tcf0_ovf_callback) {
    3584:	e0 91 68 2c 	lds	r30, 0x2C68
    3588:	f0 91 69 2c 	lds	r31, 0x2C69
    358c:	30 97       	sbiw	r30, 0x00	; 0
    358e:	09 f0       	breq	.+2      	; 0x3592 <__vector_108+0x34>
		tc_tcf0_ovf_callback();
    3590:	09 95       	icall
	}
}
    3592:	ff 91       	pop	r31
    3594:	ef 91       	pop	r30
    3596:	bf 91       	pop	r27
    3598:	af 91       	pop	r26
    359a:	9f 91       	pop	r25
    359c:	8f 91       	pop	r24
    359e:	7f 91       	pop	r23
    35a0:	6f 91       	pop	r22
    35a2:	5f 91       	pop	r21
    35a4:	4f 91       	pop	r20
    35a6:	3f 91       	pop	r19
    35a8:	2f 91       	pop	r18
    35aa:	0f 90       	pop	r0
    35ac:	0b be       	out	0x3b, r0	; 59
    35ae:	0f 90       	pop	r0
    35b0:	0f be       	out	0x3f, r0	; 63
    35b2:	0f 90       	pop	r0
    35b4:	1f 90       	pop	r1
    35b6:	18 95       	reti

000035b8 <__vector_109>:
 *
 * This function will handle interrupt on Timer Counter F0 error and
 * call the callback function.
 */
ISR(TCF0_ERR_vect)
{
    35b8:	1f 92       	push	r1
    35ba:	0f 92       	push	r0
    35bc:	0f b6       	in	r0, 0x3f	; 63
    35be:	0f 92       	push	r0
    35c0:	11 24       	eor	r1, r1
    35c2:	0b b6       	in	r0, 0x3b	; 59
    35c4:	0f 92       	push	r0
    35c6:	2f 93       	push	r18
    35c8:	3f 93       	push	r19
    35ca:	4f 93       	push	r20
    35cc:	5f 93       	push	r21
    35ce:	6f 93       	push	r22
    35d0:	7f 93       	push	r23
    35d2:	8f 93       	push	r24
    35d4:	9f 93       	push	r25
    35d6:	af 93       	push	r26
    35d8:	bf 93       	push	r27
    35da:	ef 93       	push	r30
    35dc:	ff 93       	push	r31
	if (tc_tcf0_err_callback) {
    35de:	e0 91 6a 2c 	lds	r30, 0x2C6A
    35e2:	f0 91 6b 2c 	lds	r31, 0x2C6B
    35e6:	30 97       	sbiw	r30, 0x00	; 0
    35e8:	09 f0       	breq	.+2      	; 0x35ec <__vector_109+0x34>
		tc_tcf0_err_callback();
    35ea:	09 95       	icall
	}
}
    35ec:	ff 91       	pop	r31
    35ee:	ef 91       	pop	r30
    35f0:	bf 91       	pop	r27
    35f2:	af 91       	pop	r26
    35f4:	9f 91       	pop	r25
    35f6:	8f 91       	pop	r24
    35f8:	7f 91       	pop	r23
    35fa:	6f 91       	pop	r22
    35fc:	5f 91       	pop	r21
    35fe:	4f 91       	pop	r20
    3600:	3f 91       	pop	r19
    3602:	2f 91       	pop	r18
    3604:	0f 90       	pop	r0
    3606:	0b be       	out	0x3b, r0	; 59
    3608:	0f 90       	pop	r0
    360a:	0f be       	out	0x3f, r0	; 63
    360c:	0f 90       	pop	r0
    360e:	1f 90       	pop	r1
    3610:	18 95       	reti

00003612 <__vector_110>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF0_CCA_vect)
{
    3612:	1f 92       	push	r1
    3614:	0f 92       	push	r0
    3616:	0f b6       	in	r0, 0x3f	; 63
    3618:	0f 92       	push	r0
    361a:	11 24       	eor	r1, r1
    361c:	0b b6       	in	r0, 0x3b	; 59
    361e:	0f 92       	push	r0
    3620:	2f 93       	push	r18
    3622:	3f 93       	push	r19
    3624:	4f 93       	push	r20
    3626:	5f 93       	push	r21
    3628:	6f 93       	push	r22
    362a:	7f 93       	push	r23
    362c:	8f 93       	push	r24
    362e:	9f 93       	push	r25
    3630:	af 93       	push	r26
    3632:	bf 93       	push	r27
    3634:	ef 93       	push	r30
    3636:	ff 93       	push	r31
	if (tc_tcf0_cca_callback) {
    3638:	e0 91 6c 2c 	lds	r30, 0x2C6C
    363c:	f0 91 6d 2c 	lds	r31, 0x2C6D
    3640:	30 97       	sbiw	r30, 0x00	; 0
    3642:	09 f0       	breq	.+2      	; 0x3646 <__vector_110+0x34>
		tc_tcf0_cca_callback();
    3644:	09 95       	icall
	}
}
    3646:	ff 91       	pop	r31
    3648:	ef 91       	pop	r30
    364a:	bf 91       	pop	r27
    364c:	af 91       	pop	r26
    364e:	9f 91       	pop	r25
    3650:	8f 91       	pop	r24
    3652:	7f 91       	pop	r23
    3654:	6f 91       	pop	r22
    3656:	5f 91       	pop	r21
    3658:	4f 91       	pop	r20
    365a:	3f 91       	pop	r19
    365c:	2f 91       	pop	r18
    365e:	0f 90       	pop	r0
    3660:	0b be       	out	0x3b, r0	; 59
    3662:	0f 90       	pop	r0
    3664:	0f be       	out	0x3f, r0	; 63
    3666:	0f 90       	pop	r0
    3668:	1f 90       	pop	r1
    366a:	18 95       	reti

0000366c <__vector_111>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF0_CCB_vect)
{
    366c:	1f 92       	push	r1
    366e:	0f 92       	push	r0
    3670:	0f b6       	in	r0, 0x3f	; 63
    3672:	0f 92       	push	r0
    3674:	11 24       	eor	r1, r1
    3676:	0b b6       	in	r0, 0x3b	; 59
    3678:	0f 92       	push	r0
    367a:	2f 93       	push	r18
    367c:	3f 93       	push	r19
    367e:	4f 93       	push	r20
    3680:	5f 93       	push	r21
    3682:	6f 93       	push	r22
    3684:	7f 93       	push	r23
    3686:	8f 93       	push	r24
    3688:	9f 93       	push	r25
    368a:	af 93       	push	r26
    368c:	bf 93       	push	r27
    368e:	ef 93       	push	r30
    3690:	ff 93       	push	r31
	if (tc_tcf0_ccb_callback) {
    3692:	e0 91 6e 2c 	lds	r30, 0x2C6E
    3696:	f0 91 6f 2c 	lds	r31, 0x2C6F
    369a:	30 97       	sbiw	r30, 0x00	; 0
    369c:	09 f0       	breq	.+2      	; 0x36a0 <__vector_111+0x34>
		tc_tcf0_ccb_callback();
    369e:	09 95       	icall
	}
}
    36a0:	ff 91       	pop	r31
    36a2:	ef 91       	pop	r30
    36a4:	bf 91       	pop	r27
    36a6:	af 91       	pop	r26
    36a8:	9f 91       	pop	r25
    36aa:	8f 91       	pop	r24
    36ac:	7f 91       	pop	r23
    36ae:	6f 91       	pop	r22
    36b0:	5f 91       	pop	r21
    36b2:	4f 91       	pop	r20
    36b4:	3f 91       	pop	r19
    36b6:	2f 91       	pop	r18
    36b8:	0f 90       	pop	r0
    36ba:	0b be       	out	0x3b, r0	; 59
    36bc:	0f 90       	pop	r0
    36be:	0f be       	out	0x3f, r0	; 63
    36c0:	0f 90       	pop	r0
    36c2:	1f 90       	pop	r1
    36c4:	18 95       	reti

000036c6 <__vector_112>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCF0_CCC_vect)
{
    36c6:	1f 92       	push	r1
    36c8:	0f 92       	push	r0
    36ca:	0f b6       	in	r0, 0x3f	; 63
    36cc:	0f 92       	push	r0
    36ce:	11 24       	eor	r1, r1
    36d0:	0b b6       	in	r0, 0x3b	; 59
    36d2:	0f 92       	push	r0
    36d4:	2f 93       	push	r18
    36d6:	3f 93       	push	r19
    36d8:	4f 93       	push	r20
    36da:	5f 93       	push	r21
    36dc:	6f 93       	push	r22
    36de:	7f 93       	push	r23
    36e0:	8f 93       	push	r24
    36e2:	9f 93       	push	r25
    36e4:	af 93       	push	r26
    36e6:	bf 93       	push	r27
    36e8:	ef 93       	push	r30
    36ea:	ff 93       	push	r31
	if (tc_tcf0_ccc_callback) {
    36ec:	e0 91 70 2c 	lds	r30, 0x2C70
    36f0:	f0 91 71 2c 	lds	r31, 0x2C71
    36f4:	30 97       	sbiw	r30, 0x00	; 0
    36f6:	09 f0       	breq	.+2      	; 0x36fa <__vector_112+0x34>
		tc_tcf0_ccc_callback();
    36f8:	09 95       	icall
	}
}
    36fa:	ff 91       	pop	r31
    36fc:	ef 91       	pop	r30
    36fe:	bf 91       	pop	r27
    3700:	af 91       	pop	r26
    3702:	9f 91       	pop	r25
    3704:	8f 91       	pop	r24
    3706:	7f 91       	pop	r23
    3708:	6f 91       	pop	r22
    370a:	5f 91       	pop	r21
    370c:	4f 91       	pop	r20
    370e:	3f 91       	pop	r19
    3710:	2f 91       	pop	r18
    3712:	0f 90       	pop	r0
    3714:	0b be       	out	0x3b, r0	; 59
    3716:	0f 90       	pop	r0
    3718:	0f be       	out	0x3f, r0	; 63
    371a:	0f 90       	pop	r0
    371c:	1f 90       	pop	r1
    371e:	18 95       	reti

00003720 <__vector_113>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCF0_CCD_vect)
{
    3720:	1f 92       	push	r1
    3722:	0f 92       	push	r0
    3724:	0f b6       	in	r0, 0x3f	; 63
    3726:	0f 92       	push	r0
    3728:	11 24       	eor	r1, r1
    372a:	0b b6       	in	r0, 0x3b	; 59
    372c:	0f 92       	push	r0
    372e:	2f 93       	push	r18
    3730:	3f 93       	push	r19
    3732:	4f 93       	push	r20
    3734:	5f 93       	push	r21
    3736:	6f 93       	push	r22
    3738:	7f 93       	push	r23
    373a:	8f 93       	push	r24
    373c:	9f 93       	push	r25
    373e:	af 93       	push	r26
    3740:	bf 93       	push	r27
    3742:	ef 93       	push	r30
    3744:	ff 93       	push	r31
	if (tc_tcf0_ccd_callback) {
    3746:	e0 91 72 2c 	lds	r30, 0x2C72
    374a:	f0 91 73 2c 	lds	r31, 0x2C73
    374e:	30 97       	sbiw	r30, 0x00	; 0
    3750:	09 f0       	breq	.+2      	; 0x3754 <__vector_113+0x34>
		tc_tcf0_ccd_callback();
    3752:	09 95       	icall
	}
}
    3754:	ff 91       	pop	r31
    3756:	ef 91       	pop	r30
    3758:	bf 91       	pop	r27
    375a:	af 91       	pop	r26
    375c:	9f 91       	pop	r25
    375e:	8f 91       	pop	r24
    3760:	7f 91       	pop	r23
    3762:	6f 91       	pop	r22
    3764:	5f 91       	pop	r21
    3766:	4f 91       	pop	r20
    3768:	3f 91       	pop	r19
    376a:	2f 91       	pop	r18
    376c:	0f 90       	pop	r0
    376e:	0b be       	out	0x3b, r0	; 59
    3770:	0f 90       	pop	r0
    3772:	0f be       	out	0x3f, r0	; 63
    3774:	0f 90       	pop	r0
    3776:	1f 90       	pop	r1
    3778:	18 95       	reti

0000377a <tc_enable>:
 *
 * \note
 * unmask TC clock (sysclk), but does not configure the TC clock source.
 */
void tc_enable(volatile void *tc)
{
    377a:	cf 93       	push	r28

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    377c:	cf b7       	in	r28, 0x3f	; 63
	cpu_irq_disable();
    377e:	f8 94       	cli
	irqflags_t iflags = cpu_irq_save();

#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    3780:	81 15       	cp	r24, r1
    3782:	28 e0       	ldi	r18, 0x08	; 8
    3784:	92 07       	cpc	r25, r18
    3786:	39 f4       	brne	.+14     	; 0x3796 <tc_enable+0x1c>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    3788:	61 e0       	ldi	r22, 0x01	; 1
    378a:	83 e0       	ldi	r24, 0x03	; 3
    378c:	50 d9       	rcall	.-3424   	; 0x2a2e <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    378e:	64 e0       	ldi	r22, 0x04	; 4
    3790:	83 e0       	ldi	r24, 0x03	; 3
    3792:	4d d9       	rcall	.-3430   	; 0x2a2e <sysclk_enable_module>
    3794:	2d c0       	rjmp	.+90     	; 0x37f0 <tc_enable+0x76>
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    3796:	80 34       	cpi	r24, 0x40	; 64
    3798:	28 e0       	ldi	r18, 0x08	; 8
    379a:	92 07       	cpc	r25, r18
    379c:	39 f4       	brne	.+14     	; 0x37ac <tc_enable+0x32>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    379e:	62 e0       	ldi	r22, 0x02	; 2
    37a0:	83 e0       	ldi	r24, 0x03	; 3
    37a2:	45 d9       	rcall	.-3446   	; 0x2a2e <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    37a4:	64 e0       	ldi	r22, 0x04	; 4
    37a6:	83 e0       	ldi	r24, 0x03	; 3
    37a8:	42 d9       	rcall	.-3452   	; 0x2a2e <sysclk_enable_module>
    37aa:	22 c0       	rjmp	.+68     	; 0x37f0 <tc_enable+0x76>
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    37ac:	81 15       	cp	r24, r1
    37ae:	29 e0       	ldi	r18, 0x09	; 9
    37b0:	92 07       	cpc	r25, r18
    37b2:	39 f4       	brne	.+14     	; 0x37c2 <tc_enable+0x48>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    37b4:	61 e0       	ldi	r22, 0x01	; 1
    37b6:	84 e0       	ldi	r24, 0x04	; 4
    37b8:	3a d9       	rcall	.-3468   	; 0x2a2e <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    37ba:	64 e0       	ldi	r22, 0x04	; 4
    37bc:	84 e0       	ldi	r24, 0x04	; 4
    37be:	37 d9       	rcall	.-3474   	; 0x2a2e <sysclk_enable_module>
    37c0:	17 c0       	rjmp	.+46     	; 0x37f0 <tc_enable+0x76>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    37c2:	81 15       	cp	r24, r1
    37c4:	2a e0       	ldi	r18, 0x0A	; 10
    37c6:	92 07       	cpc	r25, r18
    37c8:	39 f4       	brne	.+14     	; 0x37d8 <tc_enable+0x5e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    37ca:	61 e0       	ldi	r22, 0x01	; 1
    37cc:	85 e0       	ldi	r24, 0x05	; 5
    37ce:	2f d9       	rcall	.-3490   	; 0x2a2e <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    37d0:	64 e0       	ldi	r22, 0x04	; 4
    37d2:	85 e0       	ldi	r24, 0x05	; 5
    37d4:	2c d9       	rcall	.-3496   	; 0x2a2e <sysclk_enable_module>
    37d6:	0c c0       	rjmp	.+24     	; 0x37f0 <tc_enable+0x76>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    37d8:	81 15       	cp	r24, r1
    37da:	9b 40       	sbci	r25, 0x0B	; 11
    37dc:	39 f4       	brne	.+14     	; 0x37ec <tc_enable+0x72>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    37de:	61 e0       	ldi	r22, 0x01	; 1
    37e0:	86 e0       	ldi	r24, 0x06	; 6
    37e2:	25 d9       	rcall	.-3510   	; 0x2a2e <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    37e4:	64 e0       	ldi	r22, 0x04	; 4
    37e6:	86 e0       	ldi	r24, 0x06	; 6
    37e8:	22 d9       	rcall	.-3516   	; 0x2a2e <sysclk_enable_module>
    37ea:	02 c0       	rjmp	.+4      	; 0x37f0 <tc_enable+0x76>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    37ec:	cf bf       	out	0x3f, r28	; 63
    37ee:	09 c0       	rjmp	.+18     	; 0x3802 <tc_enable+0x88>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    37f0:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    37f2:	f8 94       	cli
    37f4:	ee e7       	ldi	r30, 0x7E	; 126
    37f6:	fc e2       	ldi	r31, 0x2C	; 44
    37f8:	90 81       	ld	r25, Z
    37fa:	9f 5f       	subi	r25, 0xFF	; 255
    37fc:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    37fe:	8f bf       	out	0x3f, r24	; 63
    3800:	cf bf       	out	0x3f, r28	; 63
		cpu_irq_restore(iflags);
		return;
	}
	sleepmgr_lock_mode(SLEEPMGR_IDLE);
	cpu_irq_restore(iflags);
}
    3802:	cf 91       	pop	r28
    3804:	08 95       	ret

00003806 <tc_disable>:
 *
 * \note
 * mask TC clock (sysclk).
 */
void tc_disable(volatile void *tc)
{
    3806:	cf 93       	push	r28

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    3808:	cf b7       	in	r28, 0x3f	; 63
	cpu_irq_disable();
    380a:	f8 94       	cli

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    380c:	2f b7       	in	r18, 0x3f	; 63
	cpu_irq_disable();
    380e:	f8 94       	cli
	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    3810:	ee e7       	ldi	r30, 0x7E	; 126
    3812:	fc e2       	ldi	r31, 0x2C	; 44
    3814:	30 81       	ld	r19, Z
    3816:	31 50       	subi	r19, 0x01	; 1
    3818:	30 83       	st	Z, r19
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    381a:	2f bf       	out	0x3f, r18	; 63
	irqflags_t iflags = cpu_irq_save();

	sleepmgr_unlock_mode(SLEEPMGR_IDLE);

#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    381c:	81 15       	cp	r24, r1
    381e:	28 e0       	ldi	r18, 0x08	; 8
    3820:	92 07       	cpc	r25, r18
    3822:	39 f4       	brne	.+14     	; 0x3832 <tc_disable+0x2c>
		sysclk_disable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    3824:	61 e0       	ldi	r22, 0x01	; 1
    3826:	83 e0       	ldi	r24, 0x03	; 3
    3828:	0e d9       	rcall	.-3556   	; 0x2a46 <sysclk_disable_module>
		sysclk_disable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    382a:	64 e0       	ldi	r22, 0x04	; 4
    382c:	83 e0       	ldi	r24, 0x03	; 3
    382e:	0b d9       	rcall	.-3562   	; 0x2a46 <sysclk_disable_module>
    3830:	2d c0       	rjmp	.+90     	; 0x388c <tc_disable+0x86>
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    3832:	80 34       	cpi	r24, 0x40	; 64
    3834:	28 e0       	ldi	r18, 0x08	; 8
    3836:	92 07       	cpc	r25, r18
    3838:	39 f4       	brne	.+14     	; 0x3848 <tc_disable+0x42>
		sysclk_disable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    383a:	62 e0       	ldi	r22, 0x02	; 2
    383c:	83 e0       	ldi	r24, 0x03	; 3
    383e:	03 d9       	rcall	.-3578   	; 0x2a46 <sysclk_disable_module>
		sysclk_disable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    3840:	64 e0       	ldi	r22, 0x04	; 4
    3842:	83 e0       	ldi	r24, 0x03	; 3
    3844:	00 d9       	rcall	.-3584   	; 0x2a46 <sysclk_disable_module>
    3846:	22 c0       	rjmp	.+68     	; 0x388c <tc_disable+0x86>
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    3848:	81 15       	cp	r24, r1
    384a:	29 e0       	ldi	r18, 0x09	; 9
    384c:	92 07       	cpc	r25, r18
    384e:	39 f4       	brne	.+14     	; 0x385e <tc_disable+0x58>
		sysclk_disable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    3850:	61 e0       	ldi	r22, 0x01	; 1
    3852:	84 e0       	ldi	r24, 0x04	; 4
    3854:	f8 d8       	rcall	.-3600   	; 0x2a46 <sysclk_disable_module>
		sysclk_disable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    3856:	64 e0       	ldi	r22, 0x04	; 4
    3858:	84 e0       	ldi	r24, 0x04	; 4
    385a:	f5 d8       	rcall	.-3606   	; 0x2a46 <sysclk_disable_module>
    385c:	17 c0       	rjmp	.+46     	; 0x388c <tc_disable+0x86>
		sysclk_disable_module(SYSCLK_PORT_D, SYSCLK_TC1);
		sysclk_disable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    385e:	81 15       	cp	r24, r1
    3860:	2a e0       	ldi	r18, 0x0A	; 10
    3862:	92 07       	cpc	r25, r18
    3864:	39 f4       	brne	.+14     	; 0x3874 <tc_disable+0x6e>
		sysclk_disable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    3866:	61 e0       	ldi	r22, 0x01	; 1
    3868:	85 e0       	ldi	r24, 0x05	; 5
    386a:	ed d8       	rcall	.-3622   	; 0x2a46 <sysclk_disable_module>
		sysclk_disable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    386c:	64 e0       	ldi	r22, 0x04	; 4
    386e:	85 e0       	ldi	r24, 0x05	; 5
    3870:	ea d8       	rcall	.-3628   	; 0x2a46 <sysclk_disable_module>
    3872:	0c c0       	rjmp	.+24     	; 0x388c <tc_disable+0x86>
		sysclk_disable_module(SYSCLK_PORT_E, SYSCLK_TC1);
		sysclk_disable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    3874:	81 15       	cp	r24, r1
    3876:	9b 40       	sbci	r25, 0x0B	; 11
    3878:	39 f4       	brne	.+14     	; 0x3888 <tc_disable+0x82>
		sysclk_disable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    387a:	61 e0       	ldi	r22, 0x01	; 1
    387c:	86 e0       	ldi	r24, 0x06	; 6
    387e:	e3 d8       	rcall	.-3642   	; 0x2a46 <sysclk_disable_module>
		sysclk_disable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    3880:	64 e0       	ldi	r22, 0x04	; 4
    3882:	86 e0       	ldi	r24, 0x06	; 6
    3884:	e0 d8       	rcall	.-3648   	; 0x2a46 <sysclk_disable_module>
    3886:	02 c0       	rjmp	.+4      	; 0x388c <tc_disable+0x86>
    3888:	cf bf       	out	0x3f, r28	; 63
    388a:	01 c0       	rjmp	.+2      	; 0x388e <tc_disable+0x88>
    388c:	cf bf       	out	0x3f, r28	; 63
	{
		cpu_irq_restore(iflags);
		return;
	}
	cpu_irq_restore(iflags);
}
    388e:	cf 91       	pop	r28
    3890:	08 95       	ret

00003892 <tc_set_overflow_interrupt_callback>:

void tc_set_overflow_interrupt_callback(volatile void *tc,
		tc_callback_t callback)
{
#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    3892:	81 15       	cp	r24, r1
    3894:	28 e0       	ldi	r18, 0x08	; 8
    3896:	92 07       	cpc	r25, r18
    3898:	29 f4       	brne	.+10     	; 0x38a4 <tc_set_overflow_interrupt_callback+0x12>
		tc_tcc0_ovf_callback = callback;
    389a:	60 93 3c 2c 	sts	0x2C3C, r22
    389e:	70 93 3d 2c 	sts	0x2C3D, r23
    38a2:	08 95       	ret
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    38a4:	80 34       	cpi	r24, 0x40	; 64
    38a6:	28 e0       	ldi	r18, 0x08	; 8
    38a8:	92 07       	cpc	r25, r18
    38aa:	29 f4       	brne	.+10     	; 0x38b6 <tc_set_overflow_interrupt_callback+0x24>
		tc_tcc1_ovf_callback = callback;
    38ac:	60 93 48 2c 	sts	0x2C48, r22
    38b0:	70 93 49 2c 	sts	0x2C49, r23
    38b4:	08 95       	ret
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    38b6:	81 15       	cp	r24, r1
    38b8:	29 e0       	ldi	r18, 0x09	; 9
    38ba:	92 07       	cpc	r25, r18
    38bc:	29 f4       	brne	.+10     	; 0x38c8 <tc_set_overflow_interrupt_callback+0x36>
		tc_tcd0_ovf_callback = callback;
    38be:	60 93 50 2c 	sts	0x2C50, r22
    38c2:	70 93 51 2c 	sts	0x2C51, r23
    38c6:	08 95       	ret
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
		tc_tcd1_ovf_callback = callback;
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    38c8:	81 15       	cp	r24, r1
    38ca:	2a e0       	ldi	r18, 0x0A	; 10
    38cc:	92 07       	cpc	r25, r18
    38ce:	29 f4       	brne	.+10     	; 0x38da <tc_set_overflow_interrupt_callback+0x48>
		tc_tce0_ovf_callback = callback;
    38d0:	60 93 5c 2c 	sts	0x2C5C, r22
    38d4:	70 93 5d 2c 	sts	0x2C5D, r23
    38d8:	08 95       	ret
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
		tc_tce1_ovf_callback = callback;
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    38da:	81 15       	cp	r24, r1
    38dc:	9b 40       	sbci	r25, 0x0B	; 11
    38de:	21 f4       	brne	.+8      	; 0x38e8 <tc_set_overflow_interrupt_callback+0x56>
		tc_tcf0_ovf_callback = callback;
    38e0:	60 93 68 2c 	sts	0x2C68, r22
    38e4:	70 93 69 2c 	sts	0x2C69, r23
    38e8:	08 95       	ret

000038ea <usart_putchar>:
	}
	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    38ea:	fc 01       	movw	r30, r24
    38ec:	81 81       	ldd	r24, Z+1	; 0x01
    38ee:	85 ff       	sbrs	r24, 5
    38f0:	fd cf       	rjmp	.-6      	; 0x38ec <usart_putchar+0x2>
    38f2:	60 83       	st	Z, r22
    38f4:	80 e0       	ldi	r24, 0x00	; 0
    38f6:	90 e0       	ldi	r25, 0x00	; 0
    38f8:	08 95       	ret

000038fa <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    38fa:	4f 92       	push	r4
    38fc:	5f 92       	push	r5
    38fe:	6f 92       	push	r6
    3900:	7f 92       	push	r7
    3902:	8f 92       	push	r8
    3904:	9f 92       	push	r9
    3906:	af 92       	push	r10
    3908:	bf 92       	push	r11
    390a:	cf 92       	push	r12
    390c:	df 92       	push	r13
    390e:	ef 92       	push	r14
    3910:	ff 92       	push	r15
    3912:	0f 93       	push	r16
    3914:	1f 93       	push	r17
    3916:	cf 93       	push	r28
    3918:	df 93       	push	r29
    391a:	ec 01       	movw	r28, r24
    391c:	4a 01       	movw	r8, r20
    391e:	5b 01       	movw	r10, r22
    3920:	28 01       	movw	r4, r16
    3922:	39 01       	movw	r6, r18

	/*
	 * Check if the hardware supports the given baud rate
	 */
	// 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN)
	max_rate = cpu_hz / 8;
    3924:	d9 01       	movw	r26, r18
    3926:	c8 01       	movw	r24, r16
    3928:	68 94       	set
    392a:	12 f8       	bld	r1, 2
    392c:	b6 95       	lsr	r27
    392e:	a7 95       	ror	r26
    3930:	97 95       	ror	r25
    3932:	87 95       	ror	r24
    3934:	16 94       	lsr	r1
    3936:	d1 f7       	brne	.-12     	; 0x392c <usart_set_baudrate+0x32>
	// 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1)
	min_rate = cpu_hz / 4194304;
    3938:	b9 01       	movw	r22, r18
    393a:	a8 01       	movw	r20, r16
    393c:	03 2e       	mov	r0, r19
    393e:	36 e1       	ldi	r19, 0x16	; 22
    3940:	76 95       	lsr	r23
    3942:	67 95       	ror	r22
    3944:	57 95       	ror	r21
    3946:	47 95       	ror	r20
    3948:	3a 95       	dec	r19
    394a:	d1 f7       	brne	.-12     	; 0x3940 <usart_set_baudrate+0x46>
    394c:	30 2d       	mov	r19, r0

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    394e:	2c 81       	ldd	r18, Y+4	; 0x04
    3950:	22 fd       	sbrc	r18, 2
    3952:	08 c0       	rjmp	.+16     	; 0x3964 <usart_set_baudrate+0x6a>
		max_rate /= 2;
    3954:	b6 95       	lsr	r27
    3956:	a7 95       	ror	r26
    3958:	97 95       	ror	r25
    395a:	87 95       	ror	r24
		min_rate /= 2;
    395c:	76 95       	lsr	r23
    395e:	67 95       	ror	r22
    3960:	57 95       	ror	r21
    3962:	47 95       	ror	r20
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    3964:	88 15       	cp	r24, r8
    3966:	99 05       	cpc	r25, r9
    3968:	aa 05       	cpc	r26, r10
    396a:	bb 05       	cpc	r27, r11
    396c:	08 f4       	brcc	.+2      	; 0x3970 <usart_set_baudrate+0x76>
    396e:	aa c0       	rjmp	.+340    	; 0x3ac4 <usart_set_baudrate+0x1ca>
    3970:	84 16       	cp	r8, r20
    3972:	95 06       	cpc	r9, r21
    3974:	a6 06       	cpc	r10, r22
    3976:	b7 06       	cpc	r11, r23
    3978:	08 f4       	brcc	.+2      	; 0x397c <usart_set_baudrate+0x82>
    397a:	a6 c0       	rjmp	.+332    	; 0x3ac8 <usart_set_baudrate+0x1ce>
	}

	/*
	 * Check if double speed is enabled.
	 */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    397c:	8c 81       	ldd	r24, Y+4	; 0x04
    397e:	82 fd       	sbrc	r24, 2
    3980:	04 c0       	rjmp	.+8      	; 0x398a <usart_set_baudrate+0x90>
		baud *= 2;
    3982:	88 0c       	add	r8, r8
    3984:	99 1c       	adc	r9, r9
    3986:	aa 1c       	adc	r10, r10
    3988:	bb 1c       	adc	r11, r11

	/*
	 * Find the lowest possible exponent.
	 */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    398a:	c3 01       	movw	r24, r6
    398c:	b2 01       	movw	r22, r4
    398e:	a5 01       	movw	r20, r10
    3990:	94 01       	movw	r18, r8
    3992:	e6 d7       	rcall	.+4044   	; 0x4960 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    3994:	2f 3f       	cpi	r18, 0xFF	; 255
    3996:	31 05       	cpc	r19, r1
    3998:	41 05       	cpc	r20, r1
    399a:	51 05       	cpc	r21, r1
    399c:	08 f4       	brcc	.+2      	; 0x39a0 <usart_set_baudrate+0xa6>
    399e:	96 c0       	rjmp	.+300    	; 0x3acc <usart_set_baudrate+0x1d2>
	}

	/*
	 * Find the lowest possible exponent.
	 */
	limit = 0xfffU >> 4;
    39a0:	c1 2c       	mov	r12, r1
    39a2:	d1 2c       	mov	r13, r1
    39a4:	76 01       	movw	r14, r12
    39a6:	ca 94       	dec	r12
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    39a8:	19 ef       	ldi	r17, 0xF9	; 249
    39aa:	05 c0       	rjmp	.+10     	; 0x39b6 <usart_set_baudrate+0xbc>
		if (ratio < limit) {
    39ac:	2c 15       	cp	r18, r12
    39ae:	3d 05       	cpc	r19, r13
    39b0:	4e 05       	cpc	r20, r14
    39b2:	5f 05       	cpc	r21, r15
    39b4:	68 f0       	brcs	.+26     	; 0x39d0 <usart_set_baudrate+0xd6>
			break;
		}

		limit <<= 1;
    39b6:	cc 0c       	add	r12, r12
    39b8:	dd 1c       	adc	r13, r13
    39ba:	ee 1c       	adc	r14, r14
    39bc:	ff 1c       	adc	r15, r15

		if (exp < -3) {
    39be:	1d 3f       	cpi	r17, 0xFD	; 253
    39c0:	14 f4       	brge	.+4      	; 0x39c6 <usart_set_baudrate+0xcc>
			limit |= 1;
    39c2:	68 94       	set
    39c4:	c0 f8       	bld	r12, 0
	 * Find the lowest possible exponent.
	 */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    39c6:	1f 5f       	subi	r17, 0xFF	; 255
    39c8:	17 30       	cpi	r17, 0x07	; 7
    39ca:	81 f7       	brne	.-32     	; 0x39ac <usart_set_baudrate+0xb2>
    39cc:	21 2f       	mov	r18, r17
    39ce:	52 c0       	rjmp	.+164    	; 0x3a74 <usart_set_baudrate+0x17a>
    39d0:	21 2f       	mov	r18, r17
	 * operation as it ensures that we never exceeed 2**32 at any point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    39d2:	11 23       	and	r17, r17
    39d4:	0c f0       	brlt	.+2      	; 0x39d8 <usart_set_baudrate+0xde>
    39d6:	4e c0       	rjmp	.+156    	; 0x3a74 <usart_set_baudrate+0x17a>
		/*
		 * We are supposed to subtract 1, then apply BSCALE. We want to apply
		 * BSCALE first, so we need to turn everything inside the parenthesis
		 * into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    39d8:	d5 01       	movw	r26, r10
    39da:	c4 01       	movw	r24, r8
    39dc:	88 0f       	add	r24, r24
    39de:	99 1f       	adc	r25, r25
    39e0:	aa 1f       	adc	r26, r26
    39e2:	bb 1f       	adc	r27, r27
    39e4:	88 0f       	add	r24, r24
    39e6:	99 1f       	adc	r25, r25
    39e8:	aa 1f       	adc	r26, r26
    39ea:	bb 1f       	adc	r27, r27
    39ec:	88 0f       	add	r24, r24
    39ee:	99 1f       	adc	r25, r25
    39f0:	aa 1f       	adc	r26, r26
    39f2:	bb 1f       	adc	r27, r27
    39f4:	48 1a       	sub	r4, r24
    39f6:	59 0a       	sbc	r5, r25
    39f8:	6a 0a       	sbc	r6, r26
    39fa:	7b 0a       	sbc	r7, r27
		 * If we end up with a left-shift after taking the final divide-by-8
		 * into account, do the shift before the divide. Otherwise, left-shift
		 * the denominator instead (effectively resulting in an overall right
		 * shift.)
		 */
		if (exp <= -3) {
    39fc:	1e 3f       	cpi	r17, 0xFE	; 254
    39fe:	ec f4       	brge	.+58     	; 0x3a3a <usart_set_baudrate+0x140>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    3a00:	6d ef       	ldi	r22, 0xFD	; 253
    3a02:	7f ef       	ldi	r23, 0xFF	; 255
    3a04:	61 1b       	sub	r22, r17
    3a06:	71 09       	sbc	r23, r1
    3a08:	17 fd       	sbrc	r17, 7
    3a0a:	73 95       	inc	r23
    3a0c:	04 c0       	rjmp	.+8      	; 0x3a16 <usart_set_baudrate+0x11c>
    3a0e:	44 0c       	add	r4, r4
    3a10:	55 1c       	adc	r5, r5
    3a12:	66 1c       	adc	r6, r6
    3a14:	77 1c       	adc	r7, r7
    3a16:	6a 95       	dec	r22
    3a18:	d2 f7       	brpl	.-12     	; 0x3a0e <usart_set_baudrate+0x114>
    3a1a:	d5 01       	movw	r26, r10
    3a1c:	c4 01       	movw	r24, r8
    3a1e:	b6 95       	lsr	r27
    3a20:	a7 95       	ror	r26
    3a22:	97 95       	ror	r25
    3a24:	87 95       	ror	r24
    3a26:	bc 01       	movw	r22, r24
    3a28:	cd 01       	movw	r24, r26
    3a2a:	64 0d       	add	r22, r4
    3a2c:	75 1d       	adc	r23, r5
    3a2e:	86 1d       	adc	r24, r6
    3a30:	97 1d       	adc	r25, r7
    3a32:	a5 01       	movw	r20, r10
    3a34:	94 01       	movw	r18, r8
    3a36:	94 d7       	rcall	.+3880   	; 0x4960 <__udivmodsi4>
    3a38:	3c c0       	rjmp	.+120    	; 0x3ab2 <usart_set_baudrate+0x1b8>
		} else {
			baud <<= exp + 3;
    3a3a:	21 2f       	mov	r18, r17
    3a3c:	33 27       	eor	r19, r19
    3a3e:	27 fd       	sbrc	r18, 7
    3a40:	30 95       	com	r19
    3a42:	2d 5f       	subi	r18, 0xFD	; 253
    3a44:	3f 4f       	sbci	r19, 0xFF	; 255
    3a46:	d5 01       	movw	r26, r10
    3a48:	c4 01       	movw	r24, r8
    3a4a:	04 c0       	rjmp	.+8      	; 0x3a54 <usart_set_baudrate+0x15a>
    3a4c:	88 0f       	add	r24, r24
    3a4e:	99 1f       	adc	r25, r25
    3a50:	aa 1f       	adc	r26, r26
    3a52:	bb 1f       	adc	r27, r27
    3a54:	2a 95       	dec	r18
    3a56:	d2 f7       	brpl	.-12     	; 0x3a4c <usart_set_baudrate+0x152>
    3a58:	9c 01       	movw	r18, r24
    3a5a:	ad 01       	movw	r20, r26
			div = (cpu_hz + baud / 2) / baud;
    3a5c:	b6 95       	lsr	r27
    3a5e:	a7 95       	ror	r26
    3a60:	97 95       	ror	r25
    3a62:	87 95       	ror	r24
    3a64:	bc 01       	movw	r22, r24
    3a66:	cd 01       	movw	r24, r26
    3a68:	64 0d       	add	r22, r4
    3a6a:	75 1d       	adc	r23, r5
    3a6c:	86 1d       	adc	r24, r6
    3a6e:	97 1d       	adc	r25, r7
    3a70:	77 d7       	rcall	.+3822   	; 0x4960 <__udivmodsi4>
    3a72:	1f c0       	rjmp	.+62     	; 0x3ab2 <usart_set_baudrate+0x1b8>
	} else {
		/*
		 * We will always do a right shift in this case, but we need to shift
		 * three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    3a74:	33 27       	eor	r19, r19
    3a76:	27 fd       	sbrc	r18, 7
    3a78:	30 95       	com	r19
    3a7a:	2d 5f       	subi	r18, 0xFD	; 253
    3a7c:	3f 4f       	sbci	r19, 0xFF	; 255
    3a7e:	d5 01       	movw	r26, r10
    3a80:	c4 01       	movw	r24, r8
    3a82:	04 c0       	rjmp	.+8      	; 0x3a8c <usart_set_baudrate+0x192>
    3a84:	88 0f       	add	r24, r24
    3a86:	99 1f       	adc	r25, r25
    3a88:	aa 1f       	adc	r26, r26
    3a8a:	bb 1f       	adc	r27, r27
    3a8c:	2a 95       	dec	r18
    3a8e:	d2 f7       	brpl	.-12     	; 0x3a84 <usart_set_baudrate+0x18a>
    3a90:	9c 01       	movw	r18, r24
    3a92:	ad 01       	movw	r20, r26
		div = (cpu_hz + baud / 2) / baud - 1;
    3a94:	b6 95       	lsr	r27
    3a96:	a7 95       	ror	r26
    3a98:	97 95       	ror	r25
    3a9a:	87 95       	ror	r24
    3a9c:	bc 01       	movw	r22, r24
    3a9e:	cd 01       	movw	r24, r26
    3aa0:	64 0d       	add	r22, r4
    3aa2:	75 1d       	adc	r23, r5
    3aa4:	86 1d       	adc	r24, r6
    3aa6:	97 1d       	adc	r25, r7
    3aa8:	5b d7       	rcall	.+3766   	; 0x4960 <__udivmodsi4>
    3aaa:	21 50       	subi	r18, 0x01	; 1
    3aac:	31 09       	sbc	r19, r1
    3aae:	41 09       	sbc	r20, r1
    3ab0:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    3ab2:	83 2f       	mov	r24, r19
    3ab4:	8f 70       	andi	r24, 0x0F	; 15
    3ab6:	12 95       	swap	r17
    3ab8:	10 7f       	andi	r17, 0xF0	; 240
    3aba:	18 2b       	or	r17, r24
    3abc:	1f 83       	std	Y+7, r17	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    3abe:	2e 83       	std	Y+6, r18	; 0x06

	return true;
    3ac0:	81 e0       	ldi	r24, 0x01	; 1
    3ac2:	18 c0       	rjmp	.+48     	; 0x3af4 <usart_set_baudrate+0x1fa>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    3ac4:	80 e0       	ldi	r24, 0x00	; 0
    3ac6:	16 c0       	rjmp	.+44     	; 0x3af4 <usart_set_baudrate+0x1fa>
    3ac8:	80 e0       	ldi	r24, 0x00	; 0
    3aca:	14 c0       	rjmp	.+40     	; 0x3af4 <usart_set_baudrate+0x1fa>
		/*
		 * We are supposed to subtract 1, then apply BSCALE. We want to apply
		 * BSCALE first, so we need to turn everything inside the parenthesis
		 * into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    3acc:	d5 01       	movw	r26, r10
    3ace:	c4 01       	movw	r24, r8
    3ad0:	88 0f       	add	r24, r24
    3ad2:	99 1f       	adc	r25, r25
    3ad4:	aa 1f       	adc	r26, r26
    3ad6:	bb 1f       	adc	r27, r27
    3ad8:	88 0f       	add	r24, r24
    3ada:	99 1f       	adc	r25, r25
    3adc:	aa 1f       	adc	r26, r26
    3ade:	bb 1f       	adc	r27, r27
    3ae0:	88 0f       	add	r24, r24
    3ae2:	99 1f       	adc	r25, r25
    3ae4:	aa 1f       	adc	r26, r26
    3ae6:	bb 1f       	adc	r27, r27
    3ae8:	48 1a       	sub	r4, r24
    3aea:	59 0a       	sbc	r5, r25
    3aec:	6a 0a       	sbc	r6, r26
    3aee:	7b 0a       	sbc	r7, r27
	 * Find the lowest possible exponent.
	 */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    3af0:	19 ef       	ldi	r17, 0xF9	; 249
    3af2:	86 cf       	rjmp	.-244    	; 0x3a00 <usart_set_baudrate+0x106>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    3af4:	df 91       	pop	r29
    3af6:	cf 91       	pop	r28
    3af8:	1f 91       	pop	r17
    3afa:	0f 91       	pop	r16
    3afc:	ff 90       	pop	r15
    3afe:	ef 90       	pop	r14
    3b00:	df 90       	pop	r13
    3b02:	cf 90       	pop	r12
    3b04:	bf 90       	pop	r11
    3b06:	af 90       	pop	r10
    3b08:	9f 90       	pop	r9
    3b0a:	8f 90       	pop	r8
    3b0c:	7f 90       	pop	r7
    3b0e:	6f 90       	pop	r6
    3b10:	5f 90       	pop	r5
    3b12:	4f 90       	pop	r4
    3b14:	08 95       	ret

00003b16 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    3b16:	0f 93       	push	r16
    3b18:	1f 93       	push	r17
    3b1a:	cf 93       	push	r28
    3b1c:	df 93       	push	r29
    3b1e:	ec 01       	movw	r28, r24
    3b20:	8b 01       	movw	r16, r22
 * \brief usart Pointer to an USART module.
 */
static inline void usart_enable_module_clock(USART_t *usart)
{
#ifdef USARTC0
	if ((uintptr_t)usart == (uintptr_t)&USARTC0) {
    3b22:	c0 3a       	cpi	r28, 0xA0	; 160
    3b24:	88 e0       	ldi	r24, 0x08	; 8
    3b26:	d8 07       	cpc	r29, r24
    3b28:	29 f4       	brne	.+10     	; 0x3b34 <usart_init_rs232+0x1e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    3b2a:	60 e1       	ldi	r22, 0x10	; 16
    3b2c:	83 e0       	ldi	r24, 0x03	; 3
    3b2e:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <sysclk_enable_module>
    3b32:	11 c0       	rjmp	.+34     	; 0x3b56 <usart_init_rs232+0x40>
	if ((uintptr_t)usart == (uintptr_t)&USARTC1) {
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
	}
#endif
#ifdef USARTD0
	if ((uintptr_t)usart == (uintptr_t)&USARTD0) {
    3b34:	c0 3a       	cpi	r28, 0xA0	; 160
    3b36:	e9 e0       	ldi	r30, 0x09	; 9
    3b38:	de 07       	cpc	r29, r30
    3b3a:	29 f4       	brne	.+10     	; 0x3b46 <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    3b3c:	60 e1       	ldi	r22, 0x10	; 16
    3b3e:	84 e0       	ldi	r24, 0x04	; 4
    3b40:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <sysclk_enable_module>
    3b44:	08 c0       	rjmp	.+16     	; 0x3b56 <usart_init_rs232+0x40>
	if ((uintptr_t)usart == (uintptr_t)&USARTD1) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
	}
#endif
#ifdef USARTE0
	if ((uintptr_t)usart == (uintptr_t)&USARTE0) {
    3b46:	c0 3a       	cpi	r28, 0xA0	; 160
    3b48:	fa e0       	ldi	r31, 0x0A	; 10
    3b4a:	df 07       	cpc	r29, r31
    3b4c:	21 f4       	brne	.+8      	; 0x3b56 <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    3b4e:	60 e1       	ldi	r22, 0x10	; 16
    3b50:	85 e0       	ldi	r24, 0x05	; 5
    3b52:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    3b56:	8d 81       	ldd	r24, Y+5	; 0x05
    3b58:	8f 73       	andi	r24, 0x3F	; 63
    3b5a:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    3b5c:	f8 01       	movw	r30, r16
    3b5e:	94 81       	ldd	r25, Z+4	; 0x04
    3b60:	85 81       	ldd	r24, Z+5	; 0x05
    3b62:	89 2b       	or	r24, r25
    3b64:	96 81       	ldd	r25, Z+6	; 0x06
    3b66:	99 23       	and	r25, r25
    3b68:	11 f0       	breq	.+4      	; 0x3b6e <usart_init_rs232+0x58>
    3b6a:	98 e0       	ldi	r25, 0x08	; 8
    3b6c:	01 c0       	rjmp	.+2      	; 0x3b70 <usart_init_rs232+0x5a>
    3b6e:	90 e0       	ldi	r25, 0x00	; 0
    3b70:	89 2b       	or	r24, r25
    3b72:	8d 83       	std	Y+5, r24	; 0x05
	bool result;
	usart_enable_module_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    3b74:	f8 01       	movw	r30, r16
    3b76:	40 81       	ld	r20, Z
    3b78:	51 81       	ldd	r21, Z+1	; 0x01
    3b7a:	62 81       	ldd	r22, Z+2	; 0x02
    3b7c:	73 81       	ldd	r23, Z+3	; 0x03
    3b7e:	00 e0       	ldi	r16, 0x00	; 0
    3b80:	18 e4       	ldi	r17, 0x48	; 72
    3b82:	28 ee       	ldi	r18, 0xE8	; 232
    3b84:	31 e0       	ldi	r19, 0x01	; 1
    3b86:	ce 01       	movw	r24, r28
    3b88:	b8 de       	rcall	.-656    	; 0x38fa <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    3b8a:	9c 81       	ldd	r25, Y+4	; 0x04
    3b8c:	98 60       	ori	r25, 0x08	; 8
    3b8e:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    3b90:	9c 81       	ldd	r25, Y+4	; 0x04
    3b92:	90 61       	ori	r25, 0x10	; 16
    3b94:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    3b96:	df 91       	pop	r29
    3b98:	cf 91       	pop	r28
    3b9a:	1f 91       	pop	r17
    3b9c:	0f 91       	pop	r16
    3b9e:	08 95       	ret

00003ba0 <wdt_set_timeout_period>:
	uint8_t temp = (WDT_WPER_gm & (win_period << WDT_WPER_gp)) |
			(WDT.WINCTRL & WDT_WEN_bm) | (1 << WDT_WCEN_bp);
	ccp_write_io((void *)&WDT.WINCTRL, temp);
	wdt_wait_while_busy();
	return true;
}
    3ba0:	60 91 80 00 	lds	r22, 0x0080
    3ba4:	24 e0       	ldi	r18, 0x04	; 4
    3ba6:	82 9f       	mul	r24, r18
    3ba8:	c0 01       	movw	r24, r0
    3baa:	11 24       	eor	r1, r1
    3bac:	8c 73       	andi	r24, 0x3C	; 60
    3bae:	99 27       	eor	r25, r25
    3bb0:	62 70       	andi	r22, 0x02	; 2
    3bb2:	61 60       	ori	r22, 0x01	; 1
    3bb4:	68 2b       	or	r22, r24
    3bb6:	80 e8       	ldi	r24, 0x80	; 128
    3bb8:	90 e0       	ldi	r25, 0x00	; 0
    3bba:	12 d8       	rcall	.-4060   	; 0x2be0 <ccp_write_io>
    3bbc:	e0 e8       	ldi	r30, 0x80	; 128
    3bbe:	f0 e0       	ldi	r31, 0x00	; 0
    3bc0:	82 81       	ldd	r24, Z+2	; 0x02
    3bc2:	80 fd       	sbrc	r24, 0
    3bc4:	fd cf       	rjmp	.-6      	; 0x3bc0 <wdt_set_timeout_period+0x20>
    3bc6:	08 95       	ret

00003bc8 <wdt_disable>:
 *  automatically ignored during the change enable period. Disable functions
 *  operate asynchronously with immidiate effect.
 */
void wdt_disable(void)
{
	uint8_t temp = (WDT.CTRL & ~WDT_ENABLE_bm) | (1 << WDT_CEN_bp);
    3bc8:	60 91 80 00 	lds	r22, 0x0080
    3bcc:	6c 7f       	andi	r22, 0xFC	; 252
    3bce:	61 60       	ori	r22, 0x01	; 1
	ccp_write_io((void *)&WDT.CTRL, temp);
    3bd0:	80 e8       	ldi	r24, 0x80	; 128
    3bd2:	90 e0       	ldi	r25, 0x00	; 0
    3bd4:	05 c8       	rjmp	.-4086   	; 0x2be0 <ccp_write_io>

00003bd6 <wdt_enable>:
 *  wait for the WDT to be synchronized to the WDT clock domain before
 *  proceeding
 */
void wdt_enable(void)
{
	uint8_t temp = (WDT.CTRL & WDT_PER_gm) |
    3bd6:	60 91 80 00 	lds	r22, 0x0080
    3bda:	6c 73       	andi	r22, 0x3C	; 60
    3bdc:	63 60       	ori	r22, 0x03	; 3
			(1 << WDT_ENABLE_bp) | (1 << WDT_CEN_bp);
	ccp_write_io((void *)&WDT.CTRL, temp);
    3bde:	80 e8       	ldi	r24, 0x80	; 128
    3be0:	90 e0       	ldi	r25, 0x00	; 0
    3be2:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <ccp_write_io>
/*! \brief Wait until WD settings are synchronized to the WD clock domain.
 *
 */
static inline void wdt_wait_while_busy(void)
{
	while ((WDT.STATUS & WDT_SYNCBUSY_bm) == WDT_SYNCBUSY_bm) {
    3be6:	e0 e8       	ldi	r30, 0x80	; 128
    3be8:	f0 e0       	ldi	r31, 0x00	; 0
    3bea:	82 81       	ldd	r24, Z+2	; 0x02
    3bec:	80 fd       	sbrc	r24, 0
    3bee:	fd cf       	rjmp	.-6      	; 0x3bea <wdt_enable+0x14>
	wdt_wait_while_busy();
}
    3bf0:	08 95       	ret

00003bf2 <pwm_set_frequency>:
 *
 * \param config Pointer to PWM configuration.
 * \param freq_hz Wanted PWM frequenzy in Hz.
 */
void pwm_set_frequency(struct pwm_config *config, uint16_t freq_hz)
{
    3bf2:	cf 92       	push	r12
    3bf4:	df 92       	push	r13
    3bf6:	ef 92       	push	r14
    3bf8:	ff 92       	push	r15
    3bfa:	cf 93       	push	r28
    3bfc:	df 93       	push	r29
    3bfe:	ec 01       	movw	r28, r24
	/* Avoid division by zero. */
	Assert(freq_hz != 0);

	/* Calculate the smallest dividor for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
    3c00:	6b 01       	movw	r12, r22
    3c02:	e1 2c       	mov	r14, r1
    3c04:	f1 2c       	mov	r15, r1
    3c06:	60 e0       	ldi	r22, 0x00	; 0
    3c08:	78 e4       	ldi	r23, 0x48	; 72
    3c0a:	88 ee       	ldi	r24, 0xE8	; 232
    3c0c:	91 e0       	ldi	r25, 0x01	; 1
    3c0e:	a7 01       	movw	r20, r14
    3c10:	96 01       	movw	r18, r12
    3c12:	a6 d6       	rcall	.+3404   	; 0x4960 <__udivmodsi4>
    3c14:	ca 01       	movw	r24, r20
    3c16:	b9 01       	movw	r22, r18
    3c18:	2f ef       	ldi	r18, 0xFF	; 255
    3c1a:	3f ef       	ldi	r19, 0xFF	; 255
    3c1c:	40 e0       	ldi	r20, 0x00	; 0
    3c1e:	50 e0       	ldi	r21, 0x00	; 0
    3c20:	9f d6       	rcall	.+3390   	; 0x4960 <__udivmodsi4>
	if (smallest_div < 1) {
    3c22:	21 15       	cp	r18, r1
    3c24:	31 05       	cpc	r19, r1
    3c26:	29 f4       	brne	.+10     	; 0x3c32 <pwm_set_frequency+0x40>
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
    3c28:	81 e0       	ldi	r24, 0x01	; 1
    3c2a:	8c 83       	std	Y+4, r24	; 0x04

	/* Calculate the smallest dividor for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
    3c2c:	21 e0       	ldi	r18, 0x01	; 1
    3c2e:	30 e0       	ldi	r19, 0x00	; 0
    3c30:	2d c0       	rjmp	.+90     	; 0x3c8c <pwm_set_frequency+0x9a>
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
    3c32:	22 30       	cpi	r18, 0x02	; 2
    3c34:	31 05       	cpc	r19, r1
    3c36:	28 f4       	brcc	.+10     	; 0x3c42 <pwm_set_frequency+0x50>
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
    3c38:	82 e0       	ldi	r24, 0x02	; 2
    3c3a:	8c 83       	std	Y+4, r24	; 0x04
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
    3c3c:	22 e0       	ldi	r18, 0x02	; 2
    3c3e:	30 e0       	ldi	r19, 0x00	; 0
    3c40:	25 c0       	rjmp	.+74     	; 0x3c8c <pwm_set_frequency+0x9a>
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
    3c42:	24 30       	cpi	r18, 0x04	; 4
    3c44:	31 05       	cpc	r19, r1
    3c46:	28 f4       	brcc	.+10     	; 0x3c52 <pwm_set_frequency+0x60>
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
    3c48:	83 e0       	ldi	r24, 0x03	; 3
    3c4a:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
    3c4c:	24 e0       	ldi	r18, 0x04	; 4
    3c4e:	30 e0       	ldi	r19, 0x00	; 0
    3c50:	1d c0       	rjmp	.+58     	; 0x3c8c <pwm_set_frequency+0x9a>
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
    3c52:	28 30       	cpi	r18, 0x08	; 8
    3c54:	31 05       	cpc	r19, r1
    3c56:	28 f4       	brcc	.+10     	; 0x3c62 <pwm_set_frequency+0x70>
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
    3c58:	84 e0       	ldi	r24, 0x04	; 4
    3c5a:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
    3c5c:	28 e0       	ldi	r18, 0x08	; 8
    3c5e:	30 e0       	ldi	r19, 0x00	; 0
    3c60:	15 c0       	rjmp	.+42     	; 0x3c8c <pwm_set_frequency+0x9a>
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
    3c62:	20 34       	cpi	r18, 0x40	; 64
    3c64:	31 05       	cpc	r19, r1
    3c66:	28 f4       	brcc	.+10     	; 0x3c72 <pwm_set_frequency+0x80>
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
    3c68:	85 e0       	ldi	r24, 0x05	; 5
    3c6a:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
    3c6c:	20 e4       	ldi	r18, 0x40	; 64
    3c6e:	30 e0       	ldi	r19, 0x00	; 0
    3c70:	0d c0       	rjmp	.+26     	; 0x3c8c <pwm_set_frequency+0x9a>
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
    3c72:	2f 3f       	cpi	r18, 0xFF	; 255
    3c74:	31 05       	cpc	r19, r1
    3c76:	09 f0       	breq	.+2      	; 0x3c7a <pwm_set_frequency+0x88>
    3c78:	28 f4       	brcc	.+10     	; 0x3c84 <pwm_set_frequency+0x92>
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
    3c7a:	86 e0       	ldi	r24, 0x06	; 6
    3c7c:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
    3c7e:	20 e0       	ldi	r18, 0x00	; 0
    3c80:	31 e0       	ldi	r19, 0x01	; 1
    3c82:	04 c0       	rjmp	.+8      	; 0x3c8c <pwm_set_frequency+0x9a>
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
		config->clk_sel = PWM_CLK_DIV1024;
    3c84:	87 e0       	ldi	r24, 0x07	; 7
    3c86:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
    3c88:	20 e0       	ldi	r18, 0x00	; 0
    3c8a:	34 e0       	ldi	r19, 0x04	; 4
		config->clk_sel = PWM_CLK_DIV1024;
	}

	/* Calculate the period from the just found dividor */
	config->period = cpu_hz / dividor / freq_hz;
    3c8c:	40 e0       	ldi	r20, 0x00	; 0
    3c8e:	50 e0       	ldi	r21, 0x00	; 0
    3c90:	60 e0       	ldi	r22, 0x00	; 0
    3c92:	78 e4       	ldi	r23, 0x48	; 72
    3c94:	88 ee       	ldi	r24, 0xE8	; 232
    3c96:	91 e0       	ldi	r25, 0x01	; 1
    3c98:	63 d6       	rcall	.+3270   	; 0x4960 <__udivmodsi4>
    3c9a:	ca 01       	movw	r24, r20
    3c9c:	b9 01       	movw	r22, r18
    3c9e:	a7 01       	movw	r20, r14
    3ca0:	96 01       	movw	r18, r12
    3ca2:	5e d6       	rcall	.+3260   	; 0x4960 <__udivmodsi4>
    3ca4:	2d 83       	std	Y+5, r18	; 0x05
    3ca6:	3e 83       	std	Y+6, r19	; 0x06

	/* Make sure our period is at least 100 ticks so we are able to provide
	   a full range (0-100% duty cycle */
	if (config->period < 100) {
    3ca8:	24 36       	cpi	r18, 0x64	; 100
    3caa:	31 05       	cpc	r19, r1
    3cac:	18 f4       	brcc	.+6      	; 0x3cb4 <pwm_set_frequency+0xc2>
		/* The period is too short. */
		config->clk_sel = PWM_CLK_OFF;
    3cae:	1c 82       	std	Y+4, r1	; 0x04
		config->period = 0;
    3cb0:	1d 82       	std	Y+5, r1	; 0x05
    3cb2:	1e 82       	std	Y+6, r1	; 0x06
		Assert(false);
	}
}
    3cb4:	df 91       	pop	r29
    3cb6:	cf 91       	pop	r28
    3cb8:	ff 90       	pop	r15
    3cba:	ef 90       	pop	r14
    3cbc:	df 90       	pop	r13
    3cbe:	cf 90       	pop	r12
    3cc0:	08 95       	ret

00003cc2 <pwm_init>:
 * \param channel \ref pwm_channel_t "CC channel" to use for this PWM.
 * \param freq_hz Frequency to use for this PWM.
  */
void pwm_init(struct pwm_config *config, enum pwm_tc_t tc,
		enum pwm_channel_t channel, uint16_t freq_hz)
{
    3cc2:	0f 93       	push	r16
    3cc4:	1f 93       	push	r17
    3cc6:	cf 93       	push	r28
    3cc8:	df 93       	push	r29
    3cca:	ec 01       	movw	r28, r24
    3ccc:	89 01       	movw	r16, r18
	/* Number of channels for this TC */
	uint8_t num_chan = 0;

	/* Set TC and correct I/O pin to output */
	switch (tc) {
    3cce:	62 30       	cpi	r22, 0x02	; 2
    3cd0:	d1 f1       	breq	.+116    	; 0x3d46 <pwm_init+0x84>
    3cd2:	30 f4       	brcc	.+12     	; 0x3ce0 <pwm_init+0x1e>
    3cd4:	66 23       	and	r22, r22
    3cd6:	59 f0       	breq	.+22     	; 0x3cee <pwm_init+0x2c>
    3cd8:	61 30       	cpi	r22, 0x01	; 1
    3cda:	09 f0       	breq	.+2      	; 0x3cde <pwm_init+0x1c>
    3cdc:	75 c0       	rjmp	.+234    	; 0x3dc8 <pwm_init+0x106>
    3cde:	1d c0       	rjmp	.+58     	; 0x3d1a <pwm_init+0x58>
    3ce0:	64 30       	cpi	r22, 0x04	; 4
    3ce2:	09 f4       	brne	.+2      	; 0x3ce6 <pwm_init+0x24>
    3ce4:	46 c0       	rjmp	.+140    	; 0x3d72 <pwm_init+0xb0>
    3ce6:	66 30       	cpi	r22, 0x06	; 6
    3ce8:	09 f0       	breq	.+2      	; 0x3cec <pwm_init+0x2a>
    3cea:	6e c0       	rjmp	.+220    	; 0x3dc8 <pwm_init+0x106>
    3cec:	58 c0       	rjmp	.+176    	; 0x3d9e <pwm_init+0xdc>
#if defined(TCC0)
	case PWM_TCC0:
		config->tc = &TCC0;
    3cee:	80 e0       	ldi	r24, 0x00	; 0
    3cf0:	98 e0       	ldi	r25, 0x08	; 8
    3cf2:	88 83       	st	Y, r24
    3cf4:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel-1));
    3cf6:	e0 e4       	ldi	r30, 0x40	; 64
    3cf8:	f6 e0       	ldi	r31, 0x06	; 6
    3cfa:	50 81       	ld	r21, Z
    3cfc:	24 2f       	mov	r18, r20
    3cfe:	30 e0       	ldi	r19, 0x00	; 0
    3d00:	21 50       	subi	r18, 0x01	; 1
    3d02:	31 09       	sbc	r19, r1
    3d04:	61 e0       	ldi	r22, 0x01	; 1
    3d06:	70 e0       	ldi	r23, 0x00	; 0
    3d08:	cb 01       	movw	r24, r22
    3d0a:	02 c0       	rjmp	.+4      	; 0x3d10 <pwm_init+0x4e>
    3d0c:	88 0f       	add	r24, r24
    3d0e:	99 1f       	adc	r25, r25
    3d10:	2a 95       	dec	r18
    3d12:	e2 f7       	brpl	.-8      	; 0x3d0c <pwm_init+0x4a>
    3d14:	85 2b       	or	r24, r21
    3d16:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    3d18:	57 c0       	rjmp	.+174    	; 0x3dc8 <pwm_init+0x106>
#endif
#if defined(TCC1)
	case PWM_TCC1:
		config->tc = &TCC1;
    3d1a:	80 e4       	ldi	r24, 0x40	; 64
    3d1c:	98 e0       	ldi	r25, 0x08	; 8
    3d1e:	88 83       	st	Y, r24
    3d20:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel+3));
    3d22:	e0 e4       	ldi	r30, 0x40	; 64
    3d24:	f6 e0       	ldi	r31, 0x06	; 6
    3d26:	50 81       	ld	r21, Z
    3d28:	24 2f       	mov	r18, r20
    3d2a:	30 e0       	ldi	r19, 0x00	; 0
    3d2c:	2d 5f       	subi	r18, 0xFD	; 253
    3d2e:	3f 4f       	sbci	r19, 0xFF	; 255
    3d30:	61 e0       	ldi	r22, 0x01	; 1
    3d32:	70 e0       	ldi	r23, 0x00	; 0
    3d34:	cb 01       	movw	r24, r22
    3d36:	02 c0       	rjmp	.+4      	; 0x3d3c <pwm_init+0x7a>
    3d38:	88 0f       	add	r24, r24
    3d3a:	99 1f       	adc	r25, r25
    3d3c:	2a 95       	dec	r18
    3d3e:	e2 f7       	brpl	.-8      	; 0x3d38 <pwm_init+0x76>
    3d40:	85 2b       	or	r24, r21
    3d42:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    3d44:	41 c0       	rjmp	.+130    	; 0x3dc8 <pwm_init+0x106>
#endif
#if defined(TCD0)
	case PWM_TCD0:
		config->tc = &TCD0;
    3d46:	80 e0       	ldi	r24, 0x00	; 0
    3d48:	99 e0       	ldi	r25, 0x09	; 9
    3d4a:	88 83       	st	Y, r24
    3d4c:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel-1));
    3d4e:	e0 e6       	ldi	r30, 0x60	; 96
    3d50:	f6 e0       	ldi	r31, 0x06	; 6
    3d52:	50 81       	ld	r21, Z
    3d54:	24 2f       	mov	r18, r20
    3d56:	30 e0       	ldi	r19, 0x00	; 0
    3d58:	21 50       	subi	r18, 0x01	; 1
    3d5a:	31 09       	sbc	r19, r1
    3d5c:	61 e0       	ldi	r22, 0x01	; 1
    3d5e:	70 e0       	ldi	r23, 0x00	; 0
    3d60:	cb 01       	movw	r24, r22
    3d62:	02 c0       	rjmp	.+4      	; 0x3d68 <pwm_init+0xa6>
    3d64:	88 0f       	add	r24, r24
    3d66:	99 1f       	adc	r25, r25
    3d68:	2a 95       	dec	r18
    3d6a:	e2 f7       	brpl	.-8      	; 0x3d64 <pwm_init+0xa2>
    3d6c:	85 2b       	or	r24, r21
    3d6e:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    3d70:	2b c0       	rjmp	.+86     	; 0x3dc8 <pwm_init+0x106>
		break;
#endif

#if defined(TCE0)
	case PWM_TCE0:
		config->tc = &TCE0;
    3d72:	80 e0       	ldi	r24, 0x00	; 0
    3d74:	9a e0       	ldi	r25, 0x0A	; 10
    3d76:	88 83       	st	Y, r24
    3d78:	99 83       	std	Y+1, r25	; 0x01
		PORTE.DIR |= (1 << (channel-1));
    3d7a:	e0 e8       	ldi	r30, 0x80	; 128
    3d7c:	f6 e0       	ldi	r31, 0x06	; 6
    3d7e:	50 81       	ld	r21, Z
    3d80:	24 2f       	mov	r18, r20
    3d82:	30 e0       	ldi	r19, 0x00	; 0
    3d84:	21 50       	subi	r18, 0x01	; 1
    3d86:	31 09       	sbc	r19, r1
    3d88:	61 e0       	ldi	r22, 0x01	; 1
    3d8a:	70 e0       	ldi	r23, 0x00	; 0
    3d8c:	cb 01       	movw	r24, r22
    3d8e:	02 c0       	rjmp	.+4      	; 0x3d94 <pwm_init+0xd2>
    3d90:	88 0f       	add	r24, r24
    3d92:	99 1f       	adc	r25, r25
    3d94:	2a 95       	dec	r18
    3d96:	e2 f7       	brpl	.-8      	; 0x3d90 <pwm_init+0xce>
    3d98:	85 2b       	or	r24, r21
    3d9a:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    3d9c:	15 c0       	rjmp	.+42     	; 0x3dc8 <pwm_init+0x106>
		break;
#endif

#if defined(TCF0)
	case PWM_TCF0:
		config->tc = &TCF0;
    3d9e:	80 e0       	ldi	r24, 0x00	; 0
    3da0:	9b e0       	ldi	r25, 0x0B	; 11
    3da2:	88 83       	st	Y, r24
    3da4:	99 83       	std	Y+1, r25	; 0x01
		PORTF.DIR |= (1 << (channel-1));
    3da6:	e0 ea       	ldi	r30, 0xA0	; 160
    3da8:	f6 e0       	ldi	r31, 0x06	; 6
    3daa:	50 81       	ld	r21, Z
    3dac:	24 2f       	mov	r18, r20
    3dae:	30 e0       	ldi	r19, 0x00	; 0
    3db0:	21 50       	subi	r18, 0x01	; 1
    3db2:	31 09       	sbc	r19, r1
    3db4:	61 e0       	ldi	r22, 0x01	; 1
    3db6:	70 e0       	ldi	r23, 0x00	; 0
    3db8:	cb 01       	movw	r24, r22
    3dba:	02 c0       	rjmp	.+4      	; 0x3dc0 <pwm_init+0xfe>
    3dbc:	88 0f       	add	r24, r24
    3dbe:	99 1f       	adc	r25, r25
    3dc0:	2a 95       	dec	r18
    3dc2:	e2 f7       	brpl	.-8      	; 0x3dbc <pwm_init+0xfa>
    3dc4:	85 2b       	or	r24, r21
    3dc6:	80 83       	st	Z, r24
	}

	/* Make sure we are not given a channel number larger
	   than this TC can handle */
	Assert(channel <= num_chan);
	config->channel = channel;
    3dc8:	4a 83       	std	Y+2, r20	; 0x02

	/* Set the correct cc_mask */
	switch (channel) {
    3dca:	42 30       	cpi	r20, 0x02	; 2
    3dcc:	61 f0       	breq	.+24     	; 0x3de6 <pwm_init+0x124>
    3dce:	18 f4       	brcc	.+6      	; 0x3dd6 <pwm_init+0x114>
    3dd0:	41 30       	cpi	r20, 0x01	; 1
    3dd2:	89 f4       	brne	.+34     	; 0x3df6 <pwm_init+0x134>
    3dd4:	05 c0       	rjmp	.+10     	; 0x3de0 <pwm_init+0x11e>
    3dd6:	43 30       	cpi	r20, 0x03	; 3
    3dd8:	49 f0       	breq	.+18     	; 0x3dec <pwm_init+0x12a>
    3dda:	44 30       	cpi	r20, 0x04	; 4
    3ddc:	61 f4       	brne	.+24     	; 0x3df6 <pwm_init+0x134>
    3dde:	09 c0       	rjmp	.+18     	; 0x3df2 <pwm_init+0x130>
	case PWM_CH_A:
		config->cc_mask = TC_CCAEN;
    3de0:	80 e1       	ldi	r24, 0x10	; 16
    3de2:	8b 83       	std	Y+3, r24	; 0x03
		break;
    3de4:	08 c0       	rjmp	.+16     	; 0x3df6 <pwm_init+0x134>
	case PWM_CH_B:
		config->cc_mask = TC_CCBEN;
    3de6:	80 e2       	ldi	r24, 0x20	; 32
    3de8:	8b 83       	std	Y+3, r24	; 0x03
		break;
    3dea:	05 c0       	rjmp	.+10     	; 0x3df6 <pwm_init+0x134>
	case PWM_CH_C:
		config->cc_mask = TC_CCCEN;
    3dec:	80 e4       	ldi	r24, 0x40	; 64
    3dee:	8b 83       	std	Y+3, r24	; 0x03
		break;
    3df0:	02 c0       	rjmp	.+4      	; 0x3df6 <pwm_init+0x134>
	case PWM_CH_D:
		config->cc_mask = TC_CCDEN;
    3df2:	80 e8       	ldi	r24, 0x80	; 128
    3df4:	8b 83       	std	Y+3, r24	; 0x03
		Assert(false);
		break;
	}

	/* Enable peripherial clock for this TC */
	tc_enable(config->tc);
    3df6:	88 81       	ld	r24, Y
    3df8:	99 81       	ldd	r25, Y+1	; 0x01
    3dfa:	bf dc       	rcall	.-1666   	; 0x377a <tc_enable>

	/* Set this TC's waveform generator in single slope mode */
	tc_set_wgm(config->tc, TC_WG_SS);
    3dfc:	e8 81       	ld	r30, Y
    3dfe:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    3e00:	81 81       	ldd	r24, Z+1	; 0x01
    3e02:	88 7f       	andi	r24, 0xF8	; 248
    3e04:	83 60       	ori	r24, 0x03	; 3
    3e06:	81 83       	std	Z+1, r24	; 0x01

	/* Default values (disable TC and set minimum period)*/
	config->period = 0;
    3e08:	1d 82       	std	Y+5, r1	; 0x05
    3e0a:	1e 82       	std	Y+6, r1	; 0x06
	config->clk_sel = PWM_CLK_OFF;
    3e0c:	1c 82       	std	Y+4, r1	; 0x04
	tc_write_clock_source(config->tc, PWM_CLK_OFF);
    3e0e:	e8 81       	ld	r30, Y
    3e10:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    3e12:	80 81       	ld	r24, Z
 * \note Configuring the clock starts alos the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    3e14:	80 7f       	andi	r24, 0xF0	; 240
    3e16:	80 83       	st	Z, r24

	/* Set the PWM frequency */
	pwm_set_frequency(config, freq_hz);
    3e18:	b8 01       	movw	r22, r16
    3e1a:	ce 01       	movw	r24, r28
    3e1c:	ea de       	rcall	.-556    	; 0x3bf2 <pwm_set_frequency>
}
    3e1e:	df 91       	pop	r29
    3e20:	cf 91       	pop	r28
    3e22:	1f 91       	pop	r17
    3e24:	0f 91       	pop	r16
    3e26:	08 95       	ret

00003e28 <pwm_start>:
 *
 * \param *config           Pointer to the PWM configuration struct
 * \param duty_cycle_scale  Duty cycle as a value between 0 and 100.
 */
void pwm_start(struct pwm_config *config, uint8_t duty_cycle_scale)
{
    3e28:	cf 93       	push	r28
    3e2a:	df 93       	push	r29
    3e2c:	ec 01       	movw	r28, r24
			(uint16_t)(((uint32_t)config->period *
    3e2e:	ad 81       	ldd	r26, Y+5	; 0x05
    3e30:	be 81       	ldd	r27, Y+6	; 0x06
    3e32:	26 2f       	mov	r18, r22
    3e34:	30 e0       	ldi	r19, 0x00	; 0
    3e36:	b6 d5       	rcall	.+2924   	; 0x49a4 <__umulhisi3>
			(uint32_t)duty_cycle_scale) / 100));
    3e38:	24 e6       	ldi	r18, 0x64	; 100
    3e3a:	30 e0       	ldi	r19, 0x00	; 0
    3e3c:	40 e0       	ldi	r20, 0x00	; 0
    3e3e:	50 e0       	ldi	r21, 0x00	; 0
    3e40:	8f d5       	rcall	.+2846   	; 0x4960 <__udivmodsi4>
 */
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, config->channel,
    3e42:	8a 81       	ldd	r24, Y+2	; 0x02
    3e44:	e8 81       	ld	r30, Y
    3e46:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param buffer_value Counter Buffer value
 */
static inline void tc_write_cc_buffer(volatile void *tc,
		enum tc_cc_channel_t channel_index, uint16_t buffer_value)
{
	if (tc_is_tc0(void *tc)) {
    3e48:	e6 fd       	sbrc	r30, 6
    3e4a:	17 c0       	rjmp	.+46     	; 0x3e7a <pwm_start+0x52>
		switch (channel_index) {
    3e4c:	82 30       	cpi	r24, 0x02	; 2
    3e4e:	61 f0       	breq	.+24     	; 0x3e68 <pwm_start+0x40>
    3e50:	18 f4       	brcc	.+6      	; 0x3e58 <pwm_start+0x30>
    3e52:	81 30       	cpi	r24, 0x01	; 1
    3e54:	e1 f4       	brne	.+56     	; 0x3e8e <pwm_start+0x66>
    3e56:	05 c0       	rjmp	.+10     	; 0x3e62 <pwm_start+0x3a>
    3e58:	83 30       	cpi	r24, 0x03	; 3
    3e5a:	49 f0       	breq	.+18     	; 0x3e6e <pwm_start+0x46>
    3e5c:	84 30       	cpi	r24, 0x04	; 4
    3e5e:	b9 f4       	brne	.+46     	; 0x3e8e <pwm_start+0x66>
    3e60:	09 c0       	rjmp	.+18     	; 0x3e74 <pwm_start+0x4c>
		case TC_CCA:
			((TC0_t *)tc)->CCABUF = buffer_value;
    3e62:	20 af       	std	Z+56, r18	; 0x38
    3e64:	31 af       	std	Z+57, r19	; 0x39
    3e66:	13 c0       	rjmp	.+38     	; 0x3e8e <pwm_start+0x66>
			break;
		case TC_CCB:
			((TC0_t *)tc)->CCBBUF = buffer_value;
    3e68:	22 af       	std	Z+58, r18	; 0x3a
    3e6a:	33 af       	std	Z+59, r19	; 0x3b
    3e6c:	10 c0       	rjmp	.+32     	; 0x3e8e <pwm_start+0x66>
			break;
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
    3e6e:	24 af       	std	Z+60, r18	; 0x3c
    3e70:	35 af       	std	Z+61, r19	; 0x3d
    3e72:	0d c0       	rjmp	.+26     	; 0x3e8e <pwm_start+0x66>
			break;
		case TC_CCD:
			((TC0_t *)tc)->CCDBUF = buffer_value;
    3e74:	26 af       	std	Z+62, r18	; 0x3e
    3e76:	37 af       	std	Z+63, r19	; 0x3f
    3e78:	0a c0       	rjmp	.+20     	; 0x3e8e <pwm_start+0x66>
			break;
		}
	} else if (tc_is_tc1(void *tc)) {
			switch (channel_index) {
    3e7a:	81 30       	cpi	r24, 0x01	; 1
    3e7c:	19 f0       	breq	.+6      	; 0x3e84 <pwm_start+0x5c>
    3e7e:	82 30       	cpi	r24, 0x02	; 2
    3e80:	31 f4       	brne	.+12     	; 0x3e8e <pwm_start+0x66>
    3e82:	03 c0       	rjmp	.+6      	; 0x3e8a <pwm_start+0x62>
			case TC_CCA:
				((TC1_t *)tc)->CCABUF = buffer_value;
    3e84:	20 af       	std	Z+56, r18	; 0x38
    3e86:	31 af       	std	Z+57, r19	; 0x39
    3e88:	02 c0       	rjmp	.+4      	; 0x3e8e <pwm_start+0x66>
				break;
			case TC_CCB:
				((TC1_t *)tc)->CCBBUF = buffer_value;
    3e8a:	22 af       	std	Z+58, r18	; 0x3a
    3e8c:	33 af       	std	Z+59, r19	; 0x3b
	/* Set given duty cycle */
	pwm_set_duty_cycle_percent(config, duty_cycle_scale);
	/* Set correct TC period */
	tc_write_period(config->tc, config->period);
    3e8e:	8d 81       	ldd	r24, Y+5	; 0x05
    3e90:	9e 81       	ldd	r25, Y+6	; 0x06
    3e92:	e8 81       	ld	r30, Y
    3e94:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    3e96:	86 a3       	std	Z+38, r24	; 0x26
    3e98:	97 a3       	std	Z+39, r25	; 0x27
	/* Enable CC channel for this TC */
	tc_enable_cc_channels(config->tc, config->cc_mask);
    3e9a:	8b 81       	ldd	r24, Y+3	; 0x03
    3e9c:	e8 81       	ld	r30, Y
    3e9e:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param enablemask CC channel
 */
static inline void tc_enable_cc_channels(volatile void *tc,
		enum tc_cc_channel_mask_enable_t enablemask)
{
	if (tc_is_tc0(void *tc)) {
    3ea0:	e6 fd       	sbrc	r30, 6
    3ea2:	04 c0       	rjmp	.+8      	; 0x3eac <pwm_start+0x84>
		((TC0_t *)tc)->CTRLB |= enablemask;
    3ea4:	91 81       	ldd	r25, Z+1	; 0x01
    3ea6:	89 2b       	or	r24, r25
    3ea8:	81 83       	std	Z+1, r24	; 0x01
    3eaa:	04 c0       	rjmp	.+8      	; 0x3eb4 <pwm_start+0x8c>
	} else if (tc_is_tc1(void *tc)) {
		((TC1_t *)tc)->CTRLB |=
    3eac:	91 81       	ldd	r25, Z+1	; 0x01
    3eae:	80 73       	andi	r24, 0x30	; 48
    3eb0:	89 2b       	or	r24, r25
    3eb2:	81 83       	std	Z+1, r24	; 0x01
	/* Enable TC by setting correct clock prescaler */
	tc_write_clock_source(config->tc, config->clk_sel);
    3eb4:	e8 81       	ld	r30, Y
    3eb6:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    3eb8:	80 81       	ld	r24, Z
 * \note Configuring the clock starts alos the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    3eba:	80 7f       	andi	r24, 0xF0	; 240
    3ebc:	9c 81       	ldd	r25, Y+4	; 0x04
    3ebe:	89 2b       	or	r24, r25
    3ec0:	80 83       	st	Z, r24
}
    3ec2:	df 91       	pop	r29
    3ec4:	cf 91       	pop	r28
    3ec6:	08 95       	ret

00003ec8 <setupBluetoothFast>:
	//return sendBTCmd(btMouseMode);
#else
	return (true);
#endif

}
    3ec8:	cf 93       	push	r28
    3eca:	df 93       	push	r29
    3ecc:	cd b7       	in	r28, 0x3d	; 61
    3ece:	de b7       	in	r29, 0x3e	; 62
    3ed0:	27 97       	sbiw	r28, 0x07	; 7
    3ed2:	cd bf       	out	0x3d, r28	; 61
    3ed4:	de bf       	out	0x3e, r29	; 62
    3ed6:	87 e0       	ldi	r24, 0x07	; 7
    3ed8:	e6 e6       	ldi	r30, 0x66	; 102
    3eda:	f0 e2       	ldi	r31, 0x20	; 32
    3edc:	de 01       	movw	r26, r28
    3ede:	11 96       	adiw	r26, 0x01	; 1
    3ee0:	01 90       	ld	r0, Z+
    3ee2:	0d 92       	st	X+, r0
    3ee4:	8a 95       	dec	r24
    3ee6:	e1 f7       	brne	.-8      	; 0x3ee0 <setupBluetoothFast+0x18>
    3ee8:	60 e1       	ldi	r22, 0x10	; 16
    3eea:	85 e0       	ldi	r24, 0x05	; 5
    3eec:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <sysclk_enable_module>
    3ef0:	8b eb       	ldi	r24, 0xBB	; 187
    3ef2:	98 e2       	ldi	r25, 0x28	; 40
    3ef4:	0e 94 97 10 	call	0x212e	; 0x212e <sendDBGString>
    3ef8:	0e 94 c6 14 	call	0x298c	; 0x298c <WatchdogPet>
    3efc:	be 01       	movw	r22, r28
    3efe:	6f 5f       	subi	r22, 0xFF	; 255
    3f00:	7f 4f       	sbci	r23, 0xFF	; 255
    3f02:	80 ea       	ldi	r24, 0xA0	; 160
    3f04:	9a e0       	ldi	r25, 0x0A	; 10
    3f06:	07 de       	rcall	.-1010   	; 0x3b16 <usart_init_rs232>
    3f08:	88 23       	and	r24, r24
    3f0a:	39 f0       	breq	.+14     	; 0x3f1a <setupBluetoothFast+0x52>
    3f0c:	ea ee       	ldi	r30, 0xEA	; 234
    3f0e:	f1 e0       	ldi	r31, 0x01	; 1
    3f10:	84 91       	lpm	r24, Z
    3f12:	90 e0       	ldi	r25, 0x00	; 0
    3f14:	0e 94 a5 10 	call	0x214a	; 0x214a <sendDBGLine>
    3f18:	06 c0       	rjmp	.+12     	; 0x3f26 <setupBluetoothFast+0x5e>
    3f1a:	e6 ee       	ldi	r30, 0xE6	; 230
    3f1c:	f1 e0       	ldi	r31, 0x01	; 1
    3f1e:	84 91       	lpm	r24, Z
    3f20:	90 e0       	ldi	r25, 0x00	; 0
    3f22:	0e 94 a5 10 	call	0x214a	; 0x214a <sendDBGLine>
    3f26:	27 96       	adiw	r28, 0x07	; 7
    3f28:	cd bf       	out	0x3d, r28	; 61
    3f2a:	de bf       	out	0x3e, r29	; 62
    3f2c:	df 91       	pop	r29
    3f2e:	cf 91       	pop	r28
    3f30:	08 95       	ret

00003f32 <sendBTHexPair>:
    3f32:	cf 93       	push	r28
    3f34:	c8 2f       	mov	r28, r24
    3f36:	68 2f       	mov	r22, r24
    3f38:	62 95       	swap	r22
    3f3a:	6f 70       	andi	r22, 0x0F	; 15
    3f3c:	6a 30       	cpi	r22, 0x0A	; 10
    3f3e:	28 f0       	brcs	.+10     	; 0x3f4a <sendBTHexPair+0x18>
    3f40:	69 5c       	subi	r22, 0xC9	; 201
    3f42:	80 ea       	ldi	r24, 0xA0	; 160
    3f44:	9a e0       	ldi	r25, 0x0A	; 10
    3f46:	d1 dc       	rcall	.-1630   	; 0x38ea <usart_putchar>
    3f48:	04 c0       	rjmp	.+8      	; 0x3f52 <sendBTHexPair+0x20>
    3f4a:	60 5d       	subi	r22, 0xD0	; 208
    3f4c:	80 ea       	ldi	r24, 0xA0	; 160
    3f4e:	9a e0       	ldi	r25, 0x0A	; 10
    3f50:	cc dc       	rcall	.-1640   	; 0x38ea <usart_putchar>
    3f52:	cf 70       	andi	r28, 0x0F	; 15
    3f54:	ca 30       	cpi	r28, 0x0A	; 10
    3f56:	30 f0       	brcs	.+12     	; 0x3f64 <sendBTHexPair+0x32>
    3f58:	6c 2f       	mov	r22, r28
    3f5a:	69 5c       	subi	r22, 0xC9	; 201
    3f5c:	80 ea       	ldi	r24, 0xA0	; 160
    3f5e:	9a e0       	ldi	r25, 0x0A	; 10
    3f60:	c4 dc       	rcall	.-1656   	; 0x38ea <usart_putchar>
    3f62:	05 c0       	rjmp	.+10     	; 0x3f6e <sendBTHexPair+0x3c>
    3f64:	6c 2f       	mov	r22, r28
    3f66:	60 5d       	subi	r22, 0xD0	; 208
    3f68:	80 ea       	ldi	r24, 0xA0	; 160
    3f6a:	9a e0       	ldi	r25, 0x0A	; 10
    3f6c:	be dc       	rcall	.-1668   	; 0x38ea <usart_putchar>
    3f6e:	cf 91       	pop	r28
    3f70:	08 95       	ret

00003f72 <hardwareflowcontrol>:
    3f72:	e0 e8       	ldi	r30, 0x80	; 128
    3f74:	f6 e0       	ldi	r31, 0x06	; 6
    3f76:	20 85       	ldd	r18, Z+8	; 0x08
    3f78:	24 fd       	sbrc	r18, 4
    3f7a:	25 c0       	rjmp	.+74     	; 0x3fc6 <hardwareflowcontrol+0x54>
    3f7c:	20 e4       	ldi	r18, 0x40	; 64
    3f7e:	e0 e6       	ldi	r30, 0x60	; 96
    3f80:	f6 e0       	ldi	r31, 0x06	; 6
    3f82:	25 83       	std	Z+5, r18	; 0x05
    3f84:	18 16       	cp	r1, r24
    3f86:	19 06       	cpc	r1, r25
    3f88:	04 f5       	brge	.+64     	; 0x3fca <hardwareflowcontrol+0x58>
    3f8a:	e0 e8       	ldi	r30, 0x80	; 128
    3f8c:	f6 e0       	ldi	r31, 0x06	; 6
    3f8e:	20 85       	ldd	r18, Z+8	; 0x08
    3f90:	24 fb       	bst	r18, 4
    3f92:	44 27       	eor	r20, r20
    3f94:	40 f9       	bld	r20, 0
    3f96:	24 ff       	sbrs	r18, 4
    3f98:	08 c0       	rjmp	.+16     	; 0x3faa <hardwareflowcontrol+0x38>
    3f9a:	18 c0       	rjmp	.+48     	; 0x3fcc <hardwareflowcontrol+0x5a>
    3f9c:	20 85       	ldd	r18, Z+8	; 0x08
    3f9e:	24 fb       	bst	r18, 4
    3fa0:	44 27       	eor	r20, r20
    3fa2:	40 f9       	bld	r20, 0
    3fa4:	24 ff       	sbrs	r18, 4
    3fa6:	03 c0       	rjmp	.+6      	; 0x3fae <hardwareflowcontrol+0x3c>
    3fa8:	11 c0       	rjmp	.+34     	; 0x3fcc <hardwareflowcontrol+0x5a>
    3faa:	e0 e8       	ldi	r30, 0x80	; 128
    3fac:	f6 e0       	ldi	r31, 0x06	; 6
    3fae:	01 97       	sbiw	r24, 0x01	; 1
    3fb0:	20 e0       	ldi	r18, 0x00	; 0
    3fb2:	30 e0       	ldi	r19, 0x00	; 0
    3fb4:	2f 5f       	subi	r18, 0xFF	; 255
    3fb6:	3f 4f       	sbci	r19, 0xFF	; 255
    3fb8:	25 3d       	cpi	r18, 0xD5	; 213
    3fba:	54 e1       	ldi	r21, 0x14	; 20
    3fbc:	35 07       	cpc	r19, r21
    3fbe:	d1 f7       	brne	.-12     	; 0x3fb4 <hardwareflowcontrol+0x42>
    3fc0:	00 97       	sbiw	r24, 0x00	; 0
    3fc2:	61 f7       	brne	.-40     	; 0x3f9c <hardwareflowcontrol+0x2a>
    3fc4:	03 c0       	rjmp	.+6      	; 0x3fcc <hardwareflowcontrol+0x5a>
    3fc6:	41 e0       	ldi	r20, 0x01	; 1
    3fc8:	01 c0       	rjmp	.+2      	; 0x3fcc <hardwareflowcontrol+0x5a>
    3fca:	40 e0       	ldi	r20, 0x00	; 0
    3fcc:	84 2f       	mov	r24, r20
    3fce:	08 95       	ret

00003fd0 <turnBTOn>:
    3fd0:	8f ec       	ldi	r24, 0xCF	; 207
    3fd2:	98 e2       	ldi	r25, 0x28	; 40
    3fd4:	0e 94 a5 10 	call	0x214a	; 0x214a <sendDBGLine>
    3fd8:	80 e2       	ldi	r24, 0x20	; 32
    3fda:	e0 e8       	ldi	r30, 0x80	; 128
    3fdc:	f6 e0       	ldi	r31, 0x06	; 6
    3fde:	85 83       	std	Z+5, r24	; 0x05
    3fe0:	85 e5       	ldi	r24, 0x55	; 85
    3fe2:	93 e2       	ldi	r25, 0x23	; 35
    3fe4:	a8 e0       	ldi	r26, 0x08	; 8
    3fe6:	b0 e0       	ldi	r27, 0x00	; 0
    3fe8:	01 97       	sbiw	r24, 0x01	; 1
    3fea:	a1 09       	sbc	r26, r1
    3fec:	b1 09       	sbc	r27, r1
    3fee:	e1 f7       	brne	.-8      	; 0x3fe8 <turnBTOn+0x18>
    3ff0:	81 e0       	ldi	r24, 0x01	; 1
    3ff2:	e0 e8       	ldi	r30, 0x80	; 128
    3ff4:	f6 e0       	ldi	r31, 0x06	; 6
    3ff6:	86 83       	std	Z+6, r24	; 0x06
    3ff8:	80 e8       	ldi	r24, 0x80	; 128
    3ffa:	9e e3       	ldi	r25, 0x3E	; 62
    3ffc:	ba df       	rcall	.-140    	; 0x3f72 <hardwareflowcontrol>
    3ffe:	80 93 74 2c 	sts	0x2C74, r24
    4002:	08 95       	ret

00004004 <sendBTChar>:
    4004:	cf 93       	push	r28
    4006:	c8 2f       	mov	r28, r24
    4008:	88 ee       	ldi	r24, 0xE8	; 232
    400a:	93 e0       	ldi	r25, 0x03	; 3
    400c:	b2 df       	rcall	.-156    	; 0x3f72 <hardwareflowcontrol>
    400e:	88 23       	and	r24, r24
    4010:	21 f0       	breq	.+8      	; 0x401a <sendBTChar+0x16>
    4012:	6c 2f       	mov	r22, r28
    4014:	80 ea       	ldi	r24, 0xA0	; 160
    4016:	9a e0       	ldi	r25, 0x0A	; 10
    4018:	68 dc       	rcall	.-1840   	; 0x38ea <usart_putchar>
    401a:	cf 91       	pop	r28
    401c:	08 95       	ret

0000401e <sendBTString>:
    401e:	cf 93       	push	r28
    4020:	df 93       	push	r29
    4022:	ec 01       	movw	r28, r24
    4024:	88 81       	ld	r24, Y
    4026:	88 23       	and	r24, r24
    4028:	29 f0       	breq	.+10     	; 0x4034 <sendBTString+0x16>
    402a:	21 96       	adiw	r28, 0x01	; 1
    402c:	eb df       	rcall	.-42     	; 0x4004 <sendBTChar>
    402e:	89 91       	ld	r24, Y+
    4030:	81 11       	cpse	r24, r1
    4032:	fc cf       	rjmp	.-8      	; 0x402c <sendBTString+0xe>
    4034:	df 91       	pop	r29
    4036:	cf 91       	pop	r28
    4038:	08 95       	ret

0000403a <sendBTCmd>:
    403a:	cf 93       	push	r28
    403c:	df 93       	push	r29
    403e:	ec 01       	movw	r28, r24
    4040:	88 ee       	ldi	r24, 0xE8	; 232
    4042:	93 e0       	ldi	r25, 0x03	; 3
    4044:	96 df       	rcall	.-212    	; 0x3f72 <hardwareflowcontrol>
    4046:	88 23       	and	r24, r24
    4048:	31 f0       	breq	.+12     	; 0x4056 <sendBTCmd+0x1c>
    404a:	ce 01       	movw	r24, r28
    404c:	e8 df       	rcall	.-48     	; 0x401e <sendBTString>
    404e:	8d e0       	ldi	r24, 0x0D	; 13
    4050:	d9 df       	rcall	.-78     	; 0x4004 <sendBTChar>
    4052:	8a e0       	ldi	r24, 0x0A	; 10
    4054:	d7 df       	rcall	.-82     	; 0x4004 <sendBTChar>
    4056:	80 e0       	ldi	r24, 0x00	; 0
    4058:	df 91       	pop	r29
    405a:	cf 91       	pop	r28
    405c:	08 95       	ret

0000405e <initBTComms>:
    405e:	81 e5       	ldi	r24, 0x51	; 81
    4060:	99 e2       	ldi	r25, 0x29	; 41
    4062:	0e 94 a5 10 	call	0x214a	; 0x214a <sendDBGLine>
    4066:	a8 95       	wdr
    4068:	80 ed       	ldi	r24, 0xD0	; 208
    406a:	97 e0       	ldi	r25, 0x07	; 7
    406c:	82 df       	rcall	.-252    	; 0x3f72 <hardwareflowcontrol>
    406e:	88 ed       	ldi	r24, 0xD8	; 216
    4070:	98 e2       	ldi	r25, 0x28	; 40
    4072:	e3 df       	rcall	.-58     	; 0x403a <sendBTCmd>
    4074:	a8 95       	wdr
    4076:	80 ed       	ldi	r24, 0xD0	; 208
    4078:	97 e0       	ldi	r25, 0x07	; 7
    407a:	7b df       	rcall	.-266    	; 0x3f72 <hardwareflowcontrol>
    407c:	84 ee       	ldi	r24, 0xE4	; 228
    407e:	98 e2       	ldi	r25, 0x28	; 40
    4080:	dc df       	rcall	.-72     	; 0x403a <sendBTCmd>
    4082:	8a ee       	ldi	r24, 0xEA	; 234
    4084:	98 e2       	ldi	r25, 0x28	; 40
    4086:	d9 df       	rcall	.-78     	; 0x403a <sendBTCmd>
    4088:	83 ef       	ldi	r24, 0xF3	; 243
    408a:	98 e2       	ldi	r25, 0x28	; 40
    408c:	0e 94 a5 10 	call	0x214a	; 0x214a <sendDBGLine>
    4090:	a8 95       	wdr
    4092:	8d ef       	ldi	r24, 0xFD	; 253
    4094:	98 e2       	ldi	r25, 0x28	; 40
    4096:	d1 df       	rcall	.-94     	; 0x403a <sendBTCmd>
    4098:	84 e0       	ldi	r24, 0x04	; 4
    409a:	99 e2       	ldi	r25, 0x29	; 41
    409c:	ce df       	rcall	.-100    	; 0x403a <sendBTCmd>
    409e:	a8 95       	wdr
    40a0:	85 e5       	ldi	r24, 0x55	; 85
    40a2:	91 e6       	ldi	r25, 0x61	; 97
    40a4:	a1 e5       	ldi	r26, 0x51	; 81
    40a6:	b0 e0       	ldi	r27, 0x00	; 0
    40a8:	01 97       	sbiw	r24, 0x01	; 1
    40aa:	a1 09       	sbc	r26, r1
    40ac:	b1 09       	sbc	r27, r1
    40ae:	e1 f7       	brne	.-8      	; 0x40a8 <initBTComms+0x4a>
    40b0:	8a e0       	ldi	r24, 0x0A	; 10
    40b2:	99 e2       	ldi	r25, 0x29	; 41
    40b4:	c2 df       	rcall	.-124    	; 0x403a <sendBTCmd>
    40b6:	a8 95       	wdr
    40b8:	85 e5       	ldi	r24, 0x55	; 85
    40ba:	91 e6       	ldi	r25, 0x61	; 97
    40bc:	a1 e5       	ldi	r26, 0x51	; 81
    40be:	b0 e0       	ldi	r27, 0x00	; 0
    40c0:	01 97       	sbiw	r24, 0x01	; 1
    40c2:	a1 09       	sbc	r26, r1
    40c4:	b1 09       	sbc	r27, r1
    40c6:	e1 f7       	brne	.-8      	; 0x40c0 <initBTComms+0x62>
    40c8:	81 e1       	ldi	r24, 0x11	; 17
    40ca:	99 e2       	ldi	r25, 0x29	; 41
    40cc:	b6 df       	rcall	.-148    	; 0x403a <sendBTCmd>
    40ce:	a8 95       	wdr
    40d0:	88 ee       	ldi	r24, 0xE8	; 232
    40d2:	93 e0       	ldi	r25, 0x03	; 3
    40d4:	4e df       	rcall	.-356    	; 0x3f72 <hardwareflowcontrol>
    40d6:	8d e1       	ldi	r24, 0x1D	; 29
    40d8:	99 e2       	ldi	r25, 0x29	; 41
    40da:	af df       	rcall	.-162    	; 0x403a <sendBTCmd>
    40dc:	a8 95       	wdr
    40de:	88 ee       	ldi	r24, 0xE8	; 232
    40e0:	93 e0       	ldi	r25, 0x03	; 3
    40e2:	47 df       	rcall	.-370    	; 0x3f72 <hardwareflowcontrol>
    40e4:	a8 95       	wdr
    40e6:	8c e2       	ldi	r24, 0x2C	; 44
    40e8:	99 e2       	ldi	r25, 0x29	; 41
    40ea:	a7 df       	rcall	.-178    	; 0x403a <sendBTCmd>
    40ec:	88 ec       	ldi	r24, 0xC8	; 200
    40ee:	91 e0       	ldi	r25, 0x01	; 1
    40f0:	a4 df       	rcall	.-184    	; 0x403a <sendBTCmd>
    40f2:	8e e3       	ldi	r24, 0x3E	; 62
    40f4:	99 e2       	ldi	r25, 0x29	; 41
    40f6:	a1 df       	rcall	.-190    	; 0x403a <sendBTCmd>
    40f8:	80 e5       	ldi	r24, 0x50	; 80
    40fa:	99 e2       	ldi	r25, 0x29	; 41
    40fc:	0c 94 a5 10 	jmp	0x214a	; 0x214a <sendDBGLine>

00004100 <turnBTOff>:
    4100:	8d e5       	ldi	r24, 0x5D	; 93
    4102:	99 e2       	ldi	r25, 0x29	; 41
    4104:	0e 94 a5 10 	call	0x214a	; 0x214a <sendDBGLine>
    4108:	80 ed       	ldi	r24, 0xD0	; 208
    410a:	97 e0       	ldi	r25, 0x07	; 7
    410c:	32 df       	rcall	.-412    	; 0x3f72 <hardwareflowcontrol>
    410e:	88 ed       	ldi	r24, 0xD8	; 216
    4110:	98 e2       	ldi	r25, 0x28	; 40
    4112:	93 df       	rcall	.-218    	; 0x403a <sendBTCmd>
    4114:	80 ed       	ldi	r24, 0xD0	; 208
    4116:	97 e0       	ldi	r25, 0x07	; 7
    4118:	2c df       	rcall	.-424    	; 0x3f72 <hardwareflowcontrol>
    411a:	87 e6       	ldi	r24, 0x67	; 103
    411c:	99 e2       	ldi	r25, 0x29	; 41
    411e:	8d df       	rcall	.-230    	; 0x403a <sendBTCmd>
    4120:	8d e6       	ldi	r24, 0x6D	; 109
    4122:	99 e2       	ldi	r25, 0x29	; 41
    4124:	8a df       	rcall	.-236    	; 0x403a <sendBTCmd>
    4126:	e0 e8       	ldi	r30, 0x80	; 128
    4128:	f6 e0       	ldi	r31, 0x06	; 6
    412a:	81 e0       	ldi	r24, 0x01	; 1
    412c:	85 83       	std	Z+5, r24	; 0x05
    412e:	80 e2       	ldi	r24, 0x20	; 32
    4130:	86 83       	std	Z+6, r24	; 0x06
    4132:	08 95       	ret

00004134 <applyBTSettings>:
    4134:	83 e7       	ldi	r24, 0x73	; 115
    4136:	99 e2       	ldi	r25, 0x29	; 41
    4138:	0e 94 a5 10 	call	0x214a	; 0x214a <sendDBGLine>
    413c:	88 ed       	ldi	r24, 0xD8	; 216
    413e:	98 e2       	ldi	r25, 0x28	; 40
    4140:	7c df       	rcall	.-264    	; 0x403a <sendBTCmd>
    4142:	84 ee       	ldi	r24, 0xE4	; 228
    4144:	98 e2       	ldi	r25, 0x28	; 40
    4146:	79 df       	rcall	.-270    	; 0x403a <sendBTCmd>
    4148:	8a ee       	ldi	r24, 0xEA	; 234
    414a:	98 e2       	ldi	r25, 0x28	; 40
    414c:	76 df       	rcall	.-276    	; 0x403a <sendBTCmd>
    414e:	83 ef       	ldi	r24, 0xF3	; 243
    4150:	98 e2       	ldi	r25, 0x28	; 40
    4152:	0e 94 a5 10 	call	0x214a	; 0x214a <sendDBGLine>
    4156:	a8 95       	wdr
    4158:	80 e4       	ldi	r24, 0x40	; 64
    415a:	9f e1       	ldi	r25, 0x1F	; 31
    415c:	0a df       	rcall	.-492    	; 0x3f72 <hardwareflowcontrol>
    415e:	88 ed       	ldi	r24, 0xD8	; 216
    4160:	98 e2       	ldi	r25, 0x28	; 40
    4162:	6b cf       	rjmp	.-298    	; 0x403a <sendBTCmd>

00004164 <BluetoothKeyboardMode>:
    4164:	83 e8       	ldi	r24, 0x83	; 131
    4166:	99 e2       	ldi	r25, 0x29	; 41
    4168:	68 cf       	rjmp	.-304    	; 0x403a <sendBTCmd>

0000416a <BluetoothComboMode>:

bool BluetoothComboMode() // Keyboard & Mouse
{
#ifdef BTSUBCLASS
	return sendBTCmd("BC:CD=0005C0");
    416a:	8d e9       	ldi	r24, 0x9D	; 157
    416c:	99 e2       	ldi	r25, 0x29	; 41
	//return sendBTCmd(btComboMode);
#else
 return (true);
#endif
}
    416e:	65 cf       	rjmp	.-310    	; 0x403a <sendBTCmd>

00004170 <BluetoothGamePadMode>:

bool BluetoothGamePadMode()
{
#ifdef BTSUBCLASS
	return sendBTCmd("BC:CD=0005C8");
    4170:	8a ea       	ldi	r24, 0xAA	; 170
    4172:	99 e2       	ldi	r25, 0x29	; 41
	//return sendBTCmd(btGamePadMode);
#else
	return (true);
#endif
}
    4174:	62 cf       	rjmp	.-316    	; 0x403a <sendBTCmd>

00004176 <BluetoothJoystickMode>:

bool BluetoothJoystickMode()
{
#ifdef BTSUBCLASS
	return sendBTCmd("BC:CD=0005C4");
    4176:	87 eb       	ldi	r24, 0xB7	; 183
    4178:	99 e2       	ldi	r25, 0x29	; 41
	//return sendBTCmd(btJoystickMode);
#else
	return (true);
#endif
    417a:	5f cf       	rjmp	.-322    	; 0x403a <sendBTCmd>

0000417c <sysTickCallback>:
}

void sysTickCallback(void) {
	static unsigned int wdtCheckCount = 0;
	// Clear the interrupt flag:
	clearSysTickFlag();
    417c:	0e 94 bd 13 	call	0x277a	; 0x277a <clearSysTickFlag>
	
	// Increment system time:
	tickSystemTime();
    4180:	0e 94 48 13 	call	0x2690	; 0x2690 <tickSystemTime>
	
	/* Check for time to validate system is still running */
	wdtCheckCount++;
    4184:	80 91 7b 2c 	lds	r24, 0x2C7B
    4188:	90 91 7c 2c 	lds	r25, 0x2C7C
    418c:	01 96       	adiw	r24, 0x01	; 1
	if (wdtCheckCount >= SYSTICK_FREQUENCY) {
    418e:	88 3e       	cpi	r24, 0xE8	; 232
    4190:	23 e0       	ldi	r18, 0x03	; 3
    4192:	92 07       	cpc	r25, r18
    4194:	28 f4       	brcc	.+10     	; 0x41a0 <sysTickCallback+0x24>
	
	// Increment system time:
	tickSystemTime();
	
	/* Check for time to validate system is still running */
	wdtCheckCount++;
    4196:	80 93 7b 2c 	sts	0x2C7B, r24
    419a:	90 93 7c 2c 	sts	0x2C7C, r25
    419e:	08 95       	ret
	if (wdtCheckCount >= SYSTICK_FREQUENCY) {
		wdtCheckCount = 0;
    41a0:	10 92 7b 2c 	sts	0x2C7B, r1
    41a4:	10 92 7c 2c 	sts	0x2C7C, r1
		WatchdogValidate();
    41a8:	0c 94 cb 14 	jmp	0x2996	; 0x2996 <WatchdogValidate>

000041ac <selectHandlers>:
	}
}

void selectHandlers(void) {
	switch (ccc.mode) {
    41ac:	80 91 0d 2d 	lds	r24, 0x2D0D
    41b0:	82 30       	cpi	r24, 0x02	; 2
    41b2:	09 f4       	brne	.+2      	; 0x41b6 <selectHandlers+0xa>
    41b4:	55 c0       	rjmp	.+170    	; 0x4260 <selectHandlers+0xb4>
    41b6:	30 f4       	brcc	.+12     	; 0x41c4 <selectHandlers+0x18>
    41b8:	88 23       	and	r24, r24
    41ba:	71 f1       	breq	.+92     	; 0x4218 <selectHandlers+0x6c>
    41bc:	81 30       	cpi	r24, 0x01	; 1
    41be:	09 f0       	breq	.+2      	; 0x41c2 <selectHandlers+0x16>
    41c0:	62 c0       	rjmp	.+196    	; 0x4286 <selectHandlers+0xda>
    41c2:	19 c0       	rjmp	.+50     	; 0x41f6 <selectHandlers+0x4a>
    41c4:	84 30       	cpi	r24, 0x04	; 4
    41c6:	21 f0       	breq	.+8      	; 0x41d0 <selectHandlers+0x24>
    41c8:	87 30       	cpi	r24, 0x07	; 7
    41ca:	09 f0       	breq	.+2      	; 0x41ce <selectHandlers+0x22>
    41cc:	5c c0       	rjmp	.+184    	; 0x4286 <selectHandlers+0xda>
    41ce:	35 c0       	rjmp	.+106    	; 0x423a <selectHandlers+0x8e>
		case BTM_KEYBOARD_MOUSE:
			button_handler_init = &keyboardMouseInit;
    41d0:	82 e6       	ldi	r24, 0x62	; 98
    41d2:	9d e0       	ldi	r25, 0x0D	; 13
    41d4:	80 93 75 2c 	sts	0x2C75, r24
    41d8:	90 93 76 2c 	sts	0x2C76, r25
			button_handler      = &keyboadMouseButtonHandler;
    41dc:	80 e9       	ldi	r24, 0x90	; 144
    41de:	90 e1       	ldi	r25, 0x10	; 16
    41e0:	80 93 77 2c 	sts	0x2C77, r24
    41e4:	90 93 78 2c 	sts	0x2C78, r25
			joystick_handler    = &keyboardMouseJoystickHandler;
    41e8:	86 e1       	ldi	r24, 0x16	; 22
    41ea:	9f e0       	ldi	r25, 0x0F	; 15
    41ec:	80 93 79 2c 	sts	0x2C79, r24
    41f0:	90 93 7a 2c 	sts	0x2C7A, r25
			break;
    41f4:	08 95       	ret
			
		case BTM_IOS_KEYBOARD:
			button_handler_init = &keyboardiOSInit;
    41f6:	86 e2       	ldi	r24, 0x26	; 38
    41f8:	94 e0       	ldi	r25, 0x04	; 4
    41fa:	80 93 75 2c 	sts	0x2C75, r24
    41fe:	90 93 76 2c 	sts	0x2C76, r25
			button_handler      = &keyboardiOSButtonHandler;
    4202:	8c e2       	ldi	r24, 0x2C	; 44
    4204:	94 e0       	ldi	r25, 0x04	; 4
    4206:	80 93 77 2c 	sts	0x2C77, r24
    420a:	90 93 78 2c 	sts	0x2C78, r25
			joystick_handler    = NULL;
    420e:	10 92 79 2c 	sts	0x2C79, r1
    4212:	10 92 7a 2c 	sts	0x2C7A, r1
			break;
    4216:	08 95       	ret

		case BTM_KEYBOARD:
			button_handler_init = &keyboardInit;
    4218:	8e e6       	ldi	r24, 0x6E	; 110
    421a:	9c e0       	ldi	r25, 0x0C	; 12
    421c:	80 93 75 2c 	sts	0x2C75, r24
    4220:	90 93 76 2c 	sts	0x2C76, r25
			button_handler      = &keyboardButtonHandler;
    4224:	80 e6       	ldi	r24, 0x60	; 96
    4226:	9d e0       	ldi	r25, 0x0D	; 13
    4228:	80 93 77 2c 	sts	0x2C77, r24
    422c:	90 93 78 2c 	sts	0x2C78, r25
			joystick_handler    = NULL;
    4230:	10 92 79 2c 	sts	0x2C79, r1
    4234:	10 92 7a 2c 	sts	0x2C7A, r1
			break;
    4238:	08 95       	ret
		
		case BTM_JOYSTICK_ANALOG:
			button_handler_init = &jStickInit;
    423a:	8b e2       	ldi	r24, 0x2B	; 43
    423c:	9a e0       	ldi	r25, 0x0A	; 10
    423e:	80 93 75 2c 	sts	0x2C75, r24
    4242:	90 93 76 2c 	sts	0x2C76, r25
			button_handler      = &jStickButtonHandler;
    4246:	89 e1       	ldi	r24, 0x19	; 25
    4248:	9c e0       	ldi	r25, 0x0C	; 12
    424a:	80 93 77 2c 	sts	0x2C77, r24
    424e:	90 93 78 2c 	sts	0x2C78, r25
			joystick_handler    = &jStickJoystickHandler;
    4252:	84 e8       	ldi	r24, 0x84	; 132
    4254:	9b e0       	ldi	r25, 0x0B	; 11
    4256:	80 93 79 2c 	sts	0x2C79, r24
    425a:	90 93 7a 2c 	sts	0x2C7A, r25
			break;
    425e:	08 95       	ret
		
		case BTM_GAMEPAD:
			button_handler_init = &gamepadInit;
    4260:	85 ee       	ldi	r24, 0xE5	; 229
    4262:	97 e0       	ldi	r25, 0x07	; 7
    4264:	80 93 75 2c 	sts	0x2C75, r24
    4268:	90 93 76 2c 	sts	0x2C76, r25
			button_handler      = &gamepadButtonHandler;
    426c:	86 ed       	ldi	r24, 0xD6	; 214
    426e:	99 e0       	ldi	r25, 0x09	; 9
    4270:	80 93 77 2c 	sts	0x2C77, r24
    4274:	90 93 78 2c 	sts	0x2C78, r25
			joystick_handler    = &gamepadJoystickHandler;
    4278:	81 e4       	ldi	r24, 0x41	; 65
    427a:	99 e0       	ldi	r25, 0x09	; 9
    427c:	80 93 79 2c 	sts	0x2C79, r24
    4280:	90 93 7a 2c 	sts	0x2C7A, r25
			break;
    4284:	08 95       	ret
		
		default:
			button_handler_init = NULL;
    4286:	10 92 75 2c 	sts	0x2C75, r1
    428a:	10 92 76 2c 	sts	0x2C76, r1
			button_handler      = NULL;
    428e:	10 92 77 2c 	sts	0x2C77, r1
    4292:	10 92 78 2c 	sts	0x2C78, r1
			joystick_handler    = NULL;
    4296:	10 92 79 2c 	sts	0x2C79, r1
    429a:	10 92 7a 2c 	sts	0x2C7A, r1
    429e:	08 95       	ret

000042a0 <SetupStartPinExternalInterrupt>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    42a0:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    42a2:	f8 94       	cli
void SetupStartPinExternalInterrupt()
{
	irqflags_t flags;
	flags = cpu_irq_save();
	
	PORTF_INT0MASK = 1u<<2; //Set PORTF interrupt on PORTF.2 pin
    42a4:	84 e0       	ldi	r24, 0x04	; 4
    42a6:	80 93 aa 06 	sts	0x06AA, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    42aa:	2f b7       	in	r18, 0x3f	; 63
	cpu_irq_disable();
    42ac:	f8 94       	cli
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	uint8_t flags = cpu_irq_save();

	PORTCFG.MPCMASK = arch_ioport_pin_to_mask(pin);
    42ae:	80 93 b0 00 	sts	0x00B0, r24

	base->PIN0CTRL &= ~PORT_ISC_gm;
    42b2:	e0 ea       	ldi	r30, 0xA0	; 160
    42b4:	f6 e0       	ldi	r31, 0x06	; 6
    42b6:	80 89       	ldd	r24, Z+16	; 0x10
    42b8:	88 7f       	andi	r24, 0xF8	; 248
    42ba:	80 8b       	std	Z+16, r24	; 0x10
	base->PIN0CTRL |= (pin_sense & PORT_ISC_gm);
    42bc:	80 89       	ldd	r24, Z+16	; 0x10
    42be:	81 60       	ori	r24, 0x01	; 1
    42c0:	80 8b       	std	Z+16, r24	; 0x10
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    42c2:	2f bf       	out	0x3f, r18	; 63
	arch_ioport_set_pin_sense_mode(START_PIN,IOPORT_SENSE_RISING);
	PORTF_INTCTRL = 2u; //Enable medium level external interrupt
    42c4:	82 e0       	ldi	r24, 0x02	; 2
    42c6:	80 93 a9 06 	sts	0x06A9, r24
    42ca:	9f bf       	out	0x3f, r25	; 63
    42cc:	08 95       	ret

000042ce <main>:

// Declarations:
bool pulse, bios, turnedOn;

int main (void)
{
    42ce:	cf 93       	push	r28
    42d0:	df 93       	push	r29
    42d2:	cd b7       	in	r28, 0x3d	; 61
    42d4:	de b7       	in	r29, 0x3e	; 62
    42d6:	c8 55       	subi	r28, 0x58	; 88
    42d8:	d1 09       	sbc	r29, r1
    42da:	cd bf       	out	0x3d, r28	; 61
    42dc:	de bf       	out	0x3e, r29	; 62
	struct Timeout batteryCheckTimeout;
	struct Timeout powerOffUnused; 
	uint8_t i; // temporary variable.
	bool possiblyPoweringOff = false;
	cfgsel_t which_cfg;
	pulse = false;
    42de:	10 92 0c 2d 	sts	0x2D0C, r1
	
#if (DEBUG == 1)
	char debugTmpString[40];
#endif
	
	sysclk_init(); //Initialize System Clock
    42e2:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <sysclk_init>
	board_init(); //Setup IO
    42e6:	0e 94 6f 01 	call	0x2de	; 0x2de <board_init>
    42ea:	80 e0       	ldi	r24, 0x00	; 0
    42ec:	90 e0       	ldi	r25, 0x00	; 0
    42ee:	01 96       	adiw	r24, 0x01	; 1
    42f0:	8a 32       	cpi	r24, 0x2A	; 42
    42f2:	28 e6       	ldi	r18, 0x68	; 104
    42f4:	92 07       	cpc	r25, r18
    42f6:	d9 f7       	brne	.-10     	; 0x42ee <main+0x20>
	delay_ms(5);
	
	turnBTOn(); // Enable the Bluetooth module
    42f8:	6b de       	rcall	.-810    	; 0x3fd0 <turnBTOn>
	setupBluetoothFast(); // Set baud rate to 115200
    42fa:	e6 dd       	rcall	.-1076   	; 0x3ec8 <setupBluetoothFast>
	 
	// Post PCB Validation Tests
	if (IsTestMode()) ExecuteTest();
    42fc:	0e 94 dd 10 	call	0x21ba	; 0x21ba <IsTestMode>
    4300:	81 11       	cpse	r24, r1
    4302:	0e 94 34 11 	call	0x2268	; 0x2268 <ExecuteTest>
	
	initBTComms(global_header.bluetooth_mode_names[ccc.mode]);
    4306:	80 91 0d 2d 	lds	r24, 0x2D0D
    430a:	a0 e1       	ldi	r26, 0x10	; 16
    430c:	8a 9f       	mul	r24, r26
    430e:	c0 01       	movw	r24, r0
    4310:	11 24       	eor	r1, r1
    4312:	88 57       	subi	r24, 0x78	; 120
    4314:	93 4d       	sbci	r25, 0xD3	; 211
    4316:	a3 de       	rcall	.-698    	; 0x405e <initBTComms>

	// Setup the watchdog timer period:
	WatchdogInit();
    4318:	0e 94 c1 14 	call	0x2982	; 0x2982 <WatchdogInit>

	// Setup the system tick:
	setupSysTick(&sysTickCallback);
    431c:	8e eb       	ldi	r24, 0xBE	; 190
    431e:	90 e2       	ldi	r25, 0x20	; 32
    4320:	0e 94 c3 13 	call	0x2786	; 0x2786 <setupSysTick>
	
	// Insert application code here, after the board has been initialized.
	// Setup other peripherals:
	setupDbg();
    4324:	0e 94 aa 10 	call	0x2154	; 0x2154 <setupDbg>
	setupUsb();
    4328:	0e 94 ed 13 	call	0x27da	; 0x27da <setupUsb>
	setupAnalog();	
    432c:	0e 94 1b 01 	call	0x236	; 0x236 <setupAnalog>
	enableAnalog();	
    4330:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <enableAnalog>
	
	// Sample each of the joysticks to set the center values:
	for (i = 0 ; i < NUM_JOYSTICKS; i++) {
		joysticks[i].previous_x = joysticks[i].center_x = joysticks[i].current_x  = sampleAnalogChannel(joysticks[i].adc_channel_x);
    4334:	80 91 38 20 	lds	r24, 0x2038
    4338:	0e 94 3d 01 	call	0x27a	; 0x27a <sampleAnalogChannel>
    433c:	80 93 42 20 	sts	0x2042, r24
    4340:	90 93 43 20 	sts	0x2043, r25
    4344:	80 93 3a 20 	sts	0x203A, r24
    4348:	90 93 3b 20 	sts	0x203B, r25
    434c:	80 93 3e 20 	sts	0x203E, r24
    4350:	90 93 3f 20 	sts	0x203F, r25
		joysticks[i].previous_y = joysticks[i].center_y = joysticks[i].current_y  = sampleAnalogChannel(joysticks[i].adc_channel_y);
    4354:	80 91 39 20 	lds	r24, 0x2039
    4358:	0e 94 3d 01 	call	0x27a	; 0x27a <sampleAnalogChannel>
    435c:	80 93 44 20 	sts	0x2044, r24
    4360:	90 93 45 20 	sts	0x2045, r25
    4364:	80 93 3c 20 	sts	0x203C, r24
    4368:	90 93 3d 20 	sts	0x203D, r25
    436c:	80 93 40 20 	sts	0x2040, r24
    4370:	90 93 41 20 	sts	0x2041, r25
	setupAnalog();	
	enableAnalog();	
	
	// Sample each of the joysticks to set the center values:
	for (i = 0 ; i < NUM_JOYSTICKS; i++) {
		joysticks[i].previous_x = joysticks[i].center_x = joysticks[i].current_x  = sampleAnalogChannel(joysticks[i].adc_channel_x);
    4374:	80 91 46 20 	lds	r24, 0x2046
    4378:	0e 94 3d 01 	call	0x27a	; 0x27a <sampleAnalogChannel>
    437c:	80 93 50 20 	sts	0x2050, r24
    4380:	90 93 51 20 	sts	0x2051, r25
    4384:	80 93 48 20 	sts	0x2048, r24
    4388:	90 93 49 20 	sts	0x2049, r25
    438c:	80 93 4c 20 	sts	0x204C, r24
    4390:	90 93 4d 20 	sts	0x204D, r25
		joysticks[i].previous_y = joysticks[i].center_y = joysticks[i].current_y  = sampleAnalogChannel(joysticks[i].adc_channel_y);
    4394:	80 91 47 20 	lds	r24, 0x2047
    4398:	0e 94 3d 01 	call	0x27a	; 0x27a <sampleAnalogChannel>
    439c:	80 93 52 20 	sts	0x2052, r24
    43a0:	90 93 53 20 	sts	0x2053, r25
    43a4:	80 93 4a 20 	sts	0x204A, r24
    43a8:	90 93 4b 20 	sts	0x204B, r25
    43ac:	80 93 4e 20 	sts	0x204E, r24
    43b0:	90 93 4f 20 	sts	0x204F, r25
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    43b4:	10 92 7d 2c 	sts	0x2C7D, r1
    43b8:	10 92 7e 2c 	sts	0x2C7E, r1
    43bc:	10 92 7f 2c 	sts	0x2C7F, r1
    43c0:	10 92 80 2c 	sts	0x2C80, r1
    43c4:	10 92 81 2c 	sts	0x2C81, r1
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    43c8:	81 e0       	ldi	r24, 0x01	; 1
    43ca:	80 93 82 2c 	sts	0x2C82, r24
	}	
	
	sleepmgr_init(); // Initialize Sleep Manager
	enableSysTick(); // Enable System clock	
    43ce:	0e 94 b5 13 	call	0x276a	; 0x276a <enableSysTick>
	
	SetupStartPinExternalInterrupt();
    43d2:	66 df       	rcall	.-308    	; 0x42a0 <SetupStartPinExternalInterrupt>
	#if !DEBUG
	pmic_init(); // Enable low/mid/high level interrupts
	cpu_irq_enable(); // Global interrupt enable
	#endif
	
	turnedOn = powerOn(global_header.powerOffSoftware);
    43d4:	80 91 08 2d 	lds	r24, 0x2D08
    43d8:	88 1f       	adc	r24, r24
    43da:	88 27       	eor	r24, r24
    43dc:	88 1f       	adc	r24, r24
    43de:	90 91 09 2d 	lds	r25, 0x2D09
    43e2:	9f 73       	andi	r25, 0x3F	; 63
    43e4:	99 0f       	add	r25, r25
    43e6:	98 2b       	or	r25, r24
    43e8:	81 e0       	ldi	r24, 0x01	; 1
    43ea:	09 f4       	brne	.+2      	; 0x43ee <main+0x120>
    43ec:	80 e0       	ldi	r24, 0x00	; 0
    43ee:	0e 94 bf 11 	call	0x237e	; 0x237e <powerOn>
    43f2:	80 93 0b 2d 	sts	0x2D0B, r24
	
	// Set the global/controller configuration and button/joystick handler:
	
	which_cfg = whichConfiguration();
    43f6:	0e 94 a0 07 	call	0xf40	; 0xf40 <whichConfiguration>
	loadConfiguration(which_cfg);
    43fa:	0e 94 45 07 	call	0xe8a	; 0xe8a <loadConfiguration>
	
	selectHandlers();
    43fe:	d6 de       	rcall	.-596    	; 0x41ac <selectHandlers>
	setupLEDs(global_header.led_G_D0_B_D1);
    4400:	80 91 09 2d 	lds	r24, 0x2D09
    4404:	82 95       	swap	r24
    4406:	86 95       	lsr	r24
    4408:	86 95       	lsr	r24
    440a:	83 70       	andi	r24, 0x03	; 3
    440c:	90 91 0a 2d 	lds	r25, 0x2D0A
    4410:	99 0f       	add	r25, r25
    4412:	99 0f       	add	r25, r25
    4414:	98 2b       	or	r25, r24
    4416:	81 e0       	ldi	r24, 0x01	; 1
    4418:	09 f4       	brne	.+2      	; 0x441c <main+0x14e>
    441a:	80 e0       	ldi	r24, 0x00	; 0
    441c:	0e 94 cb 11 	call	0x2396	; 0x2396 <setupLEDs>

	// Send startup message:
	sendUSBLine("");
    4420:	81 e3       	ldi	r24, 0x31	; 49
    4422:	9a e2       	ldi	r25, 0x2A	; 42
    4424:	0e 94 3e 14 	call	0x287c	; 0x287c <sendUSBLine>
	sendUSBLine("+=======+");
    4428:	84 ec       	ldi	r24, 0xC4	; 196
    442a:	99 e2       	ldi	r25, 0x29	; 41
    442c:	0e 94 3e 14 	call	0x287c	; 0x287c <sendUSBLine>
	sendUSBLine("| DRONE | Version " STRINGIFY_EXPANDED(SW_VERSION));
    4430:	8e ec       	ldi	r24, 0xCE	; 206
    4432:	99 e2       	ldi	r25, 0x29	; 41
    4434:	0e 94 3e 14 	call	0x287c	; 0x287c <sendUSBLine>
	sendUSBLine("+=======+");
    4438:	84 ec       	ldi	r24, 0xC4	; 196
    443a:	99 e2       	ldi	r25, 0x29	; 41
    443c:	0e 94 3e 14 	call	0x287c	; 0x287c <sendUSBLine>
	sendDBGLine("");
    4440:	81 e3       	ldi	r24, 0x31	; 49
    4442:	9a e2       	ldi	r25, 0x2A	; 42
    4444:	0e 94 a5 10 	call	0x214a	; 0x214a <sendDBGLine>
	sendDBGLine("+=======+");
    4448:	84 ec       	ldi	r24, 0xC4	; 196
    444a:	99 e2       	ldi	r25, 0x29	; 41
    444c:	0e 94 a5 10 	call	0x214a	; 0x214a <sendDBGLine>
	sendDBGLine("| DRONE | Version " STRINGIFY_EXPANDED(SW_VERSION));
    4450:	8e ec       	ldi	r24, 0xCE	; 206
    4452:	99 e2       	ldi	r25, 0x29	; 41
    4454:	0e 94 a5 10 	call	0x214a	; 0x214a <sendDBGLine>
	sendDBGLine("+=======+");
    4458:	84 ec       	ldi	r24, 0xC4	; 196
    445a:	99 e2       	ldi	r25, 0x29	; 41
    445c:	0e 94 a5 10 	call	0x214a	; 0x214a <sendDBGLine>
	
	// Set the LED color:
	setLEDValue(global_header.red_percent, global_header.green_percent, global_header.blue_percent);
    4460:	40 91 86 2c 	lds	r20, 0x2C86
    4464:	60 91 87 2c 	lds	r22, 0x2C87
    4468:	80 91 85 2c 	lds	r24, 0x2C85
    446c:	0e 94 28 13 	call	0x2650	; 0x2650 <setLEDValue>
	
	// Initialize the button handler:
	wdt_reset();
    4470:	a8 95       	wdr
	if (button_handler_init != NULL) {
    4472:	e0 91 75 2c 	lds	r30, 0x2C75
    4476:	f0 91 76 2c 	lds	r31, 0x2C76
    447a:	30 97       	sbiw	r30, 0x00	; 0
    447c:	21 f0       	breq	.+8      	; 0x4486 <main+0x1b8>
		button_handler_init(&ccc);
    447e:	8d e0       	ldi	r24, 0x0D	; 13
    4480:	9d e2       	ldi	r25, 0x2D	; 45
    4482:	09 95       	icall
    4484:	04 c0       	rjmp	.+8      	; 0x448e <main+0x1c0>
	}
	else
	{
		sendDBGLine("!button_handler_init == null!");
    4486:	87 ee       	ldi	r24, 0xE7	; 231
    4488:	99 e2       	ldi	r25, 0x29	; 41
    448a:	0e 94 a5 10 	call	0x214a	; 0x214a <sendDBGLine>
	}		
	applyBTSettings();
    448e:	52 de       	rcall	.-860    	; 0x4134 <applyBTSettings>

	// Start the timeouts:
	startTimeout(&buttonSampleTimeout, BUTTON_SAMPLE_TIMEOUT_MS);
    4490:	41 e0       	ldi	r20, 0x01	; 1
    4492:	50 e0       	ldi	r21, 0x00	; 0
    4494:	60 e0       	ldi	r22, 0x00	; 0
    4496:	70 e0       	ldi	r23, 0x00	; 0
    4498:	ce 01       	movw	r24, r28
    449a:	01 96       	adiw	r24, 0x01	; 1
    449c:	0e 94 5f 13 	call	0x26be	; 0x26be <startTimeout>
	WatchdogPet();
    44a0:	0e 94 c6 14 	call	0x298c	; 0x298c <WatchdogPet>
	
	startTimeout(&joystickSampleTimeout, JOYSTICK_SAMPLE_TIMEOUT_MS);
    44a4:	45 e0       	ldi	r20, 0x05	; 5
    44a6:	50 e0       	ldi	r21, 0x00	; 0
    44a8:	60 e0       	ldi	r22, 0x00	; 0
    44aa:	70 e0       	ldi	r23, 0x00	; 0
    44ac:	ce 01       	movw	r24, r28
    44ae:	09 96       	adiw	r24, 0x09	; 9
    44b0:	0e 94 5f 13 	call	0x26be	; 0x26be <startTimeout>
	WatchdogPet();
    44b4:	0e 94 c6 14 	call	0x298c	; 0x298c <WatchdogPet>
	
	startTimeout(&debugReportTimeout, DEBUG_REPORT_TIMEOUT_MS);
    44b8:	48 ee       	ldi	r20, 0xE8	; 232
    44ba:	53 e0       	ldi	r21, 0x03	; 3
    44bc:	60 e0       	ldi	r22, 0x00	; 0
    44be:	70 e0       	ldi	r23, 0x00	; 0
    44c0:	ce 01       	movw	r24, r28
    44c2:	49 96       	adiw	r24, 0x19	; 25
    44c4:	0e 94 5f 13 	call	0x26be	; 0x26be <startTimeout>
	WatchdogPet();
    44c8:	0e 94 c6 14 	call	0x298c	; 0x298c <WatchdogPet>
	
	startTimeout(&batteryCheckTimeout, BATTERY_CHECK_TIMEOUT_MS);
    44cc:	48 ee       	ldi	r20, 0xE8	; 232
    44ce:	53 e0       	ldi	r21, 0x03	; 3
    44d0:	60 e0       	ldi	r22, 0x00	; 0
    44d2:	70 e0       	ldi	r23, 0x00	; 0
    44d4:	ce 01       	movw	r24, r28
    44d6:	81 96       	adiw	r24, 0x21	; 33
    44d8:	0e 94 5f 13 	call	0x26be	; 0x26be <startTimeout>
	WatchdogPet();
    44dc:	0e 94 c6 14 	call	0x298c	; 0x298c <WatchdogPet>
	
	startTimeout(&powerOffUnused, POWER_OFF_UNUSED_MS);
    44e0:	40 ee       	ldi	r20, 0xE0	; 224
    44e2:	53 e9       	ldi	r21, 0x93	; 147
    44e4:	64 e0       	ldi	r22, 0x04	; 4
    44e6:	70 e0       	ldi	r23, 0x00	; 0
    44e8:	ce 01       	movw	r24, r28
    44ea:	89 96       	adiw	r24, 0x29	; 41
    44ec:	0e 94 5f 13 	call	0x26be	; 0x26be <startTimeout>
	WatchdogPet();
    44f0:	0e 94 c6 14 	call	0x298c	; 0x298c <WatchdogPet>
	
	// Except the poweroff timeout:
	cancelTimeout(&powerOffTimeout);
    44f4:	ce 01       	movw	r24, r28
    44f6:	41 96       	adiw	r24, 0x11	; 17
    44f8:	0e 94 af 13 	call	0x275e	; 0x275e <cancelTimeout>
	
	// Main loop:
	sendDBGLine("Entering Main loop");
    44fc:	85 e0       	ldi	r24, 0x05	; 5
    44fe:	9a e2       	ldi	r25, 0x2A	; 42
    4500:	0e 94 a5 10 	call	0x214a	; 0x214a <sendDBGLine>
	struct Timeout powerOffTimeout;
	struct Timeout debugReportTimeout;
	struct Timeout batteryCheckTimeout;
	struct Timeout powerOffUnused; 
	uint8_t i; // temporary variable.
	bool possiblyPoweringOff = false;
    4504:	a1 2c       	mov	r10, r1

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	sleep_set_mode(PROGMEM_READ_BYTE(&sleepmgr_configs[sleep_mode-1]));
    4506:	ef ee       	ldi	r30, 0xEF	; 239
    4508:	f1 e0       	ldi	r31, 0x01	; 1
    450a:	b4 90       	lpm	r11, Z
						button_handler((enum ButtonName)i, buttons[i].state);
					}
					
					//Only send 1 B_START pressed message for the press event, 
					//  and filter all subsequent pressed messages until released
					if( B_START==i && buttons[B_START].state == BUTTON_PRESSED)
    450c:	0f 2e       	mov	r0, r31
    450e:	f2 e2       	ldi	r31, 0x22	; 34
    4510:	ef 2e       	mov	r14, r31
    4512:	f0 e2       	ldi	r31, 0x20	; 32
    4514:	ff 2e       	mov	r15, r31
    4516:	f0 2d       	mov	r31, r0
	
	// Main loop:
	sendDBGLine("Entering Main loop");
	while(1) {
		// Go to sleep if there aren't any pending timeouts; wait for the systick to wake us.
		if (!checkTimeout(&buttonSampleTimeout) && !checkTimeout(&joystickSampleTimeout) && !checkTimeout(&batteryCheckTimeout)) {
    4518:	ce 01       	movw	r24, r28
    451a:	01 96       	adiw	r24, 0x01	; 1
    451c:	0e 94 78 13 	call	0x26f0	; 0x26f0 <checkTimeout>
    4520:	81 11       	cpse	r24, r1
    4522:	1c c0       	rjmp	.+56     	; 0x455c <main+0x28e>
    4524:	ce 01       	movw	r24, r28
    4526:	09 96       	adiw	r24, 0x09	; 9
    4528:	0e 94 78 13 	call	0x26f0	; 0x26f0 <checkTimeout>
    452c:	81 11       	cpse	r24, r1
    452e:	16 c0       	rjmp	.+44     	; 0x455c <main+0x28e>
    4530:	ce 01       	movw	r24, r28
    4532:	81 96       	adiw	r24, 0x21	; 33
    4534:	0e 94 78 13 	call	0x26f0	; 0x26f0 <checkTimeout>
    4538:	81 11       	cpse	r24, r1
    453a:	10 c0       	rjmp	.+32     	; 0x455c <main+0x28e>
    453c:	e8 e4       	ldi	r30, 0x48	; 72
    453e:	f0 e0       	ldi	r31, 0x00	; 0
    4540:	80 81       	ld	r24, Z
    4542:	81 7f       	andi	r24, 0xF1	; 241
    4544:	8b 29       	or	r24, r11
    4546:	80 83       	st	Z, r24
	sleep_enable();
    4548:	80 81       	ld	r24, Z
    454a:	81 60       	ori	r24, 0x01	; 1
    454c:	80 83       	st	Z, r24

	cpu_irq_enable();
    454e:	78 94       	sei
	sleep_enter();
    4550:	88 95       	sleep

	sleep_disable();
    4552:	e8 e4       	ldi	r30, 0x48	; 72
    4554:	f0 e0       	ldi	r31, 0x00	; 0
    4556:	80 81       	ld	r24, Z
    4558:	8e 7f       	andi	r24, 0xFE	; 254
    455a:	80 83       	st	Z, r24
			sleepmgr_sleep(SLEEPMGR_IDLE);	
		}		
		
		// Pet the WDT:
		WatchdogPet();
    455c:	0e 94 c6 14 	call	0x298c	; 0x298c <WatchdogPet>
		WatchdogTaskRunning(TASK_MAIN);
    4560:	80 e0       	ldi	r24, 0x00	; 0
    4562:	0e 94 dd 14 	call	0x29ba	; 0x29ba <WatchdogTaskRunning>
		sendDBGLine("w1");
    4566:	88 e1       	ldi	r24, 0x18	; 24
    4568:	9a e2       	ldi	r25, 0x2A	; 42
    456a:	0e 94 a5 10 	call	0x214a	; 0x214a <sendDBGLine>
		
		if (checkTimeout(&batteryCheckTimeout)) {
    456e:	ce 01       	movw	r24, r28
    4570:	81 96       	adiw	r24, 0x21	; 33
    4572:	0e 94 78 13 	call	0x26f0	; 0x26f0 <checkTimeout>
    4576:	88 23       	and	r24, r24
    4578:	d9 f0       	breq	.+54     	; 0x45b0 <main+0x2e2>
			startTimeout(&batteryCheckTimeout, BATTERY_CHECK_TIMEOUT_MS);
    457a:	48 ee       	ldi	r20, 0xE8	; 232
    457c:	53 e0       	ldi	r21, 0x03	; 3
    457e:	60 e0       	ldi	r22, 0x00	; 0
    4580:	70 e0       	ldi	r23, 0x00	; 0
    4582:	ce 01       	movw	r24, r28
    4584:	81 96       	adiw	r24, 0x21	; 33
    4586:	0e 94 5f 13 	call	0x26be	; 0x26be <startTimeout>
			
			//Change the pulse state:
			pulse = !pulse;
    458a:	90 91 0c 2d 	lds	r25, 0x2D0C
    458e:	81 e0       	ldi	r24, 0x01	; 1
    4590:	89 27       	eor	r24, r25
    4592:	80 93 0c 2d 	sts	0x2D0C, r24
			
			//Time to pulse the status?
			if (pulse) {
    4596:	88 23       	and	r24, r24
    4598:	19 f0       	breq	.+6      	; 0x45a0 <main+0x2d2>
				showChargingIndicators();
    459a:	0e 94 d6 02 	call	0x5ac	; 0x5ac <showChargingIndicators>
    459e:	08 c0       	rjmp	.+16     	; 0x45b0 <main+0x2e2>
			}
			// Else it must be time to show the users color.
			else {
				setLEDValue(global_header.red_percent, global_header.green_percent, global_header.blue_percent);
    45a0:	40 91 86 2c 	lds	r20, 0x2C86
    45a4:	60 91 87 2c 	lds	r22, 0x2C87
    45a8:	80 91 85 2c 	lds	r24, 0x2C85
    45ac:	0e 94 28 13 	call	0x2650	; 0x2650 <setLEDValue>
			}				
		}
		sendDBGLine("w2");
    45b0:	8b e1       	ldi	r24, 0x1B	; 27
    45b2:	9a e2       	ldi	r25, 0x2A	; 42
    45b4:	0e 94 a5 10 	call	0x214a	; 0x214a <sendDBGLine>
		// Is it time to sample the buttons?
		if (checkTimeout(&buttonSampleTimeout)) {
    45b8:	ce 01       	movw	r24, r28
    45ba:	01 96       	adiw	r24, 0x01	; 1
    45bc:	0e 94 78 13 	call	0x26f0	; 0x26f0 <checkTimeout>
    45c0:	88 23       	and	r24, r24
    45c2:	09 f4       	brne	.+2      	; 0x45c6 <main+0x2f8>
    45c4:	b2 c0       	rjmp	.+356    	; 0x472a <main+0x45c>
			startTimeout(&buttonSampleTimeout, BUTTON_SAMPLE_TIMEOUT_MS);
    45c6:	41 e0       	ldi	r20, 0x01	; 1
    45c8:	50 e0       	ldi	r21, 0x00	; 0
    45ca:	60 e0       	ldi	r22, 0x00	; 0
    45cc:	70 e0       	ldi	r23, 0x00	; 0
    45ce:	ce 01       	movw	r24, r28
    45d0:	01 96       	adiw	r24, 0x01	; 1
    45d2:	0e 94 5f 13 	call	0x26be	; 0x26be <startTimeout>
    45d6:	02 e0       	ldi	r16, 0x02	; 2
    45d8:	10 e2       	ldi	r17, 0x20	; 32
    45da:	0f 2e       	mov	r0, r31
    45dc:	f1 e0       	ldi	r31, 0x01	; 1
    45de:	cf 2e       	mov	r12, r31
    45e0:	f0 e2       	ldi	r31, 0x20	; 32
    45e2:	df 2e       	mov	r13, r31
    45e4:	f0 2d       	mov	r31, r0
			
			// Scan the current state of each button:
			for (i = 0; i < NUM_BUTTONS; i++) {
    45e6:	71 2c       	mov	r7, r1
				// Is the button currently released, but being pressed?
				if ((buttons[i].state == BUTTON_RELEASED) && buttonActivated((enum ButtonName)i)) {
    45e8:	f8 01       	movw	r30, r16
    45ea:	80 81       	ld	r24, Z
    45ec:	81 11       	cpse	r24, r1
    45ee:	0e c0       	rjmp	.+28     	; 0x460c <main+0x33e>
    45f0:	87 2d       	mov	r24, r7
    45f2:	0e 94 ee 03 	call	0x7dc	; 0x7dc <buttonActivated>
    45f6:	88 23       	and	r24, r24
    45f8:	29 f0       	breq	.+10     	; 0x4604 <main+0x336>
					// Then increment the debounce counter:
					buttons[i].debounce_counter++;
    45fa:	d6 01       	movw	r26, r12
    45fc:	8c 91       	ld	r24, X
    45fe:	8f 5f       	subi	r24, 0xFF	; 255
    4600:	8c 93       	st	X, r24
    4602:	10 c0       	rjmp	.+32     	; 0x4624 <main+0x356>
				}
				// Or is the button currently pressed, but being released?
				else if ((buttons[i].state != BUTTON_RELEASED) && !buttonActivated((enum ButtonName)i)) {
    4604:	f8 01       	movw	r30, r16
    4606:	80 81       	ld	r24, Z
    4608:	88 23       	and	r24, r24
    460a:	51 f0       	breq	.+20     	; 0x4620 <main+0x352>
    460c:	87 2d       	mov	r24, r7
    460e:	0e 94 ee 03 	call	0x7dc	; 0x7dc <buttonActivated>
    4612:	81 11       	cpse	r24, r1
    4614:	05 c0       	rjmp	.+10     	; 0x4620 <main+0x352>
					// Then increment the debounce counter:
					buttons[i].debounce_counter++;
    4616:	d6 01       	movw	r26, r12
    4618:	8c 91       	ld	r24, X
    461a:	8f 5f       	subi	r24, 0xFF	; 255
    461c:	8c 93       	st	X, r24
    461e:	02 c0       	rjmp	.+4      	; 0x4624 <main+0x356>
				}
				// Otherwise reset the debounce counter:
				else {
					buttons[i].debounce_counter = 0;
    4620:	f6 01       	movw	r30, r12
    4622:	10 82       	st	Z, r1
		// Is it time to sample the buttons?
		if (checkTimeout(&buttonSampleTimeout)) {
			startTimeout(&buttonSampleTimeout, BUTTON_SAMPLE_TIMEOUT_MS);
			
			// Scan the current state of each button:
			for (i = 0; i < NUM_BUTTONS; i++) {
    4624:	73 94       	inc	r7
    4626:	0c 5f       	subi	r16, 0xFC	; 252
    4628:	1f 4f       	sbci	r17, 0xFF	; 255
    462a:	f4 e0       	ldi	r31, 0x04	; 4
    462c:	cf 0e       	add	r12, r31
    462e:	d1 1c       	adc	r13, r1
    4630:	2e e0       	ldi	r18, 0x0E	; 14
    4632:	72 12       	cpse	r7, r18
    4634:	d9 cf       	rjmp	.-78     	; 0x45e8 <main+0x31a>
    4636:	cc 24       	eor	r12, r12
    4638:	c3 94       	inc	r12
    463a:	d1 2c       	mov	r13, r1
					buttons[i].debounce_counter = 0;

					// Is the button's state currently released?
					if (buttons[i].state == BUTTON_RELEASED) {
						// Then it needs to change to pressed:
						buttons[i].state = BUTTON_PRESSED;
    463c:	99 24       	eor	r9, r9
    463e:	93 94       	inc	r9
    4640:	02 c0       	rjmp	.+4      	; 0x4646 <main+0x378>
    4642:	d3 94       	inc	r13
    4644:	c3 94       	inc	r12
			}
			
			// Handle button state changes:
			for (i = 0; i < NUM_BUTTONS; i++) {
				// Is the debounce counter pass its threshold?
				if (buttons[i].debounce_counter >= DEBOUNCE_PERIOD) {
    4646:	0d 2d       	mov	r16, r13
    4648:	10 e0       	ldi	r17, 0x00	; 0
    464a:	f8 01       	movw	r30, r16
    464c:	ee 0f       	add	r30, r30
    464e:	ff 1f       	adc	r31, r31
    4650:	ee 0f       	add	r30, r30
    4652:	ff 1f       	adc	r31, r31
    4654:	e0 50       	subi	r30, 0x00	; 0
    4656:	f0 4e       	sbci	r31, 0xE0	; 224
    4658:	81 81       	ldd	r24, Z+1	; 0x01
    465a:	84 30       	cpi	r24, 0x04	; 4
    465c:	08 f4       	brcc	.+2      	; 0x4660 <main+0x392>
    465e:	49 c0       	rjmp	.+146    	; 0x46f2 <main+0x424>
					// Then we need to send a press/release event.
					
					// Clear the debounce counter:
					buttons[i].debounce_counter = 0;
    4660:	f8 01       	movw	r30, r16
    4662:	ee 0f       	add	r30, r30
    4664:	ff 1f       	adc	r31, r31
    4666:	ee 0f       	add	r30, r30
    4668:	ff 1f       	adc	r31, r31
    466a:	e0 50       	subi	r30, 0x00	; 0
    466c:	f0 4e       	sbci	r31, 0xE0	; 224
    466e:	11 82       	std	Z+1, r1	; 0x01

					// Is the button's state currently released?
					if (buttons[i].state == BUTTON_RELEASED) {
    4670:	82 81       	ldd	r24, Z+2	; 0x02
    4672:	81 11       	cpse	r24, r1
    4674:	09 c0       	rjmp	.+18     	; 0x4688 <main+0x3ba>
						// Then it needs to change to pressed:
						buttons[i].state = BUTTON_PRESSED;
    4676:	f8 01       	movw	r30, r16
    4678:	ee 0f       	add	r30, r30
    467a:	ff 1f       	adc	r31, r31
    467c:	ee 0f       	add	r30, r30
    467e:	ff 1f       	adc	r31, r31
    4680:	e0 50       	subi	r30, 0x00	; 0
    4682:	f0 4e       	sbci	r31, 0xE0	; 224
    4684:	92 82       	std	Z+2, r9	; 0x02
    4686:	08 c0       	rjmp	.+16     	; 0x4698 <main+0x3ca>
					}
					else {
						// Otherwise it needs to change to release:
						buttons[i].state = BUTTON_RELEASED;
    4688:	f8 01       	movw	r30, r16
    468a:	ee 0f       	add	r30, r30
    468c:	ff 1f       	adc	r31, r31
    468e:	ee 0f       	add	r30, r30
    4690:	ff 1f       	adc	r31, r31
    4692:	e0 50       	subi	r30, 0x00	; 0
    4694:	f0 4e       	sbci	r31, 0xE0	; 224
    4696:	12 82       	std	Z+2, r1	; 0x02
					}
					
					// At this point the button has just changed states.
					// Time to notify the device/computer.
					if (button_handler != NULL) {
    4698:	80 91 77 2c 	lds	r24, 0x2C77
    469c:	90 91 78 2c 	lds	r25, 0x2C78
    46a0:	89 2b       	or	r24, r25
    46a2:	b9 f0       	breq	.+46     	; 0x46d2 <main+0x404>
						startTimeout(&powerOffUnused, POWER_OFF_UNUSED_MS);
    46a4:	40 ee       	ldi	r20, 0xE0	; 224
    46a6:	53 e9       	ldi	r21, 0x93	; 147
    46a8:	64 e0       	ldi	r22, 0x04	; 4
    46aa:	70 e0       	ldi	r23, 0x00	; 0
    46ac:	ce 01       	movw	r24, r28
    46ae:	89 96       	adiw	r24, 0x29	; 41
    46b0:	0e 94 5f 13 	call	0x26be	; 0x26be <startTimeout>
						button_handler((enum ButtonName)i, buttons[i].state);
    46b4:	d8 01       	movw	r26, r16
    46b6:	aa 0f       	add	r26, r26
    46b8:	bb 1f       	adc	r27, r27
    46ba:	aa 0f       	add	r26, r26
    46bc:	bb 1f       	adc	r27, r27
    46be:	a0 50       	subi	r26, 0x00	; 0
    46c0:	b0 4e       	sbci	r27, 0xE0	; 224
    46c2:	e0 91 77 2c 	lds	r30, 0x2C77
    46c6:	f0 91 78 2c 	lds	r31, 0x2C78
    46ca:	12 96       	adiw	r26, 0x02	; 2
    46cc:	6c 91       	ld	r22, X
    46ce:	8d 2d       	mov	r24, r13
    46d0:	09 95       	icall
					}
					
					//Only send 1 B_START pressed message for the press event, 
					//  and filter all subsequent pressed messages until released
					if( B_START==i && buttons[B_START].state == BUTTON_PRESSED)
    46d2:	88 e0       	ldi	r24, 0x08	; 8
    46d4:	d8 12       	cpse	r13, r24
    46d6:	0d c0       	rjmp	.+26     	; 0x46f2 <main+0x424>
    46d8:	d7 01       	movw	r26, r14
    46da:	8c 91       	ld	r24, X
    46dc:	81 30       	cpi	r24, 0x01	; 1
    46de:	09 f0       	breq	.+2      	; 0x46e2 <main+0x414>
    46e0:	b0 cf       	rjmp	.-160    	; 0x4642 <main+0x374>
					{
						buttons[B_START].state == BUTTON_LONG_PRESS;
						button_handler( B_START, BUTTON_RELEASED );  //send message with B_START released
    46e2:	e0 91 77 2c 	lds	r30, 0x2C77
    46e6:	f0 91 78 2c 	lds	r31, 0x2C78
    46ea:	60 e0       	ldi	r22, 0x00	; 0
    46ec:	88 e0       	ldi	r24, 0x08	; 8
    46ee:	09 95       	icall
    46f0:	a8 cf       	rjmp	.-176    	; 0x4642 <main+0x374>
					buttons[i].debounce_counter = 0;
				}
			}
			
			// Handle button state changes:
			for (i = 0; i < NUM_BUTTONS; i++) {
    46f2:	bd e0       	ldi	r27, 0x0D	; 13
    46f4:	bc 15       	cp	r27, r12
    46f6:	08 f0       	brcs	.+2      	; 0x46fa <main+0x42c>
    46f8:	a4 cf       	rjmp	.-184    	; 0x4642 <main+0x374>
				}
			
			}
			
			// Start the power off timeout if the start button was just pressed:
			if (!possiblyPoweringOff && buttons[B_START].state != BUTTON_RELEASED ) {
    46fa:	a1 10       	cpse	r10, r1
    46fc:	dc c0       	rjmp	.+440    	; 0x48b6 <main+0x5e8>
    46fe:	f7 01       	movw	r30, r14
    4700:	80 81       	ld	r24, Z
    4702:	88 23       	and	r24, r24
    4704:	91 f0       	breq	.+36     	; 0x472a <main+0x45c>
				possiblyPoweringOff = true;
				startTimeout(&powerOffTimeout, ((uint32_t)global_header.sleep_delay) * 50);
    4706:	20 91 84 2c 	lds	r18, 0x2C84
    470a:	30 e0       	ldi	r19, 0x00	; 0
    470c:	a2 e3       	ldi	r26, 0x32	; 50
    470e:	b0 e0       	ldi	r27, 0x00	; 0
    4710:	49 d1       	rcall	.+658    	; 0x49a4 <__umulhisi3>
    4712:	ab 01       	movw	r20, r22
    4714:	bc 01       	movw	r22, r24
    4716:	ce 01       	movw	r24, r28
    4718:	41 96       	adiw	r24, 0x11	; 17
    471a:	0e 94 5f 13 	call	0x26be	; 0x26be <startTimeout>
    471e:	cb c0       	rjmp	.+406    	; 0x48b6 <main+0x5e8>
			}
						
			// Cancel the power off timeout if the start button was released:
			if (possiblyPoweringOff && buttons[B_START].state == BUTTON_RELEASED) {
				possiblyPoweringOff = false;
				cancelTimeout(&powerOffTimeout);
    4720:	ce 01       	movw	r24, r28
    4722:	41 96       	adiw	r24, 0x11	; 17
    4724:	0e 94 af 13 	call	0x275e	; 0x275e <cancelTimeout>
				startTimeout(&powerOffTimeout, ((uint32_t)global_header.sleep_delay) * 50);
			}
						
			// Cancel the power off timeout if the start button was released:
			if (possiblyPoweringOff && buttons[B_START].state == BUTTON_RELEASED) {
				possiblyPoweringOff = false;
    4728:	a1 2c       	mov	r10, r1
				cancelTimeout(&powerOffTimeout);
			}
			
		}
		sendDBGLine("w3");
    472a:	8e e1       	ldi	r24, 0x1E	; 30
    472c:	9a e2       	ldi	r25, 0x2A	; 42
    472e:	0e 94 a5 10 	call	0x214a	; 0x214a <sendDBGLine>
		if (checkTimeout(&joystickSampleTimeout)) {
    4732:	ce 01       	movw	r24, r28
    4734:	09 96       	adiw	r24, 0x09	; 9
    4736:	0e 94 78 13 	call	0x26f0	; 0x26f0 <checkTimeout>
    473a:	88 23       	and	r24, r24
    473c:	d9 f1       	breq	.+118    	; 0x47b4 <main+0x4e6>
			startTimeout(&joystickSampleTimeout, JOYSTICK_SAMPLE_TIMEOUT_MS);
    473e:	45 e0       	ldi	r20, 0x05	; 5
    4740:	50 e0       	ldi	r21, 0x00	; 0
    4742:	60 e0       	ldi	r22, 0x00	; 0
    4744:	70 e0       	ldi	r23, 0x00	; 0
    4746:	ce 01       	movw	r24, r28
    4748:	09 96       	adiw	r24, 0x09	; 9
    474a:	0e 94 5f 13 	call	0x26be	; 0x26be <startTimeout>
    474e:	09 e3       	ldi	r16, 0x39	; 57
    4750:	10 e2       	ldi	r17, 0x20	; 32
			
			// Sample each of the joysticks:
			for (i = 0 ; i < NUM_JOYSTICKS; i++) {
    4752:	d1 2c       	mov	r13, r1
				joysticks[i].previous_x = joysticks[i].current_x;
    4754:	d8 01       	movw	r26, r16
    4756:	19 96       	adiw	r26, 0x09	; 9
    4758:	8d 91       	ld	r24, X+
    475a:	9c 91       	ld	r25, X
    475c:	1a 97       	sbiw	r26, 0x0a	; 10
    475e:	15 96       	adiw	r26, 0x05	; 5
    4760:	8d 93       	st	X+, r24
    4762:	9c 93       	st	X, r25
    4764:	16 97       	sbiw	r26, 0x06	; 6
static JoystickHandler joystick_handler = NULL;

// Declarations:
bool pulse, bios, turnedOn;

int main (void)
    4766:	f8 01       	movw	r30, r16
    4768:	31 97       	sbiw	r30, 0x01	; 1
			startTimeout(&joystickSampleTimeout, JOYSTICK_SAMPLE_TIMEOUT_MS);
			
			// Sample each of the joysticks:
			for (i = 0 ; i < NUM_JOYSTICKS; i++) {
				joysticks[i].previous_x = joysticks[i].current_x;
				joysticks[i].current_x  = sampleAnalogChannel(joysticks[i].adc_channel_x);
    476a:	80 81       	ld	r24, Z
    476c:	0e 94 3d 01 	call	0x27a	; 0x27a <sampleAnalogChannel>
    4770:	f8 01       	movw	r30, r16
    4772:	81 87       	std	Z+9, r24	; 0x09
    4774:	92 87       	std	Z+10, r25	; 0x0a
				
				joysticks[i].previous_y = joysticks[i].current_y;
    4776:	23 85       	ldd	r18, Z+11	; 0x0b
    4778:	34 85       	ldd	r19, Z+12	; 0x0c
    477a:	27 83       	std	Z+7, r18	; 0x07
    477c:	30 87       	std	Z+8, r19	; 0x08
				joysticks[i].current_y  = sampleAnalogChannel(joysticks[i].adc_channel_y);
    477e:	80 81       	ld	r24, Z
    4780:	0e 94 3d 01 	call	0x27a	; 0x27a <sampleAnalogChannel>
    4784:	d8 01       	movw	r26, r16
    4786:	1b 96       	adiw	r26, 0x0b	; 11
    4788:	8d 93       	st	X+, r24
    478a:	9c 93       	st	X, r25
    478c:	1c 97       	sbiw	r26, 0x0c	; 12

				if (joystick_handler != NULL) {
    478e:	e0 91 79 2c 	lds	r30, 0x2C79
    4792:	f0 91 7a 2c 	lds	r31, 0x2C7A
    4796:	30 97       	sbiw	r30, 0x00	; 0
    4798:	39 f0       	breq	.+14     	; 0x47a8 <main+0x4da>
					joystick_handler((enum JoystickName)i, joysticks[i].current_x, joysticks[i].current_y);
    479a:	19 96       	adiw	r26, 0x09	; 9
    479c:	6d 91       	ld	r22, X+
    479e:	7c 91       	ld	r23, X
    47a0:	1a 97       	sbiw	r26, 0x0a	; 10
    47a2:	ac 01       	movw	r20, r24
    47a4:	8d 2d       	mov	r24, r13
    47a6:	09 95       	icall
		sendDBGLine("w3");
		if (checkTimeout(&joystickSampleTimeout)) {
			startTimeout(&joystickSampleTimeout, JOYSTICK_SAMPLE_TIMEOUT_MS);
			
			// Sample each of the joysticks:
			for (i = 0 ; i < NUM_JOYSTICKS; i++) {
    47a8:	d3 94       	inc	r13
    47aa:	02 5f       	subi	r16, 0xF2	; 242
    47ac:	1f 4f       	sbci	r17, 0xFF	; 255
    47ae:	b2 e0       	ldi	r27, 0x02	; 2
    47b0:	db 12       	cpse	r13, r27
    47b2:	d0 cf       	rjmp	.-96     	; 0x4754 <main+0x486>
		}
		
		// Check if the start button has been held long enough to turn the device off:
		// Check if controller has been sitting idle long enough to turn the device off:
		
		if( checkTimeout(&powerOffTimeout) || checkTimeout(&powerOffUnused) )
    47b4:	ce 01       	movw	r24, r28
    47b6:	41 96       	adiw	r24, 0x11	; 17
    47b8:	0e 94 78 13 	call	0x26f0	; 0x26f0 <checkTimeout>
    47bc:	81 11       	cpse	r24, r1
    47be:	06 c0       	rjmp	.+12     	; 0x47cc <main+0x4fe>
    47c0:	ce 01       	movw	r24, r28
    47c2:	89 96       	adiw	r24, 0x29	; 41
    47c4:	0e 94 78 13 	call	0x26f0	; 0x26f0 <checkTimeout>
    47c8:	88 23       	and	r24, r24
    47ca:	e1 f0       	breq	.+56     	; 0x4804 <main+0x536>
		{
			cancelTimeout(&powerOffTimeout);
    47cc:	ce 01       	movw	r24, r28
    47ce:	41 96       	adiw	r24, 0x11	; 17
    47d0:	0e 94 af 13 	call	0x275e	; 0x275e <cancelTimeout>
			cancelTimeout(&powerOffUnused);
    47d4:	ce 01       	movw	r24, r28
    47d6:	89 96       	adiw	r24, 0x29	; 41
    47d8:	0e 94 af 13 	call	0x275e	; 0x275e <cancelTimeout>
			setLEDValue(0, 0, 0);
    47dc:	40 e0       	ldi	r20, 0x00	; 0
    47de:	60 e0       	ldi	r22, 0x00	; 0
    47e0:	80 e0       	ldi	r24, 0x00	; 0
    47e2:	0e 94 28 13 	call	0x2650	; 0x2650 <setLEDValue>
			powerOff(global_header.powerOffSoftware);
    47e6:	80 91 08 2d 	lds	r24, 0x2D08
    47ea:	88 1f       	adc	r24, r24
    47ec:	88 27       	eor	r24, r24
    47ee:	88 1f       	adc	r24, r24
    47f0:	90 91 09 2d 	lds	r25, 0x2D09
    47f4:	9f 73       	andi	r25, 0x3F	; 63
    47f6:	99 0f       	add	r25, r25
    47f8:	98 2b       	or	r25, r24
    47fa:	81 e0       	ldi	r24, 0x01	; 1
    47fc:	09 f4       	brne	.+2      	; 0x4800 <main+0x532>
    47fe:	80 e0       	ldi	r24, 0x00	; 0
    4800:	0e 94 67 11 	call	0x22ce	; 0x22ce <powerOff>
		}
		
#if (DEBUG == 1)		
		if (checkTimeout(&debugReportTimeout)) {
    4804:	ce 01       	movw	r24, r28
    4806:	49 96       	adiw	r24, 0x19	; 25
    4808:	0e 94 78 13 	call	0x26f0	; 0x26f0 <checkTimeout>
    480c:	88 23       	and	r24, r24
    480e:	09 f4       	brne	.+2      	; 0x4812 <main+0x544>
    4810:	4b c0       	rjmp	.+150    	; 0x48a8 <main+0x5da>
			startTimeout(&debugReportTimeout, DEBUG_REPORT_TIMEOUT_MS);
    4812:	48 ee       	ldi	r20, 0xE8	; 232
    4814:	53 e0       	ldi	r21, 0x03	; 3
    4816:	60 e0       	ldi	r22, 0x00	; 0
    4818:	70 e0       	ldi	r23, 0x00	; 0
    481a:	ce 01       	movw	r24, r28
    481c:	49 96       	adiw	r24, 0x19	; 25
    481e:	0e 94 5f 13 	call	0x26be	; 0x26be <startTimeout>
    4822:	0f 2e       	mov	r0, r31
    4824:	f2 e4       	ldi	r31, 0x42	; 66
    4826:	cf 2e       	mov	r12, r31
    4828:	f0 e2       	ldi	r31, 0x20	; 32
    482a:	df 2e       	mov	r13, r31
    482c:	f0 2d       	mov	r31, r0
    482e:	00 e0       	ldi	r16, 0x00	; 0
    4830:	10 e0       	ldi	r17, 0x00	; 0
			// Report each of the joysticks analog values:
			for (i = 0 ; i < NUM_JOYSTICKS; i++) {
				sendDBGString("Joystick ");
    4832:	81 e2       	ldi	r24, 0x21	; 33
    4834:	9a e2       	ldi	r25, 0x2A	; 42
    4836:	0e 94 97 10 	call	0x212e	; 0x212e <sendDBGString>
				itoa(i, debugTmpString, 10);
    483a:	4a e0       	ldi	r20, 0x0A	; 10
    483c:	50 e0       	ldi	r21, 0x00	; 0
    483e:	be 01       	movw	r22, r28
    4840:	6f 5c       	subi	r22, 0xCF	; 207
    4842:	7f 4f       	sbci	r23, 0xFF	; 255
    4844:	c8 01       	movw	r24, r16
    4846:	ed d0       	rcall	.+474    	; 0x4a22 <itoa>
				sendDBGString(debugTmpString);
    4848:	ce 01       	movw	r24, r28
    484a:	c1 96       	adiw	r24, 0x31	; 49
    484c:	0e 94 97 10 	call	0x212e	; 0x212e <sendDBGString>
				sendDBGString(" : ");
    4850:	8b e2       	ldi	r24, 0x2B	; 43
    4852:	9a e2       	ldi	r25, 0x2A	; 42
    4854:	0e 94 97 10 	call	0x212e	; 0x212e <sendDBGString>
				itoa(joysticks[i].current_x, debugTmpString, 10);
    4858:	4a e0       	ldi	r20, 0x0A	; 10
    485a:	50 e0       	ldi	r21, 0x00	; 0
    485c:	be 01       	movw	r22, r28
    485e:	6f 5c       	subi	r22, 0xCF	; 207
    4860:	7f 4f       	sbci	r23, 0xFF	; 255
    4862:	f6 01       	movw	r30, r12
    4864:	80 81       	ld	r24, Z
    4866:	91 81       	ldd	r25, Z+1	; 0x01
    4868:	dc d0       	rcall	.+440    	; 0x4a22 <itoa>
				sendDBGString(debugTmpString);
    486a:	ce 01       	movw	r24, r28
    486c:	c1 96       	adiw	r24, 0x31	; 49
    486e:	0e 94 97 10 	call	0x212e	; 0x212e <sendDBGString>
				sendDBGString(", ");
    4872:	8f e2       	ldi	r24, 0x2F	; 47
    4874:	9a e2       	ldi	r25, 0x2A	; 42
    4876:	0e 94 97 10 	call	0x212e	; 0x212e <sendDBGString>
				itoa(joysticks[i].current_y, debugTmpString, 10);
    487a:	4a e0       	ldi	r20, 0x0A	; 10
    487c:	50 e0       	ldi	r21, 0x00	; 0
    487e:	be 01       	movw	r22, r28
    4880:	6f 5c       	subi	r22, 0xCF	; 207
    4882:	7f 4f       	sbci	r23, 0xFF	; 255
    4884:	d6 01       	movw	r26, r12
    4886:	12 96       	adiw	r26, 0x02	; 2
    4888:	8d 91       	ld	r24, X+
    488a:	9c 91       	ld	r25, X
    488c:	13 97       	sbiw	r26, 0x03	; 3
    488e:	c9 d0       	rcall	.+402    	; 0x4a22 <itoa>
				sendDBGLine(debugTmpString);
    4890:	ce 01       	movw	r24, r28
    4892:	c1 96       	adiw	r24, 0x31	; 49
    4894:	0e 94 a5 10 	call	0x214a	; 0x214a <sendDBGLine>
    4898:	0f 5f       	subi	r16, 0xFF	; 255
    489a:	1f 4f       	sbci	r17, 0xFF	; 255
    489c:	be e0       	ldi	r27, 0x0E	; 14
    489e:	cb 0e       	add	r12, r27
    48a0:	d1 1c       	adc	r13, r1
		
#if (DEBUG == 1)		
		if (checkTimeout(&debugReportTimeout)) {
			startTimeout(&debugReportTimeout, DEBUG_REPORT_TIMEOUT_MS);
			// Report each of the joysticks analog values:
			for (i = 0 ; i < NUM_JOYSTICKS; i++) {
    48a2:	02 30       	cpi	r16, 0x02	; 2
    48a4:	11 05       	cpc	r17, r1
    48a6:	29 f6       	brne	.-118    	; 0x4832 <main+0x564>
				itoa(joysticks[i].current_y, debugTmpString, 10);
				sendDBGLine(debugTmpString);
			}
		}
#endif
		sendDBGLine("w5");
    48a8:	82 e3       	ldi	r24, 0x32	; 50
    48aa:	9a e2       	ldi	r25, 0x2A	; 42
    48ac:	0e 94 a5 10 	call	0x214a	; 0x214a <sendDBGLine>
		// Check for commands from the computer:
		processComm();
    48b0:	0e 94 ae 06 	call	0xd5c	; 0xd5c <processComm>
	}
    48b4:	31 ce       	rjmp	.-926    	; 0x4518 <main+0x24a>
				possiblyPoweringOff = true;
				startTimeout(&powerOffTimeout, ((uint32_t)global_header.sleep_delay) * 50);
			}
						
			// Cancel the power off timeout if the start button was released:
			if (possiblyPoweringOff && buttons[B_START].state == BUTTON_RELEASED) {
    48b6:	f7 01       	movw	r30, r14
    48b8:	80 81       	ld	r24, Z
    48ba:	88 23       	and	r24, r24
    48bc:	09 f4       	brne	.+2      	; 0x48c0 <main+0x5f2>
    48be:	30 cf       	rjmp	.-416    	; 0x4720 <main+0x452>
    48c0:	aa 24       	eor	r10, r10
    48c2:	a3 94       	inc	r10
    48c4:	32 cf       	rjmp	.-412    	; 0x472a <main+0x45c>

000048c6 <__vector_104>:
	cpu_irq_restore(flags);
}

// PORTF interrupt vector, Vector 0 is the reset vector
ISR(PORTF_INT0_vect)
{
    48c6:	1f 92       	push	r1
    48c8:	0f 92       	push	r0
    48ca:	0f b6       	in	r0, 0x3f	; 63
    48cc:	0f 92       	push	r0
    48ce:	11 24       	eor	r1, r1
    48d0:	0b b6       	in	r0, 0x3b	; 59
    48d2:	0f 92       	push	r0
    48d4:	2f 93       	push	r18
    48d6:	3f 93       	push	r19
    48d8:	4f 93       	push	r20
    48da:	5f 93       	push	r21
    48dc:	6f 93       	push	r22
    48de:	7f 93       	push	r23
    48e0:	8f 93       	push	r24
    48e2:	9f 93       	push	r25
    48e4:	af 93       	push	r26
    48e6:	bf 93       	push	r27
    48e8:	ef 93       	push	r30
    48ea:	ff 93       	push	r31

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    48ec:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    48ee:	f8 94       	cli
	flags = cpu_irq_save();
	
	// If interrupt0 flag is set, clear it
	#define INT0IF 1u<<0
	#define INT1IF 1u<<1
	if( PORTF_INTFLAGS & INT0IF )
    48f0:	80 91 ac 06 	lds	r24, 0x06AC
    48f4:	80 ff       	sbrs	r24, 0
    48f6:	03 c0       	rjmp	.+6      	; 0x48fe <__vector_104+0x38>
	{
		PORTF_INTFLAGS = INT0IF; // write-1-to-clear - to clear interrupt flag write a '1'
    48f8:	81 e0       	ldi	r24, 0x01	; 1
    48fa:	80 93 ac 06 	sts	0x06AC, r24
	}
	
	if (!turnedOn)
    48fe:	80 91 0b 2d 	lds	r24, 0x2D0B
    4902:	81 11       	cpse	r24, r1
    4904:	06 c0       	rjmp	.+12     	; 0x4912 <__vector_104+0x4c>
    4906:	61 e0       	ldi	r22, 0x01	; 1
    4908:	89 e7       	ldi	r24, 0x79	; 121
    490a:	90 e0       	ldi	r25, 0x00	; 0
    490c:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <ccp_write_io>
    4910:	ff cf       	rjmp	.-2      	; 0x4910 <__vector_104+0x4a>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    4912:	9f bf       	out	0x3f, r25	; 63
	{
		reset_do_soft_reset();
	}
	
	cpu_irq_restore(flags);
}
    4914:	ff 91       	pop	r31
    4916:	ef 91       	pop	r30
    4918:	bf 91       	pop	r27
    491a:	af 91       	pop	r26
    491c:	9f 91       	pop	r25
    491e:	8f 91       	pop	r24
    4920:	7f 91       	pop	r23
    4922:	6f 91       	pop	r22
    4924:	5f 91       	pop	r21
    4926:	4f 91       	pop	r20
    4928:	3f 91       	pop	r19
    492a:	2f 91       	pop	r18
    492c:	0f 90       	pop	r0
    492e:	0b be       	out	0x3b, r0	; 59
    4930:	0f 90       	pop	r0
    4932:	0f be       	out	0x3f, r0	; 63
    4934:	0f 90       	pop	r0
    4936:	1f 90       	pop	r1
    4938:	18 95       	reti

0000493a <__divmodhi4>:
    493a:	97 fb       	bst	r25, 7
    493c:	07 2e       	mov	r0, r23
    493e:	16 f4       	brtc	.+4      	; 0x4944 <__divmodhi4+0xa>
    4940:	00 94       	com	r0
    4942:	06 d0       	rcall	.+12     	; 0x4950 <__divmodhi4_neg1>
    4944:	77 fd       	sbrc	r23, 7
    4946:	08 d0       	rcall	.+16     	; 0x4958 <__divmodhi4_neg2>
    4948:	39 d0       	rcall	.+114    	; 0x49bc <__udivmodhi4>
    494a:	07 fc       	sbrc	r0, 7
    494c:	05 d0       	rcall	.+10     	; 0x4958 <__divmodhi4_neg2>
    494e:	3e f4       	brtc	.+14     	; 0x495e <__divmodhi4_exit>

00004950 <__divmodhi4_neg1>:
    4950:	90 95       	com	r25
    4952:	81 95       	neg	r24
    4954:	9f 4f       	sbci	r25, 0xFF	; 255
    4956:	08 95       	ret

00004958 <__divmodhi4_neg2>:
    4958:	70 95       	com	r23
    495a:	61 95       	neg	r22
    495c:	7f 4f       	sbci	r23, 0xFF	; 255

0000495e <__divmodhi4_exit>:
    495e:	08 95       	ret

00004960 <__udivmodsi4>:
    4960:	a1 e2       	ldi	r26, 0x21	; 33
    4962:	1a 2e       	mov	r1, r26
    4964:	aa 1b       	sub	r26, r26
    4966:	bb 1b       	sub	r27, r27
    4968:	fd 01       	movw	r30, r26
    496a:	0d c0       	rjmp	.+26     	; 0x4986 <__udivmodsi4_ep>

0000496c <__udivmodsi4_loop>:
    496c:	aa 1f       	adc	r26, r26
    496e:	bb 1f       	adc	r27, r27
    4970:	ee 1f       	adc	r30, r30
    4972:	ff 1f       	adc	r31, r31
    4974:	a2 17       	cp	r26, r18
    4976:	b3 07       	cpc	r27, r19
    4978:	e4 07       	cpc	r30, r20
    497a:	f5 07       	cpc	r31, r21
    497c:	20 f0       	brcs	.+8      	; 0x4986 <__udivmodsi4_ep>
    497e:	a2 1b       	sub	r26, r18
    4980:	b3 0b       	sbc	r27, r19
    4982:	e4 0b       	sbc	r30, r20
    4984:	f5 0b       	sbc	r31, r21

00004986 <__udivmodsi4_ep>:
    4986:	66 1f       	adc	r22, r22
    4988:	77 1f       	adc	r23, r23
    498a:	88 1f       	adc	r24, r24
    498c:	99 1f       	adc	r25, r25
    498e:	1a 94       	dec	r1
    4990:	69 f7       	brne	.-38     	; 0x496c <__udivmodsi4_loop>
    4992:	60 95       	com	r22
    4994:	70 95       	com	r23
    4996:	80 95       	com	r24
    4998:	90 95       	com	r25
    499a:	9b 01       	movw	r18, r22
    499c:	ac 01       	movw	r20, r24
    499e:	bd 01       	movw	r22, r26
    49a0:	cf 01       	movw	r24, r30
    49a2:	08 95       	ret

000049a4 <__umulhisi3>:
    49a4:	a2 9f       	mul	r26, r18
    49a6:	b0 01       	movw	r22, r0
    49a8:	b3 9f       	mul	r27, r19
    49aa:	c0 01       	movw	r24, r0
    49ac:	a3 9f       	mul	r26, r19
    49ae:	01 d0       	rcall	.+2      	; 0x49b2 <__umulhisi3+0xe>
    49b0:	b2 9f       	mul	r27, r18
    49b2:	70 0d       	add	r23, r0
    49b4:	81 1d       	adc	r24, r1
    49b6:	11 24       	eor	r1, r1
    49b8:	91 1d       	adc	r25, r1
    49ba:	08 95       	ret

000049bc <__udivmodhi4>:
    49bc:	aa 1b       	sub	r26, r26
    49be:	bb 1b       	sub	r27, r27
    49c0:	51 e1       	ldi	r21, 0x11	; 17
    49c2:	07 c0       	rjmp	.+14     	; 0x49d2 <__udivmodhi4_ep>

000049c4 <__udivmodhi4_loop>:
    49c4:	aa 1f       	adc	r26, r26
    49c6:	bb 1f       	adc	r27, r27
    49c8:	a6 17       	cp	r26, r22
    49ca:	b7 07       	cpc	r27, r23
    49cc:	10 f0       	brcs	.+4      	; 0x49d2 <__udivmodhi4_ep>
    49ce:	a6 1b       	sub	r26, r22
    49d0:	b7 0b       	sbc	r27, r23

000049d2 <__udivmodhi4_ep>:
    49d2:	88 1f       	adc	r24, r24
    49d4:	99 1f       	adc	r25, r25
    49d6:	5a 95       	dec	r21
    49d8:	a9 f7       	brne	.-22     	; 0x49c4 <__udivmodhi4_loop>
    49da:	80 95       	com	r24
    49dc:	90 95       	com	r25
    49de:	bc 01       	movw	r22, r24
    49e0:	cd 01       	movw	r24, r26
    49e2:	08 95       	ret

000049e4 <memchr>:
    49e4:	fc 01       	movw	r30, r24
    49e6:	41 50       	subi	r20, 0x01	; 1
    49e8:	50 40       	sbci	r21, 0x00	; 0
    49ea:	30 f0       	brcs	.+12     	; 0x49f8 <memchr+0x14>
    49ec:	01 90       	ld	r0, Z+
    49ee:	06 16       	cp	r0, r22
    49f0:	d1 f7       	brne	.-12     	; 0x49e6 <memchr+0x2>
    49f2:	31 97       	sbiw	r30, 0x01	; 1
    49f4:	cf 01       	movw	r24, r30
    49f6:	08 95       	ret
    49f8:	88 27       	eor	r24, r24
    49fa:	99 27       	eor	r25, r25
    49fc:	08 95       	ret

000049fe <memcpy>:
    49fe:	fb 01       	movw	r30, r22
    4a00:	dc 01       	movw	r26, r24
    4a02:	02 c0       	rjmp	.+4      	; 0x4a08 <memcpy+0xa>
    4a04:	01 90       	ld	r0, Z+
    4a06:	0d 92       	st	X+, r0
    4a08:	41 50       	subi	r20, 0x01	; 1
    4a0a:	50 40       	sbci	r21, 0x00	; 0
    4a0c:	d8 f7       	brcc	.-10     	; 0x4a04 <memcpy+0x6>
    4a0e:	08 95       	ret

00004a10 <strcmp>:
    4a10:	fb 01       	movw	r30, r22
    4a12:	dc 01       	movw	r26, r24
    4a14:	8d 91       	ld	r24, X+
    4a16:	01 90       	ld	r0, Z+
    4a18:	80 19       	sub	r24, r0
    4a1a:	01 10       	cpse	r0, r1
    4a1c:	d9 f3       	breq	.-10     	; 0x4a14 <strcmp+0x4>
    4a1e:	99 0b       	sbc	r25, r25
    4a20:	08 95       	ret

00004a22 <itoa>:
    4a22:	fb 01       	movw	r30, r22
    4a24:	9f 01       	movw	r18, r30
    4a26:	e8 94       	clt
    4a28:	42 30       	cpi	r20, 0x02	; 2
    4a2a:	bc f0       	brlt	.+46     	; 0x4a5a <itoa+0x38>
    4a2c:	45 32       	cpi	r20, 0x25	; 37
    4a2e:	ac f4       	brge	.+42     	; 0x4a5a <itoa+0x38>
    4a30:	4a 30       	cpi	r20, 0x0A	; 10
    4a32:	29 f4       	brne	.+10     	; 0x4a3e <itoa+0x1c>
    4a34:	97 fb       	bst	r25, 7
    4a36:	1e f4       	brtc	.+6      	; 0x4a3e <itoa+0x1c>
    4a38:	90 95       	com	r25
    4a3a:	81 95       	neg	r24
    4a3c:	9f 4f       	sbci	r25, 0xFF	; 255
    4a3e:	64 2f       	mov	r22, r20
    4a40:	77 27       	eor	r23, r23
    4a42:	bc df       	rcall	.-136    	; 0x49bc <__udivmodhi4>
    4a44:	80 5d       	subi	r24, 0xD0	; 208
    4a46:	8a 33       	cpi	r24, 0x3A	; 58
    4a48:	0c f0       	brlt	.+2      	; 0x4a4c <itoa+0x2a>
    4a4a:	89 5d       	subi	r24, 0xD9	; 217
    4a4c:	81 93       	st	Z+, r24
    4a4e:	cb 01       	movw	r24, r22
    4a50:	00 97       	sbiw	r24, 0x00	; 0
    4a52:	a9 f7       	brne	.-22     	; 0x4a3e <itoa+0x1c>
    4a54:	16 f4       	brtc	.+4      	; 0x4a5a <itoa+0x38>
    4a56:	5d e2       	ldi	r21, 0x2D	; 45
    4a58:	51 93       	st	Z+, r21
    4a5a:	10 82       	st	Z, r1
    4a5c:	c9 01       	movw	r24, r18
    4a5e:	00 c0       	rjmp	.+0      	; 0x4a60 <strrev>

00004a60 <strrev>:
    4a60:	dc 01       	movw	r26, r24
    4a62:	fc 01       	movw	r30, r24
    4a64:	67 2f       	mov	r22, r23
    4a66:	71 91       	ld	r23, Z+
    4a68:	77 23       	and	r23, r23
    4a6a:	e1 f7       	brne	.-8      	; 0x4a64 <strrev+0x4>
    4a6c:	32 97       	sbiw	r30, 0x02	; 2
    4a6e:	04 c0       	rjmp	.+8      	; 0x4a78 <strrev+0x18>
    4a70:	7c 91       	ld	r23, X
    4a72:	6d 93       	st	X+, r22
    4a74:	70 83       	st	Z, r23
    4a76:	62 91       	ld	r22, -Z
    4a78:	ae 17       	cp	r26, r30
    4a7a:	bf 07       	cpc	r27, r31
    4a7c:	c8 f3       	brcs	.-14     	; 0x4a70 <strrev+0x10>
    4a7e:	08 95       	ret

00004a80 <_exit>:
    4a80:	f8 94       	cli

00004a82 <__stop_program>:
    4a82:	ff cf       	rjmp	.-2      	; 0x4a82 <__stop_program>
